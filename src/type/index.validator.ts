/* eslint-disable */
// generated by typescript-json-validator
import Ajv from 'ajv';
import {Perpetual, QueryPerpetualsResult, QueryPerpetualBySymbolResult, QueryPerpetualByPoolResult, QueryPerpVolumeHistoryResult, QuerySpecifyPerpetualResult, User, RecentTrade, QueryRecentTradesResult, TradePrice, OraclePrice, BackendOraclePriceStruct, QueryCandleResult, Query24HoursPriceChangeResult, Query24HoursPriceChangeFromBackendResult, QueryCandleFromBackendResult, HistoryTrade, QueryHistoryTrades, JWT, OrderStruct, OrderCancelReason, PlaceOrderResult, CancelOrderResult, CancelAllOrdersResult, GetMyOrderResult, GetMyOrdersResult, GetMyOrdersByPerpResult, GetSignOrderInfoResult, ConfirmedOrder, QueryConfirmedOrdersResult, Trader, QueryTradesResult, MarginAccount, QueryMarginAccountResult, Acc, Volume, QueryPriceStatusResult, LiquidityPoolStruct, QueryLiquidityPoolsResult, QuerySpecifiedPoolsResult, QueryPoolsFromGovernorResult, ShareTokenStruct, PoolStruct, PoolLiquidityData, PoolLiquidityHistory, Governor, PoolProposal, Vote, QueryAllPoolsResult, QueryPoolBaseInfoResult, QueryPoolsLiquidityHistoryResult, QueryPoolsVolumesHistoryResult, QueryPoolVolumeHistoryResult, QueryPoolLatestNAVResult, QueryPoolPerpetualListDetailsResult, QueryPoolLiquidityHistoryListResult, QueryPoolProposalListResult, QueryPoolHistoryDataResult, QueryPoolProposalDetailsResult, Liquidate, QueryLiquidatesResult, L2TransactionLog, L2TransactionReceipt, TxToL1, TxToL2, MessageDelivered, L2ToL1Transaction, OutboundTransferInitiated, InboundTransferFinalized, QueryMessageDeliveredResult, QueryTxToL1sResult, QueryTxToL2sResult, QueryOutboundTransferInitiatedResult, QueryInboundTransferFinalizedResult, QueryL2ToL1TransactionsResult, UniswapPair, UniswapV3Token, UniswapV3Tick, UniswapV3Pool, QueryUniV3PriceResult, QueryTokenPriceResult, QueryUniswapV3PoolsResult, QueryUniswapV3PoolsByAddressesResult, QueryUniswapV3PoolsByTokenResult, McdexData, QueryMcdexDataResult, CapturedFeeInfo, liquidityPoolsInfo, QueryCapturedFeeUSDResult, QueryDaoPoolAddressResult, DaoGovernor, DaoGovernorProposal, DaoGovernorVote, DaoGovernorUser, DaoGovernorDelegate, QueryDaoProposalListResult, QueryDaoProposalResultByIndexResult, QueryDaoVoteDelegateInfoResult, ChainBlock, QueryChainBlockResult, QueryTimeStampByBlockNumber, QueryLatestBlockNumber, TransactionMiningInfo, TransactionMiningTrade, TransactionMiningUserInfo, QueryTransactionMiningInfoResult, QueryTransactionMiningTradeResult, QueryTransactionMiningUserResult, Factories, QueryVaultAssetResult, FundingRate, QueryPerpFundingRateResult, BalancerPool, BalancerPoolToken, QueryBalancerMiningPoolInfoResult, SushiSwapPair, SushiSwapMiniChef, SushiSwapPool, SushiSwapRewarder, QuerySushiPairResult, QuerySushiMiningPoolInfoResult, AccountTradingMiningInfo, AccountTradingMiningMultiChainInfo, TotalTradingMiningInfo, QueryAccountTradingMiningInfoResult, QueryAccountTradingMiningMultiChainInfoResult, QueryTotalTradingMiningInfoResult, AccountGasFeeInfo, QueryAccountGasFeeInfoResult, LiquidityAccount, QueryAccountLiquidityPoolResult, QueryLiquidityAccountResult} from './index';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {Perpetual, QueryPerpetualsResult, QueryPerpetualBySymbolResult, QueryPerpetualByPoolResult, QueryPerpVolumeHistoryResult, QuerySpecifyPerpetualResult, User, RecentTrade, QueryRecentTradesResult, TradePrice, OraclePrice, BackendOraclePriceStruct, QueryCandleResult, Query24HoursPriceChangeResult, Query24HoursPriceChangeFromBackendResult, QueryCandleFromBackendResult, HistoryTrade, QueryHistoryTrades, JWT, OrderStruct, OrderCancelReason, PlaceOrderResult, CancelOrderResult, CancelAllOrdersResult, GetMyOrderResult, GetMyOrdersResult, GetMyOrdersByPerpResult, GetSignOrderInfoResult, ConfirmedOrder, QueryConfirmedOrdersResult, Trader, QueryTradesResult, MarginAccount, QueryMarginAccountResult, Acc, Volume, QueryPriceStatusResult, LiquidityPoolStruct, QueryLiquidityPoolsResult, QuerySpecifiedPoolsResult, QueryPoolsFromGovernorResult, ShareTokenStruct, PoolStruct, PoolLiquidityData, PoolLiquidityHistory, Governor, PoolProposal, Vote, QueryAllPoolsResult, QueryPoolBaseInfoResult, QueryPoolsLiquidityHistoryResult, QueryPoolsVolumesHistoryResult, QueryPoolVolumeHistoryResult, QueryPoolLatestNAVResult, QueryPoolPerpetualListDetailsResult, QueryPoolLiquidityHistoryListResult, QueryPoolProposalListResult, QueryPoolHistoryDataResult, QueryPoolProposalDetailsResult, Liquidate, QueryLiquidatesResult, L2TransactionLog, L2TransactionReceipt, TxToL1, TxToL2, MessageDelivered, L2ToL1Transaction, OutboundTransferInitiated, InboundTransferFinalized, QueryMessageDeliveredResult, QueryTxToL1sResult, QueryTxToL2sResult, QueryOutboundTransferInitiatedResult, QueryInboundTransferFinalizedResult, QueryL2ToL1TransactionsResult, UniswapPair, UniswapV3Token, UniswapV3Tick, UniswapV3Pool, QueryUniV3PriceResult, QueryTokenPriceResult, QueryUniswapV3PoolsResult, QueryUniswapV3PoolsByAddressesResult, QueryUniswapV3PoolsByTokenResult, McdexData, QueryMcdexDataResult, CapturedFeeInfo, liquidityPoolsInfo, QueryCapturedFeeUSDResult, QueryDaoPoolAddressResult, DaoGovernor, DaoGovernorProposal, DaoGovernorVote, DaoGovernorUser, DaoGovernorDelegate, QueryDaoProposalListResult, QueryDaoProposalResultByIndexResult, QueryDaoVoteDelegateInfoResult, ChainBlock, QueryChainBlockResult, QueryTimeStampByBlockNumber, QueryLatestBlockNumber, TransactionMiningInfo, TransactionMiningTrade, TransactionMiningUserInfo, QueryTransactionMiningInfoResult, QueryTransactionMiningTradeResult, QueryTransactionMiningUserResult, Factories, QueryVaultAssetResult, FundingRate, QueryPerpFundingRateResult, BalancerPool, BalancerPoolToken, QueryBalancerMiningPoolInfoResult, SushiSwapPair, SushiSwapMiniChef, SushiSwapPool, SushiSwapRewarder, QuerySushiPairResult, QuerySushiMiningPoolInfoResult, AccountTradingMiningInfo, AccountTradingMiningMultiChainInfo, TotalTradingMiningInfo, QueryAccountTradingMiningInfoResult, QueryAccountTradingMiningMultiChainInfoResult, QueryTotalTradingMiningInfoResult, AccountGasFeeInfo, QueryAccountGasFeeInfoResult, LiquidityAccount, QueryAccountLiquidityPoolResult, QueryLiquidityAccountResult};
export const Schema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Acc": {
      "properties": {
        "acc": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "acc",
        "timestamp"
      ],
      "type": "object"
    },
    "AccountGasFeeInfo": {
      "properties": {
        "gasFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "gasFee"
      ],
      "type": "object"
    },
    "AccountTradingMiningInfo": {
      "properties": {
        "averageOI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "averageStake": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "daoFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "proportion": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "score": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "averageOI",
        "averageStake",
        "daoFee",
        "proportion",
        "score",
        "totalFee"
      ],
      "type": "object"
    },
    "AccountTradingMiningMultiChainInfo": {
      "properties": {
        "averageOI": {
          "additionalProperties": {
            "$ref": "#/definitions/BignumberString"
          },
          "type": "object"
        },
        "averageStake": {
          "additionalProperties": {
            "$ref": "#/definitions/BignumberString"
          },
          "type": "object"
        },
        "baseDaoFee": {
          "additionalProperties": {
            "$ref": "#/definitions/BignumberString"
          },
          "type": "object"
        },
        "daoFee": {
          "additionalProperties": {
            "$ref": "#/definitions/BignumberString"
          },
          "type": "object"
        },
        "proportion": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "score": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalFee": {
          "additionalProperties": {
            "$ref": "#/definitions/BignumberString"
          },
          "type": "object"
        }
      },
      "required": [
        "averageOI",
        "averageStake",
        "baseDaoFee",
        "daoFee",
        "proportion",
        "score",
        "totalFee"
      ],
      "type": "object"
    },
    "Array": {
      "items": {
        "$ref": "#/definitions/Perpetual"
      },
      "type": "array"
    },
    "Array_1": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "Array_2": {
      "items": {
        "$ref": "#/definitions/L2TransactionLog"
      },
      "type": "array"
    },
    "BackendOraclePriceStruct": {
      "properties": {
        "close": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "high": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "low": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "open": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "close",
        "high",
        "low",
        "open",
        "price",
        "timestamp"
      ],
      "type": "object"
    },
    "BalancerPool": {
      "properties": {
        "address": {
          "default": "",
          "type": "string"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "tokens": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/BalancerPoolToken"
          },
          "type": "array"
        },
        "totalLiquidity": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalSwapFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "address",
        "id",
        "tokens",
        "totalLiquidity",
        "totalSwapFee"
      ],
      "type": "object"
    },
    "BalancerPoolToken": {
      "properties": {
        "address": {
          "default": "",
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "symbol": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "address",
        "balance",
        "id",
        "symbol"
      ],
      "type": "object"
    },
    "BignumberString": {
      "anyOf": [
        {
          "$ref": "#/definitions/default"
        },
        {
          "type": "string"
        }
      ]
    },
    "BignumberString_1": {
      "anyOf": [
        {
          "$ref": "#/definitions/default"
        },
        {
          "type": "string"
        }
      ]
    },
    "CancelAllOrdersResult": {
      "type": "object"
    },
    "CancelOrderResult": {
      "type": "object"
    },
    "CapturedFeeInfo": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "totalCapturedUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "totalCapturedUSD"
      ],
      "type": "object"
    },
    "ChainBlock": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "number": {
          "default": "",
          "type": "string"
        },
        "timestamp": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id",
        "number",
        "timestamp"
      ],
      "type": "object"
    },
    "ConfirmedOrder": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "gas": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "default": "",
          "type": "string"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "amount",
        "gas",
        "id",
        "perpetual",
        "price",
        "timestamp",
        "transactionHash",
        "type"
      ],
      "type": "object"
    },
    "DaoGovernor": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "proposalCount": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "id",
        "proposalCount"
      ],
      "type": "object"
    },
    "DaoGovernorDelegate": {
      "properties": {
        "delegatee": {
          "anyOf": [
            {
              "$ref": "#/definitions/DaoGovernorUser_1"
            },
            {
              "type": "null"
            }
          ]
        },
        "delegators": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernorUser_1"
          },
          "type": "array"
        },
        "id": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "DaoGovernorProposal": {
      "properties": {
        "against": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "calldatas": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "default": "",
          "type": "string"
        },
        "endBlock": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "endTimestamp": {
          "default": 0,
          "type": "number"
        },
        "eta": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "executedBlockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "for": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "isExecuted": {
          "default": false,
          "type": "boolean"
        },
        "proposer": {
          "$ref": "#/definitions/DaoGovernorUser"
        },
        "signatures": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startBlock": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "startTimestamp": {
          "default": 0,
          "type": "number"
        },
        "state": {
          "default": 0,
          "type": "number"
        },
        "targets": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "timestamp": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        },
        "values": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/IntString_1"
          },
          "type": "array"
        },
        "votes": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernorVote"
          },
          "type": "array"
        }
      },
      "required": [
        "against",
        "calldatas",
        "description",
        "endBlock",
        "eta",
        "executedBlockNumber",
        "for",
        "id",
        "isExecuted",
        "signatures",
        "startBlock",
        "targets",
        "timestamp",
        "values"
      ],
      "type": "object"
    },
    "DaoGovernorUser": {
      "$ref": "#/definitions/DaoGovernorUser_1"
    },
    "DaoGovernorUser_1": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "DaoGovernorVote": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "support": {
          "default": false,
          "type": "boolean"
        },
        "voter": {
          "$ref": "#/definitions/DaoGovernorUser"
        },
        "votes": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Factories": {
      "properties": {
        "collaterals": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Function": {
      "description": "Creates a new function.",
      "properties": {
        "arguments": {
        },
        "caller": {
          "$ref": "#/definitions/Function"
        },
        "length": {
          "type": "number"
        },
        "name": {
          "description": "Returns the name of the function. Function names are read-only and can not be changed.",
          "type": "string"
        },
        "prototype": {
        }
      },
      "required": [
        "arguments",
        "caller",
        "length",
        "name",
        "prototype"
      ],
      "type": "object"
    },
    "FundingRate": {
      "properties": {
        "fundingRate": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "fundingRate",
        "id",
        "perpetual",
        "timestamp"
      ],
      "type": "object"
    },
    "GetMyOrderResult": {
      "type": "object"
    },
    "GetMyOrdersByPerpResult": {
      "type": "object"
    },
    "GetMyOrdersResult": {
      "properties": {
        "orders": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/OrderStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "orders"
      ],
      "type": "object"
    },
    "GetSignOrderInfoResult": {
      "properties": {
        "brokerAddress": {
          "default": "",
          "type": "string"
        },
        "relayerAddress": {
          "default": "",
          "type": "string"
        },
        "version": {
          "default": 3,
          "type": "number"
        }
      },
      "required": [
        "brokerAddress",
        "relayerAddress",
        "version"
      ],
      "type": "object"
    },
    "Governor": {
      "$ref": "#/definitions/Governor_1"
    },
    "Governor_1": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "periodFinish": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "proposalCount": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "proposals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolProposal"
          },
          "type": "array"
        },
        "rewardRate": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalReward": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalVotes": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "periodFinish",
        "proposalCount",
        "rewardRate",
        "totalReward",
        "totalVotes"
      ],
      "type": "object"
    },
    "HistoryTrade": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "side": {
          "default": 0,
          "type": "number"
        },
        "timestamp": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "amount",
        "price",
        "side",
        "timestamp"
      ],
      "type": "object"
    },
    "InboundTransferFinalized": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "token": {
          "default": "",
          "type": "string"
        },
        "transferId": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "txHash": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "blockNumber",
        "data",
        "from",
        "id",
        "timestamp",
        "to",
        "token",
        "transferId",
        "txHash"
      ],
      "type": "object"
    },
    "IntString": {
      "type": [
        "string",
        "number"
      ]
    },
    "IntString_1": {
      "type": [
        "string",
        "number"
      ]
    },
    "JWT": {
      "properties": {
        "expires": {
          "default": 0,
          "type": "number"
        },
        "jwt": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "expires",
        "jwt"
      ],
      "type": "object"
    },
    "L2ToL1Transaction": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "arbBlockNum": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "batchNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "caller": {
          "default": "",
          "type": "string"
        },
        "callvalue": {
          "$ref": "#/definitions/BignumberString",
          "default": ""
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "destination": {
          "default": "",
          "type": "string"
        },
        "ethBlockNum": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "indexInBatch": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "token": {
          "default": "",
          "type": "string"
        },
        "txHash": {
          "default": "",
          "type": "string"
        },
        "uniqueId": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "amount",
        "arbBlockNum",
        "batchNumber",
        "caller",
        "callvalue",
        "data",
        "destination",
        "ethBlockNum",
        "from",
        "id",
        "indexInBatch",
        "timestamp",
        "to",
        "token",
        "txHash",
        "uniqueId"
      ],
      "type": "object"
    },
    "L2TransactionLog": {
      "properties": {
        "address": {
          "default": "",
          "type": "string"
        },
        "blockHash": {
          "default": "",
          "type": "string"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "logIndex": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        },
        "removed": {
          "default": false,
          "type": "boolean"
        },
        "topics": {
          "$ref": "#/definitions/Array_1",
          "default": [
          ]
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "transactionIndex": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        }
      },
      "required": [
        "address",
        "blockHash",
        "blockNumber",
        "data",
        "logIndex",
        "removed",
        "topics",
        "transactionHash",
        "transactionIndex"
      ],
      "type": "object"
    },
    "L2TransactionReceipt": {
      "properties": {
        "blockHash": {
          "default": "",
          "type": "string"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        },
        "contractAddress": {
          "default": null,
          "type": [
            "null",
            "string"
          ]
        },
        "cumulativeGasUsed": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "gasUsed": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        },
        "logs": {
          "$ref": "#/definitions/Array_2",
          "default": [
          ]
        },
        "logsBloom": {
          "default": "0x
          "type": "string"
        },
        "returnCode": {
          "$ref": "#/definitions/ReturnCode"
        },
        "returnData": {
          "default": "0x",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/IntString_1",
          "default": 0
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "transactionIndex": {
          "$ref": "#/definitions/IntString_1",
          "default": "0x0"
        }
      },
      "required": [
        "blockHash",
        "blockNumber",
        "contractAddress",
        "cumulativeGasUsed",
        "from",
        "gasUsed",
        "logs",
        "logsBloom",
        "returnCode",
        "returnData",
        "status",
        "to",
        "transactionHash",
        "transactionIndex"
      ],
      "type": "object"
    },
    "Liquidate": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": ""
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidator": {
          "default": "",
          "type": "string"
        },
        "markPrice": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "penalty": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual"
        },
        "perpetualID": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "default": "0",
          "type": "string"
        },
        "trader": {
          "default": "",
          "type": "string"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "amount",
        "blockNumber",
        "id",
        "liquidator",
        "markPrice",
        "penalty",
        "perpetual",
        "price",
        "timestamp",
        "trader",
        "transactionHash",
        "type"
      ],
      "type": "object"
    },
    "LiquidityAccount": {
      "properties": {
        "entryCollateralAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "entryPoolMargin": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidityPool": {
          "$ref": "#/definitions/PoolStruct_1"
        },
        "shareAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "entryCollateralAmount",
        "entryPoolMargin",
        "id",
        "shareAmount"
      ],
      "type": "object"
    },
    "LiquidityPoolStruct": {
      "properties": {
        "collateralAddress": {
          "default": "",
          "type": "string"
        },
        "collateralDecimals": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "collateralName": {
          "default": "",
          "type": "string"
        },
        "createdAtTimestamp": {
          "$ref": "#/definitions/MomentString_1",
          "default": ""
        },
        "governor": {
          "$ref": "#/definitions/Governor"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "isRun": {
          "default": false,
          "type": "boolean"
        },
        "liquidityProviderCount": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "operatorAddress": {
          "default": "",
          "type": "string"
        },
        "operatorExpiration": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "poolMargin": {
          "$ref": "#/definitions/BignumberString_1",
          "default": ""
        },
        "poolMarginUSD": {
          "$ref": "#/definitions/BignumberString_1",
          "default": ""
        },
        "shareAddress": {
          "default": "",
          "type": "string"
        },
        "voteAddress": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "MarginAccount": {
      "properties": {
        "entryFunding": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "entryValue": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual_1"
        },
        "position": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "entryFunding",
        "entryValue",
        "id",
        "position"
      ],
      "type": "object"
    },
    "McdexData": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "totalValueLockedUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalVolumeUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "timestamp",
        "totalValueLockedUSD",
        "totalVolumeUSD"
      ],
      "type": "object"
    },
    "MessageDelivered": {
      "properties": {
        "beforeInboxAcc": {
          "default": "",
          "type": "string"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "inbox": {
          "default": "",
          "type": "string"
        },
        "kind": {
          "default": 0,
          "type": "number"
        },
        "messageDataHash": {
          "default": "",
          "type": "string"
        },
        "messageIndex": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "sender": {
          "default": "",
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "txHash": {
          "default": "",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "beforeInboxAcc",
        "blockNumber",
        "id",
        "inbox",
        "kind",
        "messageDataHash",
        "messageIndex",
        "sender",
        "timestamp",
        "txHash",
        "value"
      ],
      "type": "object"
    },
    "MomentString": {
      "anyOf": [
        {
          "$ref": "#/definitions/moment.Moment"
        },
        {
          "type": "string"
        }
      ]
    },
    "MomentString_1": {
      "anyOf": [
        {
          "$ref": "#/definitions/moment.Moment"
        },
        {
          "type": "string"
        }
      ]
    },
    "ORDER_CANCEL_REASON": {
      "enum": [
        "CANCELED_BY_ADMIN",
        "CANCELED_BY_CLOSE_ONLY",
        "CANCELED_BY_USER",
        "CAN_NOT_ENTER_POSITION_BY_MARKET_ORDER_AFTER_EXPIRED",
        "CONTRACT_SETTLED",
        "EXPIRED",
        "GAS_NOT_ENOUGH",
        "INSUFFICIENT_FUNDS",
        "INTERNAL_ERROR",
        "LONG_PRICE_TOO_HIGH_AFTER_EXPIRED",
        "MATCH_TOO_SMALL",
        "NO_MORE_MARKET",
        "POST_ONLY_ORDER_WOULD_TAKE",
        "REMAIN_TOO_SMALL",
        "SELF_TRADE",
        "SHORT_PRICE_TOO_LOW_AFTER_EXPIRED",
        "TOO_MANY_MATCHES",
        "TRANSACTION_FAIL"
      ],
      "type": "string"
    },
    "ORDER_STATUS": {
      "enum": [
        "",
        "canceled",
        "full_filled",
        "partial_filled",
        "pending"
      ],
      "type": "string"
    },
    "OraclePrice": {
      "properties": {
        "close": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "high": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "low": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "open": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "close",
        "high",
        "low",
        "open",
        "timestamp"
      ],
      "type": "object"
    },
    "OrderCancelReason": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "canceledAt": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        },
        "reason": {
          "$ref": "#/definitions/ORDER_CANCEL_REASON"
        },
        "transactionHash": {
          "type": "string"
        }
      },
      "required": [
        "amount",
        "canceledAt",
        "reason"
      ],
      "type": "object"
    },
    "OrderStruct": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "availableAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "brokerAddress": {
          "default": "",
          "type": "string"
        },
        "brokerFeeLimit": {
          "default": 0,
          "type": "number"
        },
        "cancelReasons": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/OrderCancelReason"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "canceledAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "collateralAddress": {
          "default": "",
          "type": "string"
        },
        "confirmedAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "createdAt": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        },
        "expiresAt": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        },
        "isCloseOnly": {
          "default": false,
          "type": "boolean"
        },
        "liquidityPoolAddress": {
          "default": "",
          "type": "string"
        },
        "minTradeAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "oldStatus": {
          "$ref": "#/definitions/ORDER_STATUS"
        },
        "orderHash": {
          "default": "",
          "type": "string"
        },
        "pendingAmount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "perpetualIndex": {
          "default": 0,
          "type": "number"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "referrerAddress": {
          "default": "",
          "type": "string"
        },
        "relayerAddress": {
          "default": "",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ORDER_STATUS"
        },
        "targetLeverage": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "traderAddress": {
          "default": "",
          "type": "string"
        },
        "triggerPrice": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "type": {
          "$ref": "#/definitions/WS_ORDER_TYPE"
        },
        "updatedAt": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        }
      },
      "required": [
        "amount",
        "availableAmount",
        "brokerAddress",
        "brokerFeeLimit",
        "cancelReasons",
        "canceledAmount",
        "collateralAddress",
        "confirmedAmount",
        "createdAt",
        "expiresAt",
        "isCloseOnly",
        "liquidityPoolAddress",
        "minTradeAmount",
        "oldStatus",
        "orderHash",
        "pendingAmount",
        "perpetualIndex",
        "price",
        "referrerAddress",
        "relayerAddress",
        "status",
        "targetLeverage",
        "traderAddress",
        "triggerPrice",
        "type",
        "updatedAt"
      ],
      "type": "object"
    },
    "OutboundTransferInitiated": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "token": {
          "default": "",
          "type": "string"
        },
        "transferId": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "txHash": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "blockNumber",
        "data",
        "from",
        "id",
        "timestamp",
        "to",
        "token",
        "transferId",
        "txHash"
      ],
      "type": "object"
    },
    "Perpetual": {
      "properties": {
        "collateralAddress": {
          "default": "",
          "type": "string"
        },
        "createdAtBlockNumber": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "createdAtTimestamp": {
          "$ref": "#/definitions/MomentString_1",
          "default": ""
        },
        "entryValue": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "index": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "isRun": {
          "default": false,
          "type": "boolean"
        },
        "lastPrice": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "liqCount": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "liquidityPool": {
          "anyOf": [
            {
              "$ref": "#/definitions/LiquidityPoolStruct"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "lpFee": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "operatorAddress": {
          "default": "",
          "type": "string"
        },
        "oracleAddress": {
          "default": "",
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "settledAtBlockNumber": {
          "default": null,
          "type": [
            "null",
            "string",
            "number"
          ]
        },
        "settledAtTimestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/moment.Moment"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": null
        },
        "state": {
          "default": 0,
          "type": "number"
        },
        "symbol": {
          "default": "",
          "type": "string"
        },
        "totalFee": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "totalVolume": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "totalVolumeUSD": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "txCount": {
          "$ref": "#/definitions/IntString",
          "default": 0
        },
        "underlying": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Perpetual_1": {
      "$ref": "#/definitions/Perpetual"
    },
    "PlaceOrderResult": {
      "properties": {
        "data": {
          "properties": {
            "order": {
              "$ref": "#/definitions/OrderStruct"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        },
        "status": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "data",
        "status"
      ],
      "type": "object"
    },
    "PoolLiquidityData": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidityPool": {
          "default": "",
          "type": "string"
        },
        "netAssetValue": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "poolMargin": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "id",
        "liquidityPool",
        "netAssetValue",
        "poolMargin",
        "timestamp"
      ],
      "type": "object"
    },
    "PoolLiquidityHistory": {
      "properties": {
        "collateral": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidityPool": {
          "$ref": "#/definitions/PoolStruct"
        },
        "timestamp": {
          "$ref": "#/definitions/MomentString_1",
          "default": ""
        },
        "trader": {
          "default": "",
          "type": "string"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        }
      },
      "required": [
        "collateral",
        "id",
        "liquidityPool",
        "trader",
        "transactionHash",
        "type"
      ],
      "type": "object"
    },
    "PoolProposal": {
      "properties": {
        "against": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "calldatas": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "default": "",
          "type": "string"
        },
        "endBlock": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "endTimestamp": {
          "default": 0,
          "type": "number"
        },
        "executedBlockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "for": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "governor": {
          "$ref": "#/definitions/Governor_1"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "index": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "isExecuted": {
          "default": false,
          "type": "boolean"
        },
        "proposer": {
          "$ref": "#/definitions/User"
        },
        "signatures": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startBlock": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "startTimestamp": {
          "default": 0,
          "type": "number"
        },
        "state": {
          "default": 0,
          "type": "number"
        },
        "timestamp": {
          "$ref": "#/definitions/MomentString",
          "default": ""
        },
        "votes": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Vote"
          },
          "type": "array"
        }
      },
      "required": [
        "against",
        "calldatas",
        "description",
        "endBlock",
        "executedBlockNumber",
        "for",
        "governor",
        "id",
        "index",
        "isExecuted",
        "startBlock",
        "timestamp"
      ],
      "type": "object"
    },
    "PoolStruct": {
      "properties": {
        "collateralAddress": {
          "default": "",
          "type": "string"
        },
        "collateralName": {
          "default": "",
          "type": "string"
        },
        "createdAtTimestamp": {
          "$ref": "#/definitions/MomentString_1",
          "default": ""
        },
        "governor": {
          "$ref": "#/definitions/Governor"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "isRun": {
          "default": false,
          "type": "boolean"
        },
        "liquidityHisCount": {
          "$ref": "#/definitions/IntString",
          "default": "0"
        },
        "operatorAddress": {
          "default": "",
          "type": "string"
        },
        "operatorExpiration": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "perpetuals": {
          "$ref": "#/definitions/Array",
          "default": [
          ]
        },
        "poolMargin": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "poolMarginUSD": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        },
        "proposalCount": {
          "$ref": "#/definitions/IntString",
          "default": "0"
        },
        "shareAddress": {
          "default": "",
          "type": "string"
        },
        "shareToken": {
          "$ref": "#/definitions/ShareTokenStruct_1"
        },
        "voteAddress": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PoolStruct_1": {
      "$ref": "#/definitions/PoolStruct"
    },
    "Query24HoursPriceChangeFromBackendResult": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/BackendOraclePriceStruct"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "Query24HoursPriceChangeResult": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/OraclePrice"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryAccountGasFeeInfoResult": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/AccountGasFeeInfo"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryAccountLiquidityPoolResult": {
      "properties": {
        "liquidityPools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/LiquidityAccount"
          },
          "type": "array"
        }
      },
      "required": [
        "liquidityPools"
      ],
      "type": "object"
    },
    "QueryAccountTradingMiningInfoResult": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/AccountTradingMiningInfo"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryAccountTradingMiningMultiChainInfoResult": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/AccountTradingMiningMultiChainInfo"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryAllPoolsResult": {
      "properties": {
        "poolList": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "poolList"
      ],
      "type": "object"
    },
    "QueryBalancerMiningPoolInfoResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/BalancerPool"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QueryCandleFromBackendResult": {
      "properties": {
        "candles": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/BackendOraclePriceStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "candles"
      ],
      "type": "object"
    },
    "QueryCandleResult": {
      "properties": {
        "oraclePriceCandles": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/OraclePrice"
          },
          "type": "array"
        }
      },
      "required": [
        "oraclePriceCandles"
      ],
      "type": "object"
    },
    "QueryCapturedFeeUSDResult": {
      "properties": {
        "capturedValues": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/CapturedFeeInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "capturedValues"
      ],
      "type": "object"
    },
    "QueryChainBlockResult": {
      "properties": {
        "blocks": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/ChainBlock"
          },
          "type": "array"
        }
      },
      "required": [
        "blocks"
      ],
      "type": "object"
    },
    "QueryConfirmedOrdersResult": {
      "properties": {
        "confirmedOrders": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/ConfirmedOrder"
          },
          "type": "array"
        }
      },
      "required": [
        "confirmedOrders"
      ],
      "type": "object"
    },
    "QueryDaoPoolAddressResult": {
      "properties": {
        "liquidityPools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/liquidityPoolsInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "liquidityPools"
      ],
      "type": "object"
    },
    "QueryDaoProposalListResult": {
      "properties": {
        "daoGovernors": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernor"
          },
          "type": "array"
        },
        "proposals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernorProposal"
          },
          "type": "array"
        }
      },
      "required": [
        "daoGovernors",
        "proposals"
      ],
      "type": "object"
    },
    "QueryDaoProposalResultByIndexResult": {
      "properties": {
        "proposals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernorProposal"
          },
          "type": "array"
        }
      },
      "required": [
        "proposals"
      ],
      "type": "object"
    },
    "QueryDaoVoteDelegateInfoResult": {
      "properties": {
        "delegates": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/DaoGovernorDelegate"
          },
          "type": "array"
        }
      },
      "required": [
        "delegates"
      ],
      "type": "object"
    },
    "QueryHistoryTrades": {
      "properties": {
        "historyTrades": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/HistoryTrade"
          },
          "type": "array"
        }
      },
      "required": [
        "historyTrades"
      ],
      "type": "object"
    },
    "QueryInboundTransferFinalizedResult": {
      "properties": {
        "inboundTransferFinalizeds": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/InboundTransferFinalized"
          },
          "type": "array"
        }
      },
      "required": [
        "inboundTransferFinalizeds"
      ],
      "type": "object"
    },
    "QueryL2ToL1TransactionsResult": {
      "properties": {
        "erc20Transactions": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/L2ToL1Transaction"
          },
          "type": "array"
        },
        "ethTransactions": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/L2ToL1Transaction"
          },
          "type": "array"
        }
      },
      "required": [
        "erc20Transactions",
        "ethTransactions"
      ],
      "type": "object"
    },
    "QueryLatestBlockNumber": {
      "properties": {
        "indexingStatusForCurrentVersion": {
          "properties": {
            "chains": {
              "items": {
                "properties": {
                  "latestBlock": {
                    "properties": {
                      "number": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "number"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "latestBlock"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "chains"
          ],
          "type": "object"
        }
      },
      "required": [
        "indexingStatusForCurrentVersion"
      ],
      "type": "object"
    },
    "QueryLiquidatesResult": {
      "properties": {
        "liquidates": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Liquidate"
          },
          "type": "array"
        }
      },
      "required": [
        "liquidates"
      ],
      "type": "object"
    },
    "QueryLiquidityAccountResult": {
      "properties": {
        "liquidityAccounts": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/LiquidityAccount"
          },
          "type": "array"
        }
      },
      "required": [
        "liquidityAccounts"
      ],
      "type": "object"
    },
    "QueryLiquidityPoolsResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/LiquidityPoolStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QueryMarginAccountResult": {
      "properties": {
        "marginAccounts": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/MarginAccount"
          },
          "type": "array"
        }
      },
      "required": [
        "marginAccounts"
      ],
      "type": "object"
    },
    "QueryMcdexDataResult": {
      "properties": {
        "mcdexDatas": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/McdexData"
          },
          "type": "array"
        }
      },
      "required": [
        "mcdexDatas"
      ],
      "type": "object"
    },
    "QueryMessageDeliveredResult": {
      "properties": {
        "messageDelivereds": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/MessageDelivered"
          },
          "type": "array"
        }
      },
      "required": [
        "messageDelivereds"
      ],
      "type": "object"
    },
    "QueryOutboundTransferInitiatedResult": {
      "properties": {
        "outboundTransferInitiateds": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/OutboundTransferInitiated"
          },
          "type": "array"
        }
      },
      "required": [
        "outboundTransferInitiateds"
      ],
      "type": "object"
    },
    "QueryPerpFundingRateResult": {
      "properties": {
        "fundingRateList": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/FundingRate"
          },
          "type": "array"
        }
      },
      "required": [
        "fundingRateList"
      ],
      "type": "object"
    },
    "QueryPerpVolumeHistoryResult": {
      "properties": {
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "volumes": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        },
        "volumes24h": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "perpetuals",
        "volumes",
        "volumes24h"
      ],
      "type": "object"
    },
    "QueryPerpetualByPoolResult": {
      "properties": {
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        }
      },
      "required": [
        "perpetuals"
      ],
      "type": "object"
    },
    "QueryPerpetualBySymbolResult": {
      "properties": {
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        }
      },
      "required": [
        "perpetuals"
      ],
      "type": "object"
    },
    "QueryPerpetualsResult": {
      "properties": {
        "asCollateral": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "asSymbol": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "asUnderlying": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        }
      },
      "required": [
        "asCollateral",
        "asSymbol",
        "asUnderlying"
      ],
      "type": "object"
    },
    "QueryPoolBaseInfoResult": {
      "properties": {
        "poolBaseInfo": {
          "$ref": "#/definitions/PoolStruct"
        }
      },
      "required": [
        "poolBaseInfo"
      ],
      "type": "object"
    },
    "QueryPoolHistoryDataResult": {
      "properties": {
        "poolDatas": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolLiquidityData"
          },
          "type": "array"
        }
      },
      "required": [
        "poolDatas"
      ],
      "type": "object"
    },
    "QueryPoolLatestNAVResult": {
      "properties": {
        "poolDayDatas": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolLiquidityData"
          },
          "type": "array"
        }
      },
      "required": [
        "poolDayDatas"
      ],
      "type": "object"
    },
    "QueryPoolLiquidityHistoryListResult": {
      "properties": {
        "history": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolLiquidityHistory"
          },
          "type": "array"
        }
      },
      "required": [
        "history"
      ],
      "type": "object"
    },
    "QueryPoolPerpetualListDetailsResult": {
      "properties": {
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "volumes24H": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        },
        "volumes7D": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "perpetuals",
        "volumes24H",
        "volumes7D"
      ],
      "type": "object"
    },
    "QueryPoolProposalDetailsResult": {
      "properties": {
        "proposals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolProposal"
          },
          "type": "array"
        }
      },
      "required": [
        "proposals"
      ],
      "type": "object"
    },
    "QueryPoolProposalListResult": {
      "properties": {
        "proposals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolProposal"
          },
          "type": "array"
        }
      },
      "required": [
        "proposals"
      ],
      "type": "object"
    },
    "QueryPoolVolumeHistoryResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/PoolStruct"
          },
          "type": "array"
        },
        "volumes": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "pools",
        "volumes"
      ],
      "type": "object"
    },
    "QueryPoolsFromGovernorResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/LiquidityPoolStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QueryPoolsLiquidityHistoryResult": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/PoolLiquidityData"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryPoolsVolumesHistoryResult": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Volume"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryPriceStatusResult": {
      "properties": {
        "accs": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Acc"
          },
          "type": "array"
        },
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        },
        "volumes": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "accs",
        "perpetuals",
        "volumes"
      ],
      "type": "object"
    },
    "QueryRecentTradesResult": {
      "properties": {
        "recentTrades": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/RecentTrade"
          },
          "type": "array"
        }
      },
      "required": [
        "recentTrades"
      ],
      "type": "object"
    },
    "QuerySpecifiedPoolsResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/LiquidityPoolStruct"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QuerySpecifyPerpetualResult": {
      "properties": {
        "perpetuals": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Perpetual"
          },
          "type": "array"
        }
      },
      "required": [
        "perpetuals"
      ],
      "type": "object"
    },
    "QuerySushiMiningPoolInfoResult": {
      "properties": {
        "miniChefs": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/SushiSwapMiniChef"
          },
          "type": "array"
        },
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/SushiSwapPool"
          },
          "type": "array"
        }
      },
      "required": [
        "miniChefs",
        "pools"
      ],
      "type": "object"
    },
    "QuerySushiPairResult": {
      "properties": {
        "pairs": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/SushiSwapPair"
          },
          "type": "array"
        }
      },
      "required": [
        "pairs"
      ],
      "type": "object"
    },
    "QueryTimeStampByBlockNumber": {
      "properties": {
        "blocks": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/ChainBlock"
          },
          "type": "array"
        }
      },
      "required": [
        "blocks"
      ],
      "type": "object"
    },
    "QueryTokenPriceResult": {
      "properties": {
        "data": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/UniswapPair"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryTotalTradingMiningInfoResult": {
      "properties": {
        "data": {
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/TotalTradingMiningInfo"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "QueryTradesResult": {
      "properties": {
        "trades": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Trade"
          },
          "type": "array"
        }
      },
      "required": [
        "trades"
      ],
      "type": "object"
    },
    "QueryTransactionMiningInfoResult": {
      "properties": {
        "miningInfos": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/TransactionMiningInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "miningInfos"
      ],
      "type": "object"
    },
    "QueryTransactionMiningTradeResult": {
      "properties": {
        "tradeAccounts": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/TransactionMiningTrade"
          },
          "type": "array"
        }
      },
      "required": [
        "tradeAccounts"
      ],
      "type": "object"
    },
    "QueryTransactionMiningUserResult": {
      "properties": {
        "user": {
          "anyOf": [
            {
              "$ref": "#/definitions/TransactionMiningUserInfo"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "required": [
        "user"
      ],
      "type": "object"
    },
    "QueryTxToL1sResult": {
      "properties": {
        "txToL1S": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/TxToL1"
          },
          "type": "array"
        }
      },
      "required": [
        "txToL1S"
      ],
      "type": "object"
    },
    "QueryTxToL2sResult": {
      "properties": {
        "txToL2S": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/TxToL2"
          },
          "type": "array"
        }
      },
      "required": [
        "txToL2S"
      ],
      "type": "object"
    },
    "QueryUniV3PriceResult": {
      "properties": {
        "tokens": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Token"
          },
          "type": "array"
        },
        "usdcToken": {
          "$ref": "#/definitions/UniswapV3Token"
        }
      },
      "required": [
        "tokens",
        "usdcToken"
      ],
      "type": "object"
    },
    "QueryUniswapV3PoolsByAddressesResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Pool"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QueryUniswapV3PoolsByTokenResult": {
      "properties": {
        "token0Pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Pool"
          },
          "type": "array"
        },
        "token1Pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Pool"
          },
          "type": "array"
        }
      },
      "required": [
        "token0Pools",
        "token1Pools"
      ],
      "type": "object"
    },
    "QueryUniswapV3PoolsResult": {
      "properties": {
        "pools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Pool"
          },
          "type": "array"
        }
      },
      "required": [
        "pools"
      ],
      "type": "object"
    },
    "QueryVaultAssetResult": {
      "properties": {
        "factories": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/Factories"
          },
          "type": "array"
        }
      },
      "required": [
        "factories"
      ],
      "type": "object"
    },
    "RecentTrade": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "blockNumber": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual"
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "trader": {
          "$ref": "#/definitions/User_1"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "blockNumber",
        "perpetual",
        "price",
        "timestamp",
        "trader",
        "transactionHash"
      ],
      "type": "object"
    },
    "ReturnCode": {
      "enum": [
        "0x0",
        "0x1",
        "0x2",
        "0x255",
        "0x3",
        "0x4",
        "0x5",
        "0x6"
      ],
      "type": "string"
    },
    "ShareTokenStruct": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "totalSupply": {
          "$ref": "#/definitions/BignumberString_1",
          "default": "0"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ShareTokenStruct_1": {
      "$ref": "#/definitions/ShareTokenStruct"
    },
    "SushiSwapMiniChef": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "sushiPerSecond": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalAllocPoint": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "sushiPerSecond",
        "totalAllocPoint"
      ],
      "type": "object"
    },
    "SushiSwapPair": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "reserveUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalSupply": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "reserveUSD",
        "totalSupply"
      ],
      "type": "object"
    },
    "SushiSwapPool": {
      "properties": {
        "allocPoint": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "pair": {
          "default": "",
          "type": "string"
        },
        "rewarder": {
          "$ref": "#/definitions/SushiSwapRewarder"
        },
        "slpBalance": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "allocPoint",
        "id",
        "pair",
        "rewarder",
        "slpBalance"
      ],
      "type": "object"
    },
    "SushiSwapRewarder": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "rewardPerSecond": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "rewardToken": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id",
        "rewardPerSecond",
        "rewardToken"
      ],
      "type": "object"
    },
    "TotalTradingMiningInfo": {
      "properties": {
        "totalFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalOI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalScore": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalStakeScore": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalTrader": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "totalFee",
        "totalOI",
        "totalScore",
        "totalStakeScore",
        "totalTrader"
      ],
      "type": "object"
    },
    "Trade": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "fee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "isClose": {
          "default": false,
          "type": "boolean"
        },
        "logIndex": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "perpetual": {
          "$ref": "#/definitions/Perpetual"
        },
        "pnl": {
          "anyOf": [
            {
              "$ref": "#/definitions/default"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": null
        },
        "price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "trader": {
          "$ref": "#/definitions/Trader"
        },
        "transactionHash": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": 0,
          "type": "number"
        }
      },
      "required": [
        "amount",
        "blockNumber",
        "fee",
        "id",
        "isClose",
        "logIndex",
        "perpetual",
        "pnl",
        "price",
        "timestamp",
        "trader",
        "transactionHash",
        "type"
      ],
      "type": "object"
    },
    "TradePrice": {
      "properties": {
        "close": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "high": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "low": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "open": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "volume": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "close",
        "high",
        "low",
        "open",
        "timestamp",
        "volume"
      ],
      "type": "object"
    },
    "Trader": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "TransactionMiningInfo": {
      "properties": {
        "budget": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "minedBudget": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "pools": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rebateRate": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "budget",
        "id",
        "minedBudget",
        "pools",
        "rebateRate"
      ],
      "type": "object"
    },
    "TransactionMiningTrade": {
      "properties": {
        "earnSATORI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/PoolStruct"
        },
        "totalFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalFeeUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "tradeVolume": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "tradeVolumeUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "earnSATORI",
        "id",
        "pool",
        "totalFee",
        "totalFeeUSD",
        "tradeVolume",
        "tradeVolumeUSD"
      ],
      "type": "object"
    },
    "TransactionMiningUserInfo": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "paidSATORI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalEarnSATORI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalFee": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "unPaidSATORI": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "paidSATORI",
        "totalEarnSATORI",
        "totalFee",
        "unPaidSATORI"
      ],
      "type": "object"
    },
    "TxToL1": {
      "properties": {
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "seqNum": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "txHash": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "blockNumber",
        "data",
        "from",
        "id",
        "seqNum",
        "timestamp",
        "to",
        "txHash"
      ],
      "type": "object"
    },
    "TxToL2": {
      "properties": {
        "blockNumber": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "data": {
          "default": "",
          "type": "string"
        },
        "from": {
          "default": "",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "seqNum": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "to": {
          "default": "",
          "type": "string"
        },
        "txHash": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "blockNumber",
        "data",
        "from",
        "id",
        "seqNum",
        "timestamp",
        "to",
        "txHash"
      ],
      "type": "object"
    },
    "UniswapPair": {
      "properties": {
        "reserve0": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "reserve1": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "reserveUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "reserve0",
        "reserve1",
        "reserveUSD"
      ],
      "type": "object"
    },
    "UniswapV3Pool": {
      "properties": {
        "feeTier": {
          "$ref": "#/definitions/IntString_1",
          "default": 500
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidity": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "sqrtPrice": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "tick": {
          "default": null,
          "type": [
            "null",
            "string",
            "number"
          ]
        },
        "ticks": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Tick"
          },
          "type": "array"
        },
        "token0": {
          "$ref": "#/definitions/UniswapV3Token"
        },
        "token0Price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "token1": {
          "$ref": "#/definitions/UniswapV3Token"
        },
        "token1Price": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "totalValueLockedUSD": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "feeTier",
        "id",
        "liquidity",
        "sqrtPrice",
        "tick",
        "ticks",
        "token0",
        "token0Price",
        "token1",
        "token1Price",
        "totalValueLockedUSD"
      ],
      "type": "object"
    },
    "UniswapV3Tick": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidityGross": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "liquidityNet": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        },
        "tickIdx": {
          "$ref": "#/definitions/IntString_1",
          "default": 0
        }
      },
      "required": [
        "id",
        "liquidityGross",
        "liquidityNet",
        "tickIdx"
      ],
      "type": "object"
    },
    "UniswapV3Token": {
      "properties": {
        "decimals": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "id": {
          "default": "",
          "type": "string"
        },
        "name": {
          "default": "",
          "type": "string"
        },
        "symbol": {
          "default": "",
          "type": "string"
        },
        "whitelistPools": {
          "default": [
          ],
          "items": {
            "$ref": "#/definitions/UniswapV3Pool"
          },
          "type": "array"
        }
      },
      "required": [
        "decimals",
        "id",
        "name",
        "symbol"
      ],
      "type": "object"
    },
    "User": {
      "$ref": "#/definitions/User_1"
    },
    "User_1": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Volume": {
      "properties": {
        "perpetual": {
          "$ref": "#/definitions/Perpetual_1"
        },
        "timestamp": {
          "$ref": "#/definitions/IntString_1",
          "default": "0"
        },
        "volume": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "timestamp",
        "volume"
      ],
      "type": "object"
    },
    "Vote": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "support": {
          "default": false,
          "type": "boolean"
        },
        "voter": {
          "$ref": "#/definitions/User_1"
        },
        "votes": {
          "$ref": "#/definitions/BignumberString",
          "default": "0"
        }
      },
      "required": [
        "id",
        "support",
        "voter",
        "votes"
      ],
      "type": "object"
    },
    "WS_ORDER_TYPE": {
      "enum": [
        1,
        2
      ],
      "type": "number"
    },
    "default": {
      "properties": {
        "c": {
          "anyOf": [
            {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "The coefficient of the value of this BigNumber, an array of base 1e14 integer numbers, or null."
        },
        "e": {
          "description": "The exponent of the value of this BigNumber, an integer number, -1000000000 to 1000000000, or null.",
          "type": [
            "null",
            "number"
          ]
        },
        "s": {
          "description": "The sign of the value of this BigNumber, -1, 1, or null.",
          "type": [
            "null",
            "number"
          ]
        }
      },
      "required": [
        "c",
        "e",
        "s"
      ],
      "type": "object"
    },
    "liquidityPoolsInfo": {
      "properties": {
        "id": {
          "default": "",
          "type": "string"
        },
        "liquidityPools": {
          "default": [
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "liquidityPools"
      ],
      "type": "object"
    },
    "moment.Moment": {
      "properties": {
        "constructor": {
          "$ref": "#/definitions/Function",
          "description": "The initial value of Object.prototype.constructor is the standard built-in Object constructor."
        }
      },
      "required": [
        "constructor"
      ],
      "type": "object"
    }
  }
};
ajv.addSchema(Schema, 'Schema')
const validatorPerpetual: any = ajv.getSchema(`Schema#/definitions/Perpetual`);
const validatorQueryPerpetualsResult: any = ajv.getSchema(`Schema#/definitions/QueryPerpetualsResult`);
const validatorQueryPerpetualBySymbolResult: any = ajv.getSchema(`Schema#/definitions/QueryPerpetualBySymbolResult`);
const validatorQueryPerpetualByPoolResult: any = ajv.getSchema(`Schema#/definitions/QueryPerpetualByPoolResult`);
const validatorQueryPerpVolumeHistoryResult: any = ajv.getSchema(`Schema#/definitions/QueryPerpVolumeHistoryResult`);
const validatorQuerySpecifyPerpetualResult: any = ajv.getSchema(`Schema#/definitions/QuerySpecifyPerpetualResult`);
const validatorUser: any = ajv.getSchema(`Schema#/definitions/User`);
const validatorRecentTrade: any = ajv.getSchema(`Schema#/definitions/RecentTrade`);
const validatorQueryRecentTradesResult: any = ajv.getSchema(`Schema#/definitions/QueryRecentTradesResult`);
const validatorTradePrice: any = ajv.getSchema(`Schema#/definitions/TradePrice`);
const validatorOraclePrice: any = ajv.getSchema(`Schema#/definitions/OraclePrice`);
const validatorBackendOraclePriceStruct: any = ajv.getSchema(`Schema#/definitions/BackendOraclePriceStruct`);
const validatorQueryCandleResult: any = ajv.getSchema(`Schema#/definitions/QueryCandleResult`);
const validatorQuery24HoursPriceChangeResult: any = ajv.getSchema(`Schema#/definitions/Query24HoursPriceChangeResult`);
const validatorQuery24HoursPriceChangeFromBackendResult: any = ajv.getSchema(`Schema#/definitions/Query24HoursPriceChangeFromBackendResult`);
const validatorQueryCandleFromBackendResult: any = ajv.getSchema(`Schema#/definitions/QueryCandleFromBackendResult`);
const validatorHistoryTrade: any = ajv.getSchema(`Schema#/definitions/HistoryTrade`);
const validatorQueryHistoryTrades: any = ajv.getSchema(`Schema#/definitions/QueryHistoryTrades`);
const validatorJWT: any = ajv.getSchema(`Schema#/definitions/JWT`);
const validatorOrderStruct: any = ajv.getSchema(`Schema#/definitions/OrderStruct`);
const validatorOrderCancelReason: any = ajv.getSchema(`Schema#/definitions/OrderCancelReason`);
const validatorPlaceOrderResult: any = ajv.getSchema(`Schema#/definitions/PlaceOrderResult`);
const validatorCancelOrderResult: any = ajv.getSchema(`Schema#/definitions/CancelOrderResult`);
const validatorCancelAllOrdersResult: any = ajv.getSchema(`Schema#/definitions/CancelAllOrdersResult`);
const validatorGetMyOrderResult: any = ajv.getSchema(`Schema#/definitions/GetMyOrderResult`);
const validatorGetMyOrdersResult: any = ajv.getSchema(`Schema#/definitions/GetMyOrdersResult`);
const validatorGetMyOrdersByPerpResult: any = ajv.getSchema(`Schema#/definitions/GetMyOrdersByPerpResult`);
const validatorGetSignOrderInfoResult: any = ajv.getSchema(`Schema#/definitions/GetSignOrderInfoResult`);
const validatorConfirmedOrder: any = ajv.getSchema(`Schema#/definitions/ConfirmedOrder`);
const validatorQueryConfirmedOrdersResult: any = ajv.getSchema(`Schema#/definitions/QueryConfirmedOrdersResult`);
const validatorTrader: any = ajv.getSchema(`Schema#/definitions/Trader`);
const validatorQueryTradesResult: any = ajv.getSchema(`Schema#/definitions/QueryTradesResult`);
const validatorMarginAccount: any = ajv.getSchema(`Schema#/definitions/MarginAccount`);
const validatorQueryMarginAccountResult: any = ajv.getSchema(`Schema#/definitions/QueryMarginAccountResult`);
const validatorAcc: any = ajv.getSchema(`Schema#/definitions/Acc`);
const validatorVolume: any = ajv.getSchema(`Schema#/definitions/Volume`);
const validatorQueryPriceStatusResult: any = ajv.getSchema(`Schema#/definitions/QueryPriceStatusResult`);
const validatorLiquidityPoolStruct: any = ajv.getSchema(`Schema#/definitions/LiquidityPoolStruct`);
const validatorQueryLiquidityPoolsResult: any = ajv.getSchema(`Schema#/definitions/QueryLiquidityPoolsResult`);
const validatorQuerySpecifiedPoolsResult: any = ajv.getSchema(`Schema#/definitions/QuerySpecifiedPoolsResult`);
const validatorQueryPoolsFromGovernorResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolsFromGovernorResult`);
const validatorShareTokenStruct: any = ajv.getSchema(`Schema#/definitions/ShareTokenStruct`);
const validatorPoolStruct: any = ajv.getSchema(`Schema#/definitions/PoolStruct`);
const validatorPoolLiquidityData: any = ajv.getSchema(`Schema#/definitions/PoolLiquidityData`);
const validatorPoolLiquidityHistory: any = ajv.getSchema(`Schema#/definitions/PoolLiquidityHistory`);
const validatorGovernor: any = ajv.getSchema(`Schema#/definitions/Governor`);
const validatorPoolProposal: any = ajv.getSchema(`Schema#/definitions/PoolProposal`);
const validatorVote: any = ajv.getSchema(`Schema#/definitions/Vote`);
const validatorQueryAllPoolsResult: any = ajv.getSchema(`Schema#/definitions/QueryAllPoolsResult`);
const validatorQueryPoolBaseInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolBaseInfoResult`);
const validatorQueryPoolsLiquidityHistoryResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolsLiquidityHistoryResult`);
const validatorQueryPoolsVolumesHistoryResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolsVolumesHistoryResult`);
const validatorQueryPoolVolumeHistoryResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolVolumeHistoryResult`);
const validatorQueryPoolLatestNAVResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolLatestNAVResult`);
const validatorQueryPoolPerpetualListDetailsResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolPerpetualListDetailsResult`);
const validatorQueryPoolLiquidityHistoryListResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolLiquidityHistoryListResult`);
const validatorQueryPoolProposalListResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolProposalListResult`);
const validatorQueryPoolHistoryDataResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolHistoryDataResult`);
const validatorQueryPoolProposalDetailsResult: any = ajv.getSchema(`Schema#/definitions/QueryPoolProposalDetailsResult`);
const validatorLiquidate: any = ajv.getSchema(`Schema#/definitions/Liquidate`);
const validatorQueryLiquidatesResult: any = ajv.getSchema(`Schema#/definitions/QueryLiquidatesResult`);
const validatorL2TransactionLog: any = ajv.getSchema(`Schema#/definitions/L2TransactionLog`);
const validatorL2TransactionReceipt: any = ajv.getSchema(`Schema#/definitions/L2TransactionReceipt`);
const validatorTxToL1: any = ajv.getSchema(`Schema#/definitions/TxToL1`);
const validatorTxToL2: any = ajv.getSchema(`Schema#/definitions/TxToL2`);
const validatorMessageDelivered: any = ajv.getSchema(`Schema#/definitions/MessageDelivered`);
const validatorL2ToL1Transaction: any = ajv.getSchema(`Schema#/definitions/L2ToL1Transaction`);
const validatorOutboundTransferInitiated: any = ajv.getSchema(`Schema#/definitions/OutboundTransferInitiated`);
const validatorInboundTransferFinalized: any = ajv.getSchema(`Schema#/definitions/InboundTransferFinalized`);
const validatorQueryMessageDeliveredResult: any = ajv.getSchema(`Schema#/definitions/QueryMessageDeliveredResult`);
const validatorQueryTxToL1sResult: any = ajv.getSchema(`Schema#/definitions/QueryTxToL1sResult`);
const validatorQueryTxToL2sResult: any = ajv.getSchema(`Schema#/definitions/QueryTxToL2sResult`);
const validatorQueryOutboundTransferInitiatedResult: any = ajv.getSchema(`Schema#/definitions/QueryOutboundTransferInitiatedResult`);
const validatorQueryInboundTransferFinalizedResult: any = ajv.getSchema(`Schema#/definitions/QueryInboundTransferFinalizedResult`);
const validatorQueryL2ToL1TransactionsResult: any = ajv.getSchema(`Schema#/definitions/QueryL2ToL1TransactionsResult`);
const validatorUniswapPair: any = ajv.getSchema(`Schema#/definitions/UniswapPair`);
const validatorUniswapV3Token: any = ajv.getSchema(`Schema#/definitions/UniswapV3Token`);
const validatorUniswapV3Tick: any = ajv.getSchema(`Schema#/definitions/UniswapV3Tick`);
const validatorUniswapV3Pool: any = ajv.getSchema(`Schema#/definitions/UniswapV3Pool`);
const validatorQueryUniV3PriceResult: any = ajv.getSchema(`Schema#/definitions/QueryUniV3PriceResult`);
const validatorQueryTokenPriceResult: any = ajv.getSchema(`Schema#/definitions/QueryTokenPriceResult`);
const validatorQueryUniswapV3PoolsResult: any = ajv.getSchema(`Schema#/definitions/QueryUniswapV3PoolsResult`);
const validatorQueryUniswapV3PoolsByAddressesResult: any = ajv.getSchema(`Schema#/definitions/QueryUniswapV3PoolsByAddressesResult`);
const validatorQueryUniswapV3PoolsByTokenResult: any = ajv.getSchema(`Schema#/definitions/QueryUniswapV3PoolsByTokenResult`);
const validatorMcdexData: any = ajv.getSchema(`Schema#/definitions/McdexData`);
const validatorQueryMcdexDataResult: any = ajv.getSchema(`Schema#/definitions/QueryMcdexDataResult`);
const validatorCapturedFeeInfo: any = ajv.getSchema(`Schema#/definitions/CapturedFeeInfo`);
const validatorliquidityPoolsInfo: any = ajv.getSchema(`Schema#/definitions/liquidityPoolsInfo`);
const validatorQueryCapturedFeeUSDResult: any = ajv.getSchema(`Schema#/definitions/QueryCapturedFeeUSDResult`);
const validatorQueryDaoPoolAddressResult: any = ajv.getSchema(`Schema#/definitions/QueryDaoPoolAddressResult`);
const validatorDaoGovernor: any = ajv.getSchema(`Schema#/definitions/DaoGovernor`);
const validatorDaoGovernorProposal: any = ajv.getSchema(`Schema#/definitions/DaoGovernorProposal`);
const validatorDaoGovernorVote: any = ajv.getSchema(`Schema#/definitions/DaoGovernorVote`);
const validatorDaoGovernorUser: any = ajv.getSchema(`Schema#/definitions/DaoGovernorUser`);
const validatorDaoGovernorDelegate: any = ajv.getSchema(`Schema#/definitions/DaoGovernorDelegate`);
const validatorQueryDaoProposalListResult: any = ajv.getSchema(`Schema#/definitions/QueryDaoProposalListResult`);
const validatorQueryDaoProposalResultByIndexResult: any = ajv.getSchema(`Schema#/definitions/QueryDaoProposalResultByIndexResult`);
const validatorQueryDaoVoteDelegateInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryDaoVoteDelegateInfoResult`);
const validatorChainBlock: any = ajv.getSchema(`Schema#/definitions/ChainBlock`);
const validatorQueryChainBlockResult: any = ajv.getSchema(`Schema#/definitions/QueryChainBlockResult`);
const validatorQueryTimeStampByBlockNumber: any = ajv.getSchema(`Schema#/definitions/QueryTimeStampByBlockNumber`);
const validatorQueryLatestBlockNumber: any = ajv.getSchema(`Schema#/definitions/QueryLatestBlockNumber`);
const validatorTransactionMiningInfo: any = ajv.getSchema(`Schema#/definitions/TransactionMiningInfo`);
const validatorTransactionMiningTrade: any = ajv.getSchema(`Schema#/definitions/TransactionMiningTrade`);
const validatorTransactionMiningUserInfo: any = ajv.getSchema(`Schema#/definitions/TransactionMiningUserInfo`);
const validatorQueryTransactionMiningInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryTransactionMiningInfoResult`);
const validatorQueryTransactionMiningTradeResult: any = ajv.getSchema(`Schema#/definitions/QueryTransactionMiningTradeResult`);
const validatorQueryTransactionMiningUserResult: any = ajv.getSchema(`Schema#/definitions/QueryTransactionMiningUserResult`);
const validatorFactories: any = ajv.getSchema(`Schema#/definitions/Factories`);
const validatorQueryVaultAssetResult: any = ajv.getSchema(`Schema#/definitions/QueryVaultAssetResult`);
const validatorFundingRate: any = ajv.getSchema(`Schema#/definitions/FundingRate`);
const validatorQueryPerpFundingRateResult: any = ajv.getSchema(`Schema#/definitions/QueryPerpFundingRateResult`);
const validatorBalancerPool: any = ajv.getSchema(`Schema#/definitions/BalancerPool`);
const validatorBalancerPoolToken: any = ajv.getSchema(`Schema#/definitions/BalancerPoolToken`);
const validatorQueryBalancerMiningPoolInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryBalancerMiningPoolInfoResult`);
const validatorSushiSwapPair: any = ajv.getSchema(`Schema#/definitions/SushiSwapPair`);
const validatorSushiSwapMiniChef: any = ajv.getSchema(`Schema#/definitions/SushiSwapMiniChef`);
const validatorSushiSwapPool: any = ajv.getSchema(`Schema#/definitions/SushiSwapPool`);
const validatorSushiSwapRewarder: any = ajv.getSchema(`Schema#/definitions/SushiSwapRewarder`);
const validatorQuerySushiPairResult: any = ajv.getSchema(`Schema#/definitions/QuerySushiPairResult`);
const validatorQuerySushiMiningPoolInfoResult: any = ajv.getSchema(`Schema#/definitions/QuerySushiMiningPoolInfoResult`);
const validatorAccountTradingMiningInfo: any = ajv.getSchema(`Schema#/definitions/AccountTradingMiningInfo`);
const validatorAccountTradingMiningMultiChainInfo: any = ajv.getSchema(`Schema#/definitions/AccountTradingMiningMultiChainInfo`);
const validatorTotalTradingMiningInfo: any = ajv.getSchema(`Schema#/definitions/TotalTradingMiningInfo`);
const validatorQueryAccountTradingMiningInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryAccountTradingMiningInfoResult`);
const validatorQueryAccountTradingMiningMultiChainInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryAccountTradingMiningMultiChainInfoResult`);
const validatorQueryTotalTradingMiningInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryTotalTradingMiningInfoResult`);
const validatorAccountGasFeeInfo: any = ajv.getSchema(`Schema#/definitions/AccountGasFeeInfo`);
const validatorQueryAccountGasFeeInfoResult: any = ajv.getSchema(`Schema#/definitions/QueryAccountGasFeeInfoResult`);
const validatorLiquidityAccount: any = ajv.getSchema(`Schema#/definitions/LiquidityAccount`);
const validatorQueryAccountLiquidityPoolResult: any = ajv.getSchema(`Schema#/definitions/QueryAccountLiquidityPoolResult`);
const validatorQueryLiquidityAccountResult: any = ajv.getSchema(`Schema#/definitions/QueryLiquidityAccountResult`);
export function parsePerpetual(value: unknown): Perpetual {
  if (!validatorPerpetual) {
    throw new Error(`No validator defined for Schema#/definitions/Perpetual`)
  }

  const valid = validatorPerpetual(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Perpetual' + ': ' + ajv.errorsText(validatorPerpetual.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Perpetual'}),
    );
  }

  return Perpetual.fromData(value).convert();
}
export function parseQueryPerpetualsResult(value: unknown): QueryPerpetualsResult {
  if (!validatorQueryPerpetualsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPerpetualsResult`)
  }

  const valid = validatorQueryPerpetualsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPerpetualsResult' + ': ' + ajv.errorsText(validatorQueryPerpetualsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPerpetualsResult'}),
    );
  }

  return QueryPerpetualsResult.fromData(value).convert();
}
export function parseQueryPerpetualBySymbolResult(value: unknown): QueryPerpetualBySymbolResult {
  if (!validatorQueryPerpetualBySymbolResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPerpetualBySymbolResult`)
  }

  const valid = validatorQueryPerpetualBySymbolResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPerpetualBySymbolResult' + ': ' + ajv.errorsText(validatorQueryPerpetualBySymbolResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPerpetualBySymbolResult'}),
    );
  }

  return QueryPerpetualBySymbolResult.fromData(value).convert();
}
export function parseQueryPerpetualByPoolResult(value: unknown): QueryPerpetualByPoolResult {
  if (!validatorQueryPerpetualByPoolResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPerpetualByPoolResult`)
  }

  const valid = validatorQueryPerpetualByPoolResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPerpetualByPoolResult' + ': ' + ajv.errorsText(validatorQueryPerpetualByPoolResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPerpetualByPoolResult'}),
    );
  }

  return QueryPerpetualByPoolResult.fromData(value).convert();
}
export function parseQueryPerpVolumeHistoryResult(value: unknown): QueryPerpVolumeHistoryResult {
  if (!validatorQueryPerpVolumeHistoryResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPerpVolumeHistoryResult`)
  }

  const valid = validatorQueryPerpVolumeHistoryResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPerpVolumeHistoryResult' + ': ' + ajv.errorsText(validatorQueryPerpVolumeHistoryResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPerpVolumeHistoryResult'}),
    );
  }

  return QueryPerpVolumeHistoryResult.fromData(value).convert();
}
export function parseQuerySpecifyPerpetualResult(value: unknown): QuerySpecifyPerpetualResult {
  if (!validatorQuerySpecifyPerpetualResult) {
    throw new Error(`No validator defined for Schema#/definitions/QuerySpecifyPerpetualResult`)
  }

  const valid = validatorQuerySpecifyPerpetualResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QuerySpecifyPerpetualResult' + ': ' + ajv.errorsText(validatorQuerySpecifyPerpetualResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QuerySpecifyPerpetualResult'}),
    );
  }

  return QuerySpecifyPerpetualResult.fromData(value).convert();
}
export function parseUser(value: unknown): User {
  if (!validatorUser) {
    throw new Error(`No validator defined for Schema#/definitions/User`)
  }

  const valid = validatorUser(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'User' + ': ' + ajv.errorsText(validatorUser.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'User'}),
    );
  }

  return User.fromData(value).convert();
}
export function parseRecentTrade(value: unknown): RecentTrade {
  if (!validatorRecentTrade) {
    throw new Error(`No validator defined for Schema#/definitions/RecentTrade`)
  }

  const valid = validatorRecentTrade(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'RecentTrade' + ': ' + ajv.errorsText(validatorRecentTrade.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'RecentTrade'}),
    );
  }

  return RecentTrade.fromData(value).convert();
}
export function parseQueryRecentTradesResult(value: unknown): QueryRecentTradesResult {
  if (!validatorQueryRecentTradesResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryRecentTradesResult`)
  }

  const valid = validatorQueryRecentTradesResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryRecentTradesResult' + ': ' + ajv.errorsText(validatorQueryRecentTradesResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryRecentTradesResult'}),
    );
  }

  return QueryRecentTradesResult.fromData(value).convert();
}
export function parseTradePrice(value: unknown): TradePrice {
  if (!validatorTradePrice) {
    throw new Error(`No validator defined for Schema#/definitions/TradePrice`)
  }

  const valid = validatorTradePrice(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TradePrice' + ': ' + ajv.errorsText(validatorTradePrice.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TradePrice'}),
    );
  }

  return TradePrice.fromData(value).convert();
}
export function parseOraclePrice(value: unknown): OraclePrice {
  if (!validatorOraclePrice) {
    throw new Error(`No validator defined for Schema#/definitions/OraclePrice`)
  }

  const valid = validatorOraclePrice(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'OraclePrice' + ': ' + ajv.errorsText(validatorOraclePrice.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'OraclePrice'}),
    );
  }

  return OraclePrice.fromData(value).convert();
}
export function parseBackendOraclePriceStruct(value: unknown): BackendOraclePriceStruct {
  if (!validatorBackendOraclePriceStruct) {
    throw new Error(`No validator defined for Schema#/definitions/BackendOraclePriceStruct`)
  }

  const valid = validatorBackendOraclePriceStruct(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'BackendOraclePriceStruct' + ': ' + ajv.errorsText(validatorBackendOraclePriceStruct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'BackendOraclePriceStruct'}),
    );
  }

  return BackendOraclePriceStruct.fromData(value).convert();
}
export function parseQueryCandleResult(value: unknown): QueryCandleResult {
  if (!validatorQueryCandleResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryCandleResult`)
  }

  const valid = validatorQueryCandleResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryCandleResult' + ': ' + ajv.errorsText(validatorQueryCandleResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryCandleResult'}),
    );
  }

  return QueryCandleResult.fromData(value).convert();
}
export function parseQuery24HoursPriceChangeResult(value: unknown): Query24HoursPriceChangeResult {
  if (!validatorQuery24HoursPriceChangeResult) {
    throw new Error(`No validator defined for Schema#/definitions/Query24HoursPriceChangeResult`)
  }

  const valid = validatorQuery24HoursPriceChangeResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Query24HoursPriceChangeResult' + ': ' + ajv.errorsText(validatorQuery24HoursPriceChangeResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Query24HoursPriceChangeResult'}),
    );
  }

  return Query24HoursPriceChangeResult.fromData(value).convert();
}
export function parseQuery24HoursPriceChangeFromBackendResult(value: unknown): Query24HoursPriceChangeFromBackendResult {
  if (!validatorQuery24HoursPriceChangeFromBackendResult) {
    throw new Error(`No validator defined for Schema#/definitions/Query24HoursPriceChangeFromBackendResult`)
  }

  const valid = validatorQuery24HoursPriceChangeFromBackendResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Query24HoursPriceChangeFromBackendResult' + ': ' + ajv.errorsText(validatorQuery24HoursPriceChangeFromBackendResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Query24HoursPriceChangeFromBackendResult'}),
    );
  }

  return Query24HoursPriceChangeFromBackendResult.fromData(value).convert();
}
export function parseQueryCandleFromBackendResult(value: unknown): QueryCandleFromBackendResult {
  if (!validatorQueryCandleFromBackendResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryCandleFromBackendResult`)
  }

  const valid = validatorQueryCandleFromBackendResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryCandleFromBackendResult' + ': ' + ajv.errorsText(validatorQueryCandleFromBackendResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryCandleFromBackendResult'}),
    );
  }

  return QueryCandleFromBackendResult.fromData(value).convert();
}
export function parseHistoryTrade(value: unknown): HistoryTrade {
  if (!validatorHistoryTrade) {
    throw new Error(`No validator defined for Schema#/definitions/HistoryTrade`)
  }

  const valid = validatorHistoryTrade(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'HistoryTrade' + ': ' + ajv.errorsText(validatorHistoryTrade.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'HistoryTrade'}),
    );
  }

  return HistoryTrade.fromData(value).convert();
}
export function parseQueryHistoryTrades(value: unknown): QueryHistoryTrades {
  if (!validatorQueryHistoryTrades) {
    throw new Error(`No validator defined for Schema#/definitions/QueryHistoryTrades`)
  }

  const valid = validatorQueryHistoryTrades(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryHistoryTrades' + ': ' + ajv.errorsText(validatorQueryHistoryTrades.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryHistoryTrades'}),
    );
  }

  return QueryHistoryTrades.fromData(value).convert();
}
export function parseJWT(value: unknown): JWT {
  if (!validatorJWT) {
    throw new Error(`No validator defined for Schema#/definitions/JWT`)
  }

  const valid = validatorJWT(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'JWT' + ': ' + ajv.errorsText(validatorJWT.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'JWT'}),
    );
  }

  return JWT.fromData(value).convert();
}
export function parseOrderStruct(value: unknown): OrderStruct {
  if (!validatorOrderStruct) {
    throw new Error(`No validator defined for Schema#/definitions/OrderStruct`)
  }

  const valid = validatorOrderStruct(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'OrderStruct' + ': ' + ajv.errorsText(validatorOrderStruct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'OrderStruct'}),
    );
  }

  return OrderStruct.fromData(value).convert();
}
export function parseOrderCancelReason(value: unknown): OrderCancelReason {
  if (!validatorOrderCancelReason) {
    throw new Error(`No validator defined for Schema#/definitions/OrderCancelReason`)
  }

  const valid = validatorOrderCancelReason(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'OrderCancelReason' + ': ' + ajv.errorsText(validatorOrderCancelReason.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'OrderCancelReason'}),
    );
  }

  return OrderCancelReason.fromData(value).convert();
}
export function parsePlaceOrderResult(value: unknown): PlaceOrderResult {
  if (!validatorPlaceOrderResult) {
    throw new Error(`No validator defined for Schema#/definitions/PlaceOrderResult`)
  }

  const valid = validatorPlaceOrderResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'PlaceOrderResult' + ': ' + ajv.errorsText(validatorPlaceOrderResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'PlaceOrderResult'}),
    );
  }

  return PlaceOrderResult.fromData(value).convert();
}
export function parseCancelOrderResult(value: unknown): CancelOrderResult {
  if (!validatorCancelOrderResult) {
    throw new Error(`No validator defined for Schema#/definitions/CancelOrderResult`)
  }

  const valid = validatorCancelOrderResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'CancelOrderResult' + ': ' + ajv.errorsText(validatorCancelOrderResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'CancelOrderResult'}),
    );
  }

  return CancelOrderResult.fromData(value).convert();
}
export function parseCancelAllOrdersResult(value: unknown): CancelAllOrdersResult {
  if (!validatorCancelAllOrdersResult) {
    throw new Error(`No validator defined for Schema#/definitions/CancelAllOrdersResult`)
  }

  const valid = validatorCancelAllOrdersResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'CancelAllOrdersResult' + ': ' + ajv.errorsText(validatorCancelAllOrdersResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'CancelAllOrdersResult'}),
    );
  }

  return CancelAllOrdersResult.fromData(value).convert();
}
export function parseGetMyOrderResult(value: unknown): GetMyOrderResult {
  if (!validatorGetMyOrderResult) {
    throw new Error(`No validator defined for Schema#/definitions/GetMyOrderResult`)
  }

  const valid = validatorGetMyOrderResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'GetMyOrderResult' + ': ' + ajv.errorsText(validatorGetMyOrderResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'GetMyOrderResult'}),
    );
  }

  return GetMyOrderResult.fromData(value).convert();
}
export function parseGetMyOrdersResult(value: unknown): GetMyOrdersResult {
  if (!validatorGetMyOrdersResult) {
    throw new Error(`No validator defined for Schema#/definitions/GetMyOrdersResult`)
  }

  const valid = validatorGetMyOrdersResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'GetMyOrdersResult' + ': ' + ajv.errorsText(validatorGetMyOrdersResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'GetMyOrdersResult'}),
    );
  }

  return GetMyOrdersResult.fromData(value).convert();
}
export function parseGetMyOrdersByPerpResult(value: unknown): GetMyOrdersByPerpResult {
  if (!validatorGetMyOrdersByPerpResult) {
    throw new Error(`No validator defined for Schema#/definitions/GetMyOrdersByPerpResult`)
  }

  const valid = validatorGetMyOrdersByPerpResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'GetMyOrdersByPerpResult' + ': ' + ajv.errorsText(validatorGetMyOrdersByPerpResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'GetMyOrdersByPerpResult'}),
    );
  }

  return GetMyOrdersByPerpResult.fromData(value).convert();
}
export function parseGetSignOrderInfoResult(value: unknown): GetSignOrderInfoResult {
  if (!validatorGetSignOrderInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/GetSignOrderInfoResult`)
  }

  const valid = validatorGetSignOrderInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'GetSignOrderInfoResult' + ': ' + ajv.errorsText(validatorGetSignOrderInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'GetSignOrderInfoResult'}),
    );
  }

  return GetSignOrderInfoResult.fromData(value).convert();
}
export function parseConfirmedOrder(value: unknown): ConfirmedOrder {
  if (!validatorConfirmedOrder) {
    throw new Error(`No validator defined for Schema#/definitions/ConfirmedOrder`)
  }

  const valid = validatorConfirmedOrder(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'ConfirmedOrder' + ': ' + ajv.errorsText(validatorConfirmedOrder.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'ConfirmedOrder'}),
    );
  }

  return ConfirmedOrder.fromData(value).convert();
}
export function parseQueryConfirmedOrdersResult(value: unknown): QueryConfirmedOrdersResult {
  if (!validatorQueryConfirmedOrdersResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryConfirmedOrdersResult`)
  }

  const valid = validatorQueryConfirmedOrdersResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryConfirmedOrdersResult' + ': ' + ajv.errorsText(validatorQueryConfirmedOrdersResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryConfirmedOrdersResult'}),
    );
  }

  return QueryConfirmedOrdersResult.fromData(value).convert();
}
export function parseTrader(value: unknown): Trader {
  if (!validatorTrader) {
    throw new Error(`No validator defined for Schema#/definitions/Trader`)
  }

  const valid = validatorTrader(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Trader' + ': ' + ajv.errorsText(validatorTrader.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Trader'}),
    );
  }

  return Trader.fromData(value).convert();
}
export function parseQueryTradesResult(value: unknown): QueryTradesResult {
  if (!validatorQueryTradesResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTradesResult`)
  }

  const valid = validatorQueryTradesResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTradesResult' + ': ' + ajv.errorsText(validatorQueryTradesResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTradesResult'}),
    );
  }

  return QueryTradesResult.fromData(value).convert();
}
export function parseMarginAccount(value: unknown): MarginAccount {
  if (!validatorMarginAccount) {
    throw new Error(`No validator defined for Schema#/definitions/MarginAccount`)
  }

  const valid = validatorMarginAccount(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'MarginAccount' + ': ' + ajv.errorsText(validatorMarginAccount.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'MarginAccount'}),
    );
  }

  return MarginAccount.fromData(value).convert();
}
export function parseQueryMarginAccountResult(value: unknown): QueryMarginAccountResult {
  if (!validatorQueryMarginAccountResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryMarginAccountResult`)
  }

  const valid = validatorQueryMarginAccountResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryMarginAccountResult' + ': ' + ajv.errorsText(validatorQueryMarginAccountResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryMarginAccountResult'}),
    );
  }

  return QueryMarginAccountResult.fromData(value).convert();
}
export function parseAcc(value: unknown): Acc {
  if (!validatorAcc) {
    throw new Error(`No validator defined for Schema#/definitions/Acc`)
  }

  const valid = validatorAcc(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Acc' + ': ' + ajv.errorsText(validatorAcc.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Acc'}),
    );
  }

  return Acc.fromData(value).convert();
}
export function parseVolume(value: unknown): Volume {
  if (!validatorVolume) {
    throw new Error(`No validator defined for Schema#/definitions/Volume`)
  }

  const valid = validatorVolume(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Volume' + ': ' + ajv.errorsText(validatorVolume.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Volume'}),
    );
  }

  return Volume.fromData(value).convert();
}
export function parseQueryPriceStatusResult(value: unknown): QueryPriceStatusResult {
  if (!validatorQueryPriceStatusResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPriceStatusResult`)
  }

  const valid = validatorQueryPriceStatusResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPriceStatusResult' + ': ' + ajv.errorsText(validatorQueryPriceStatusResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPriceStatusResult'}),
    );
  }

  return QueryPriceStatusResult.fromData(value).convert();
}
export function parseLiquidityPoolStruct(value: unknown): LiquidityPoolStruct {
  if (!validatorLiquidityPoolStruct) {
    throw new Error(`No validator defined for Schema#/definitions/LiquidityPoolStruct`)
  }

  const valid = validatorLiquidityPoolStruct(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'LiquidityPoolStruct' + ': ' + ajv.errorsText(validatorLiquidityPoolStruct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'LiquidityPoolStruct'}),
    );
  }

  return LiquidityPoolStruct.fromData(value).convert();
}
export function parseQueryLiquidityPoolsResult(value: unknown): QueryLiquidityPoolsResult {
  if (!validatorQueryLiquidityPoolsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryLiquidityPoolsResult`)
  }

  const valid = validatorQueryLiquidityPoolsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryLiquidityPoolsResult' + ': ' + ajv.errorsText(validatorQueryLiquidityPoolsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryLiquidityPoolsResult'}),
    );
  }

  return QueryLiquidityPoolsResult.fromData(value).convert();
}
export function parseQuerySpecifiedPoolsResult(value: unknown): QuerySpecifiedPoolsResult {
  if (!validatorQuerySpecifiedPoolsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QuerySpecifiedPoolsResult`)
  }

  const valid = validatorQuerySpecifiedPoolsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QuerySpecifiedPoolsResult' + ': ' + ajv.errorsText(validatorQuerySpecifiedPoolsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QuerySpecifiedPoolsResult'}),
    );
  }

  return QuerySpecifiedPoolsResult.fromData(value).convert();
}
export function parseQueryPoolsFromGovernorResult(value: unknown): QueryPoolsFromGovernorResult {
  if (!validatorQueryPoolsFromGovernorResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolsFromGovernorResult`)
  }

  const valid = validatorQueryPoolsFromGovernorResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolsFromGovernorResult' + ': ' + ajv.errorsText(validatorQueryPoolsFromGovernorResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolsFromGovernorResult'}),
    );
  }

  return QueryPoolsFromGovernorResult.fromData(value).convert();
}
export function parseShareTokenStruct(value: unknown): ShareTokenStruct {
  if (!validatorShareTokenStruct) {
    throw new Error(`No validator defined for Schema#/definitions/ShareTokenStruct`)
  }

  const valid = validatorShareTokenStruct(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'ShareTokenStruct' + ': ' + ajv.errorsText(validatorShareTokenStruct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'ShareTokenStruct'}),
    );
  }

  return ShareTokenStruct.fromData(value).convert();
}
export function parsePoolStruct(value: unknown): PoolStruct {
  if (!validatorPoolStruct) {
    throw new Error(`No validator defined for Schema#/definitions/PoolStruct`)
  }

  const valid = validatorPoolStruct(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'PoolStruct' + ': ' + ajv.errorsText(validatorPoolStruct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'PoolStruct'}),
    );
  }

  return PoolStruct.fromData(value).convert();
}
export function parsePoolLiquidityData(value: unknown): PoolLiquidityData {
  if (!validatorPoolLiquidityData) {
    throw new Error(`No validator defined for Schema#/definitions/PoolLiquidityData`)
  }

  const valid = validatorPoolLiquidityData(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'PoolLiquidityData' + ': ' + ajv.errorsText(validatorPoolLiquidityData.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'PoolLiquidityData'}),
    );
  }

  return PoolLiquidityData.fromData(value).convert();
}
export function parsePoolLiquidityHistory(value: unknown): PoolLiquidityHistory {
  if (!validatorPoolLiquidityHistory) {
    throw new Error(`No validator defined for Schema#/definitions/PoolLiquidityHistory`)
  }

  const valid = validatorPoolLiquidityHistory(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'PoolLiquidityHistory' + ': ' + ajv.errorsText(validatorPoolLiquidityHistory.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'PoolLiquidityHistory'}),
    );
  }

  return PoolLiquidityHistory.fromData(value).convert();
}
export function parseGovernor(value: unknown): Governor {
  if (!validatorGovernor) {
    throw new Error(`No validator defined for Schema#/definitions/Governor`)
  }

  const valid = validatorGovernor(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Governor' + ': ' + ajv.errorsText(validatorGovernor.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Governor'}),
    );
  }

  return Governor.fromData(value).convert();
}
export function parsePoolProposal(value: unknown): PoolProposal {
  if (!validatorPoolProposal) {
    throw new Error(`No validator defined for Schema#/definitions/PoolProposal`)
  }

  const valid = validatorPoolProposal(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'PoolProposal' + ': ' + ajv.errorsText(validatorPoolProposal.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'PoolProposal'}),
    );
  }

  return PoolProposal.fromData(value).convert();
}
export function parseVote(value: unknown): Vote {
  if (!validatorVote) {
    throw new Error(`No validator defined for Schema#/definitions/Vote`)
  }

  const valid = validatorVote(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Vote' + ': ' + ajv.errorsText(validatorVote.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Vote'}),
    );
  }

  return Vote.fromData(value).convert();
}
export function parseQueryAllPoolsResult(value: unknown): QueryAllPoolsResult {
  if (!validatorQueryAllPoolsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryAllPoolsResult`)
  }

  const valid = validatorQueryAllPoolsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryAllPoolsResult' + ': ' + ajv.errorsText(validatorQueryAllPoolsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryAllPoolsResult'}),
    );
  }

  return QueryAllPoolsResult.fromData(value).convert();
}
export function parseQueryPoolBaseInfoResult(value: unknown): QueryPoolBaseInfoResult {
  if (!validatorQueryPoolBaseInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolBaseInfoResult`)
  }

  const valid = validatorQueryPoolBaseInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolBaseInfoResult' + ': ' + ajv.errorsText(validatorQueryPoolBaseInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolBaseInfoResult'}),
    );
  }

  return QueryPoolBaseInfoResult.fromData(value).convert();
}
export function parseQueryPoolsLiquidityHistoryResult(value: unknown): QueryPoolsLiquidityHistoryResult {
  if (!validatorQueryPoolsLiquidityHistoryResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolsLiquidityHistoryResult`)
  }

  const valid = validatorQueryPoolsLiquidityHistoryResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolsLiquidityHistoryResult' + ': ' + ajv.errorsText(validatorQueryPoolsLiquidityHistoryResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolsLiquidityHistoryResult'}),
    );
  }

  return QueryPoolsLiquidityHistoryResult.fromData(value).convert();
}
export function parseQueryPoolsVolumesHistoryResult(value: unknown): QueryPoolsVolumesHistoryResult {
  if (!validatorQueryPoolsVolumesHistoryResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolsVolumesHistoryResult`)
  }

  const valid = validatorQueryPoolsVolumesHistoryResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolsVolumesHistoryResult' + ': ' + ajv.errorsText(validatorQueryPoolsVolumesHistoryResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolsVolumesHistoryResult'}),
    );
  }

  return QueryPoolsVolumesHistoryResult.fromData(value).convert();
}
export function parseQueryPoolVolumeHistoryResult(value: unknown): QueryPoolVolumeHistoryResult {
  if (!validatorQueryPoolVolumeHistoryResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolVolumeHistoryResult`)
  }

  const valid = validatorQueryPoolVolumeHistoryResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolVolumeHistoryResult' + ': ' + ajv.errorsText(validatorQueryPoolVolumeHistoryResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolVolumeHistoryResult'}),
    );
  }

  return QueryPoolVolumeHistoryResult.fromData(value).convert();
}
export function parseQueryPoolLatestNAVResult(value: unknown): QueryPoolLatestNAVResult {
  if (!validatorQueryPoolLatestNAVResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolLatestNAVResult`)
  }

  const valid = validatorQueryPoolLatestNAVResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolLatestNAVResult' + ': ' + ajv.errorsText(validatorQueryPoolLatestNAVResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolLatestNAVResult'}),
    );
  }

  return QueryPoolLatestNAVResult.fromData(value).convert();
}
export function parseQueryPoolPerpetualListDetailsResult(value: unknown): QueryPoolPerpetualListDetailsResult {
  if (!validatorQueryPoolPerpetualListDetailsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolPerpetualListDetailsResult`)
  }

  const valid = validatorQueryPoolPerpetualListDetailsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolPerpetualListDetailsResult' + ': ' + ajv.errorsText(validatorQueryPoolPerpetualListDetailsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolPerpetualListDetailsResult'}),
    );
  }

  return QueryPoolPerpetualListDetailsResult.fromData(value).convert();
}
export function parseQueryPoolLiquidityHistoryListResult(value: unknown): QueryPoolLiquidityHistoryListResult {
  if (!validatorQueryPoolLiquidityHistoryListResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolLiquidityHistoryListResult`)
  }

  const valid = validatorQueryPoolLiquidityHistoryListResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolLiquidityHistoryListResult' + ': ' + ajv.errorsText(validatorQueryPoolLiquidityHistoryListResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolLiquidityHistoryListResult'}),
    );
  }

  return QueryPoolLiquidityHistoryListResult.fromData(value).convert();
}
export function parseQueryPoolProposalListResult(value: unknown): QueryPoolProposalListResult {
  if (!validatorQueryPoolProposalListResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolProposalListResult`)
  }

  const valid = validatorQueryPoolProposalListResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolProposalListResult' + ': ' + ajv.errorsText(validatorQueryPoolProposalListResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolProposalListResult'}),
    );
  }

  return QueryPoolProposalListResult.fromData(value).convert();
}
export function parseQueryPoolHistoryDataResult(value: unknown): QueryPoolHistoryDataResult {
  if (!validatorQueryPoolHistoryDataResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolHistoryDataResult`)
  }

  const valid = validatorQueryPoolHistoryDataResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolHistoryDataResult' + ': ' + ajv.errorsText(validatorQueryPoolHistoryDataResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolHistoryDataResult'}),
    );
  }

  return QueryPoolHistoryDataResult.fromData(value).convert();
}
export function parseQueryPoolProposalDetailsResult(value: unknown): QueryPoolProposalDetailsResult {
  if (!validatorQueryPoolProposalDetailsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPoolProposalDetailsResult`)
  }

  const valid = validatorQueryPoolProposalDetailsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPoolProposalDetailsResult' + ': ' + ajv.errorsText(validatorQueryPoolProposalDetailsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPoolProposalDetailsResult'}),
    );
  }

  return QueryPoolProposalDetailsResult.fromData(value).convert();
}
export function parseLiquidate(value: unknown): Liquidate {
  if (!validatorLiquidate) {
    throw new Error(`No validator defined for Schema#/definitions/Liquidate`)
  }

  const valid = validatorLiquidate(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Liquidate' + ': ' + ajv.errorsText(validatorLiquidate.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Liquidate'}),
    );
  }

  return Liquidate.fromData(value).convert();
}
export function parseQueryLiquidatesResult(value: unknown): QueryLiquidatesResult {
  if (!validatorQueryLiquidatesResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryLiquidatesResult`)
  }

  const valid = validatorQueryLiquidatesResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryLiquidatesResult' + ': ' + ajv.errorsText(validatorQueryLiquidatesResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryLiquidatesResult'}),
    );
  }

  return QueryLiquidatesResult.fromData(value).convert();
}
export function parseL2TransactionLog(value: unknown): L2TransactionLog {
  if (!validatorL2TransactionLog) {
    throw new Error(`No validator defined for Schema#/definitions/L2TransactionLog`)
  }

  const valid = validatorL2TransactionLog(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'L2TransactionLog' + ': ' + ajv.errorsText(validatorL2TransactionLog.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'L2TransactionLog'}),
    );
  }

  return L2TransactionLog.fromData(value).convert();
}
export function parseL2TransactionReceipt(value: unknown): L2TransactionReceipt {
  if (!validatorL2TransactionReceipt) {
    throw new Error(`No validator defined for Schema#/definitions/L2TransactionReceipt`)
  }

  const valid = validatorL2TransactionReceipt(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'L2TransactionReceipt' + ': ' + ajv.errorsText(validatorL2TransactionReceipt.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'L2TransactionReceipt'}),
    );
  }

  return L2TransactionReceipt.fromData(value).convert();
}
export function parseTxToL1(value: unknown): TxToL1 {
  if (!validatorTxToL1) {
    throw new Error(`No validator defined for Schema#/definitions/TxToL1`)
  }

  const valid = validatorTxToL1(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TxToL1' + ': ' + ajv.errorsText(validatorTxToL1.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TxToL1'}),
    );
  }

  return TxToL1.fromData(value).convert();
}
export function parseTxToL2(value: unknown): TxToL2 {
  if (!validatorTxToL2) {
    throw new Error(`No validator defined for Schema#/definitions/TxToL2`)
  }

  const valid = validatorTxToL2(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TxToL2' + ': ' + ajv.errorsText(validatorTxToL2.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TxToL2'}),
    );
  }

  return TxToL2.fromData(value).convert();
}
export function parseMessageDelivered(value: unknown): MessageDelivered {
  if (!validatorMessageDelivered) {
    throw new Error(`No validator defined for Schema#/definitions/MessageDelivered`)
  }

  const valid = validatorMessageDelivered(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'MessageDelivered' + ': ' + ajv.errorsText(validatorMessageDelivered.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'MessageDelivered'}),
    );
  }

  return MessageDelivered.fromData(value).convert();
}
export function parseL2ToL1Transaction(value: unknown): L2ToL1Transaction {
  if (!validatorL2ToL1Transaction) {
    throw new Error(`No validator defined for Schema#/definitions/L2ToL1Transaction`)
  }

  const valid = validatorL2ToL1Transaction(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'L2ToL1Transaction' + ': ' + ajv.errorsText(validatorL2ToL1Transaction.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'L2ToL1Transaction'}),
    );
  }

  return L2ToL1Transaction.fromData(value).convert();
}
export function parseOutboundTransferInitiated(value: unknown): OutboundTransferInitiated {
  if (!validatorOutboundTransferInitiated) {
    throw new Error(`No validator defined for Schema#/definitions/OutboundTransferInitiated`)
  }

  const valid = validatorOutboundTransferInitiated(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'OutboundTransferInitiated' + ': ' + ajv.errorsText(validatorOutboundTransferInitiated.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'OutboundTransferInitiated'}),
    );
  }

  return OutboundTransferInitiated.fromData(value).convert();
}
export function parseInboundTransferFinalized(value: unknown): InboundTransferFinalized {
  if (!validatorInboundTransferFinalized) {
    throw new Error(`No validator defined for Schema#/definitions/InboundTransferFinalized`)
  }

  const valid = validatorInboundTransferFinalized(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'InboundTransferFinalized' + ': ' + ajv.errorsText(validatorInboundTransferFinalized.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'InboundTransferFinalized'}),
    );
  }

  return InboundTransferFinalized.fromData(value).convert();
}
export function parseQueryMessageDeliveredResult(value: unknown): QueryMessageDeliveredResult {
  if (!validatorQueryMessageDeliveredResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryMessageDeliveredResult`)
  }

  const valid = validatorQueryMessageDeliveredResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryMessageDeliveredResult' + ': ' + ajv.errorsText(validatorQueryMessageDeliveredResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryMessageDeliveredResult'}),
    );
  }

  return QueryMessageDeliveredResult.fromData(value).convert();
}
export function parseQueryTxToL1sResult(value: unknown): QueryTxToL1sResult {
  if (!validatorQueryTxToL1sResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTxToL1sResult`)
  }

  const valid = validatorQueryTxToL1sResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTxToL1sResult' + ': ' + ajv.errorsText(validatorQueryTxToL1sResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTxToL1sResult'}),
    );
  }

  return QueryTxToL1sResult.fromData(value).convert();
}
export function parseQueryTxToL2sResult(value: unknown): QueryTxToL2sResult {
  if (!validatorQueryTxToL2sResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTxToL2sResult`)
  }

  const valid = validatorQueryTxToL2sResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTxToL2sResult' + ': ' + ajv.errorsText(validatorQueryTxToL2sResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTxToL2sResult'}),
    );
  }

  return QueryTxToL2sResult.fromData(value).convert();
}
export function parseQueryOutboundTransferInitiatedResult(value: unknown): QueryOutboundTransferInitiatedResult {
  if (!validatorQueryOutboundTransferInitiatedResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryOutboundTransferInitiatedResult`)
  }

  const valid = validatorQueryOutboundTransferInitiatedResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryOutboundTransferInitiatedResult' + ': ' + ajv.errorsText(validatorQueryOutboundTransferInitiatedResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryOutboundTransferInitiatedResult'}),
    );
  }

  return QueryOutboundTransferInitiatedResult.fromData(value).convert();
}
export function parseQueryInboundTransferFinalizedResult(value: unknown): QueryInboundTransferFinalizedResult {
  if (!validatorQueryInboundTransferFinalizedResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryInboundTransferFinalizedResult`)
  }

  const valid = validatorQueryInboundTransferFinalizedResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryInboundTransferFinalizedResult' + ': ' + ajv.errorsText(validatorQueryInboundTransferFinalizedResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryInboundTransferFinalizedResult'}),
    );
  }

  return QueryInboundTransferFinalizedResult.fromData(value).convert();
}
export function parseQueryL2ToL1TransactionsResult(value: unknown): QueryL2ToL1TransactionsResult {
  if (!validatorQueryL2ToL1TransactionsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryL2ToL1TransactionsResult`)
  }

  const valid = validatorQueryL2ToL1TransactionsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryL2ToL1TransactionsResult' + ': ' + ajv.errorsText(validatorQueryL2ToL1TransactionsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryL2ToL1TransactionsResult'}),
    );
  }

  return QueryL2ToL1TransactionsResult.fromData(value).convert();
}
export function parseUniswapPair(value: unknown): UniswapPair {
  if (!validatorUniswapPair) {
    throw new Error(`No validator defined for Schema#/definitions/UniswapPair`)
  }

  const valid = validatorUniswapPair(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'UniswapPair' + ': ' + ajv.errorsText(validatorUniswapPair.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'UniswapPair'}),
    );
  }

  return UniswapPair.fromData(value).convert();
}
export function parseUniswapV3Token(value: unknown): UniswapV3Token {
  if (!validatorUniswapV3Token) {
    throw new Error(`No validator defined for Schema#/definitions/UniswapV3Token`)
  }

  const valid = validatorUniswapV3Token(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'UniswapV3Token' + ': ' + ajv.errorsText(validatorUniswapV3Token.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'UniswapV3Token'}),
    );
  }

  return UniswapV3Token.fromData(value).convert();
}
export function parseUniswapV3Tick(value: unknown): UniswapV3Tick {
  if (!validatorUniswapV3Tick) {
    throw new Error(`No validator defined for Schema#/definitions/UniswapV3Tick`)
  }

  const valid = validatorUniswapV3Tick(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'UniswapV3Tick' + ': ' + ajv.errorsText(validatorUniswapV3Tick.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'UniswapV3Tick'}),
    );
  }

  return UniswapV3Tick.fromData(value).convert();
}
export function parseUniswapV3Pool(value: unknown): UniswapV3Pool {
  if (!validatorUniswapV3Pool) {
    throw new Error(`No validator defined for Schema#/definitions/UniswapV3Pool`)
  }

  const valid = validatorUniswapV3Pool(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'UniswapV3Pool' + ': ' + ajv.errorsText(validatorUniswapV3Pool.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'UniswapV3Pool'}),
    );
  }

  return UniswapV3Pool.fromData(value).convert();
}
export function parseQueryUniV3PriceResult(value: unknown): QueryUniV3PriceResult {
  if (!validatorQueryUniV3PriceResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryUniV3PriceResult`)
  }

  const valid = validatorQueryUniV3PriceResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryUniV3PriceResult' + ': ' + ajv.errorsText(validatorQueryUniV3PriceResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryUniV3PriceResult'}),
    );
  }

  return QueryUniV3PriceResult.fromData(value).convert();
}
export function parseQueryTokenPriceResult(value: unknown): QueryTokenPriceResult {
  if (!validatorQueryTokenPriceResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTokenPriceResult`)
  }

  const valid = validatorQueryTokenPriceResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTokenPriceResult' + ': ' + ajv.errorsText(validatorQueryTokenPriceResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTokenPriceResult'}),
    );
  }

  return QueryTokenPriceResult.fromData(value).convert();
}
export function parseQueryUniswapV3PoolsResult(value: unknown): QueryUniswapV3PoolsResult {
  if (!validatorQueryUniswapV3PoolsResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryUniswapV3PoolsResult`)
  }

  const valid = validatorQueryUniswapV3PoolsResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryUniswapV3PoolsResult' + ': ' + ajv.errorsText(validatorQueryUniswapV3PoolsResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryUniswapV3PoolsResult'}),
    );
  }

  return QueryUniswapV3PoolsResult.fromData(value).convert();
}
export function parseQueryUniswapV3PoolsByAddressesResult(value: unknown): QueryUniswapV3PoolsByAddressesResult {
  if (!validatorQueryUniswapV3PoolsByAddressesResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryUniswapV3PoolsByAddressesResult`)
  }

  const valid = validatorQueryUniswapV3PoolsByAddressesResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryUniswapV3PoolsByAddressesResult' + ': ' + ajv.errorsText(validatorQueryUniswapV3PoolsByAddressesResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryUniswapV3PoolsByAddressesResult'}),
    );
  }

  return QueryUniswapV3PoolsByAddressesResult.fromData(value).convert();
}
export function parseQueryUniswapV3PoolsByTokenResult(value: unknown): QueryUniswapV3PoolsByTokenResult {
  if (!validatorQueryUniswapV3PoolsByTokenResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryUniswapV3PoolsByTokenResult`)
  }

  const valid = validatorQueryUniswapV3PoolsByTokenResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryUniswapV3PoolsByTokenResult' + ': ' + ajv.errorsText(validatorQueryUniswapV3PoolsByTokenResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryUniswapV3PoolsByTokenResult'}),
    );
  }

  return QueryUniswapV3PoolsByTokenResult.fromData(value).convert();
}
export function parseMcdexData(value: unknown): McdexData {
  if (!validatorMcdexData) {
    throw new Error(`No validator defined for Schema#/definitions/McdexData`)
  }

  const valid = validatorMcdexData(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'McdexData' + ': ' + ajv.errorsText(validatorMcdexData.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'McdexData'}),
    );
  }

  return McdexData.fromData(value).convert();
}
export function parseQueryMcdexDataResult(value: unknown): QueryMcdexDataResult {
  if (!validatorQueryMcdexDataResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryMcdexDataResult`)
  }

  const valid = validatorQueryMcdexDataResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryMcdexDataResult' + ': ' + ajv.errorsText(validatorQueryMcdexDataResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryMcdexDataResult'}),
    );
  }

  return QueryMcdexDataResult.fromData(value).convert();
}
export function parseCapturedFeeInfo(value: unknown): CapturedFeeInfo {
  if (!validatorCapturedFeeInfo) {
    throw new Error(`No validator defined for Schema#/definitions/CapturedFeeInfo`)
  }

  const valid = validatorCapturedFeeInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'CapturedFeeInfo' + ': ' + ajv.errorsText(validatorCapturedFeeInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'CapturedFeeInfo'}),
    );
  }

  return CapturedFeeInfo.fromData(value).convert();
}
export function parseliquidityPoolsInfo(value: unknown): liquidityPoolsInfo {
  if (!validatorliquidityPoolsInfo) {
    throw new Error(`No validator defined for Schema#/definitions/liquidityPoolsInfo`)
  }

  const valid = validatorliquidityPoolsInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'liquidityPoolsInfo' + ': ' + ajv.errorsText(validatorliquidityPoolsInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'liquidityPoolsInfo'}),
    );
  }

  return liquidityPoolsInfo.fromData(value).convert();
}
export function parseQueryCapturedFeeUSDResult(value: unknown): QueryCapturedFeeUSDResult {
  if (!validatorQueryCapturedFeeUSDResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryCapturedFeeUSDResult`)
  }

  const valid = validatorQueryCapturedFeeUSDResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryCapturedFeeUSDResult' + ': ' + ajv.errorsText(validatorQueryCapturedFeeUSDResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryCapturedFeeUSDResult'}),
    );
  }

  return QueryCapturedFeeUSDResult.fromData(value).convert();
}
export function parseQueryDaoPoolAddressResult(value: unknown): QueryDaoPoolAddressResult {
  if (!validatorQueryDaoPoolAddressResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryDaoPoolAddressResult`)
  }

  const valid = validatorQueryDaoPoolAddressResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryDaoPoolAddressResult' + ': ' + ajv.errorsText(validatorQueryDaoPoolAddressResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryDaoPoolAddressResult'}),
    );
  }

  return QueryDaoPoolAddressResult.fromData(value).convert();
}
export function parseDaoGovernor(value: unknown): DaoGovernor {
  if (!validatorDaoGovernor) {
    throw new Error(`No validator defined for Schema#/definitions/DaoGovernor`)
  }

  const valid = validatorDaoGovernor(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'DaoGovernor' + ': ' + ajv.errorsText(validatorDaoGovernor.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'DaoGovernor'}),
    );
  }

  return DaoGovernor.fromData(value).convert();
}
export function parseDaoGovernorProposal(value: unknown): DaoGovernorProposal {
  if (!validatorDaoGovernorProposal) {
    throw new Error(`No validator defined for Schema#/definitions/DaoGovernorProposal`)
  }

  const valid = validatorDaoGovernorProposal(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'DaoGovernorProposal' + ': ' + ajv.errorsText(validatorDaoGovernorProposal.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'DaoGovernorProposal'}),
    );
  }

  return DaoGovernorProposal.fromData(value).convert();
}
export function parseDaoGovernorVote(value: unknown): DaoGovernorVote {
  if (!validatorDaoGovernorVote) {
    throw new Error(`No validator defined for Schema#/definitions/DaoGovernorVote`)
  }

  const valid = validatorDaoGovernorVote(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'DaoGovernorVote' + ': ' + ajv.errorsText(validatorDaoGovernorVote.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'DaoGovernorVote'}),
    );
  }

  return DaoGovernorVote.fromData(value).convert();
}
export function parseDaoGovernorUser(value: unknown): DaoGovernorUser {
  if (!validatorDaoGovernorUser) {
    throw new Error(`No validator defined for Schema#/definitions/DaoGovernorUser`)
  }

  const valid = validatorDaoGovernorUser(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'DaoGovernorUser' + ': ' + ajv.errorsText(validatorDaoGovernorUser.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'DaoGovernorUser'}),
    );
  }

  return DaoGovernorUser.fromData(value).convert();
}
export function parseDaoGovernorDelegate(value: unknown): DaoGovernorDelegate {
  if (!validatorDaoGovernorDelegate) {
    throw new Error(`No validator defined for Schema#/definitions/DaoGovernorDelegate`)
  }

  const valid = validatorDaoGovernorDelegate(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'DaoGovernorDelegate' + ': ' + ajv.errorsText(validatorDaoGovernorDelegate.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'DaoGovernorDelegate'}),
    );
  }

  return DaoGovernorDelegate.fromData(value).convert();
}
export function parseQueryDaoProposalListResult(value: unknown): QueryDaoProposalListResult {
  if (!validatorQueryDaoProposalListResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryDaoProposalListResult`)
  }

  const valid = validatorQueryDaoProposalListResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryDaoProposalListResult' + ': ' + ajv.errorsText(validatorQueryDaoProposalListResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryDaoProposalListResult'}),
    );
  }

  return QueryDaoProposalListResult.fromData(value).convert();
}
export function parseQueryDaoProposalResultByIndexResult(value: unknown): QueryDaoProposalResultByIndexResult {
  if (!validatorQueryDaoProposalResultByIndexResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryDaoProposalResultByIndexResult`)
  }

  const valid = validatorQueryDaoProposalResultByIndexResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryDaoProposalResultByIndexResult' + ': ' + ajv.errorsText(validatorQueryDaoProposalResultByIndexResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryDaoProposalResultByIndexResult'}),
    );
  }

  return QueryDaoProposalResultByIndexResult.fromData(value).convert();
}
export function parseQueryDaoVoteDelegateInfoResult(value: unknown): QueryDaoVoteDelegateInfoResult {
  if (!validatorQueryDaoVoteDelegateInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryDaoVoteDelegateInfoResult`)
  }

  const valid = validatorQueryDaoVoteDelegateInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryDaoVoteDelegateInfoResult' + ': ' + ajv.errorsText(validatorQueryDaoVoteDelegateInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryDaoVoteDelegateInfoResult'}),
    );
  }

  return QueryDaoVoteDelegateInfoResult.fromData(value).convert();
}
export function parseChainBlock(value: unknown): ChainBlock {
  if (!validatorChainBlock) {
    throw new Error(`No validator defined for Schema#/definitions/ChainBlock`)
  }

  const valid = validatorChainBlock(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'ChainBlock' + ': ' + ajv.errorsText(validatorChainBlock.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'ChainBlock'}),
    );
  }

  return ChainBlock.fromData(value).convert();
}
export function parseQueryChainBlockResult(value: unknown): QueryChainBlockResult {
  if (!validatorQueryChainBlockResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryChainBlockResult`)
  }

  const valid = validatorQueryChainBlockResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryChainBlockResult' + ': ' + ajv.errorsText(validatorQueryChainBlockResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryChainBlockResult'}),
    );
  }

  return QueryChainBlockResult.fromData(value).convert();
}
export function parseQueryTimeStampByBlockNumber(value: unknown): QueryTimeStampByBlockNumber {
  if (!validatorQueryTimeStampByBlockNumber) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTimeStampByBlockNumber`)
  }

  const valid = validatorQueryTimeStampByBlockNumber(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTimeStampByBlockNumber' + ': ' + ajv.errorsText(validatorQueryTimeStampByBlockNumber.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTimeStampByBlockNumber'}),
    );
  }

  return QueryTimeStampByBlockNumber.fromData(value).convert();
}
export function parseQueryLatestBlockNumber(value: unknown): QueryLatestBlockNumber {
  if (!validatorQueryLatestBlockNumber) {
    throw new Error(`No validator defined for Schema#/definitions/QueryLatestBlockNumber`)
  }

  const valid = validatorQueryLatestBlockNumber(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryLatestBlockNumber' + ': ' + ajv.errorsText(validatorQueryLatestBlockNumber.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryLatestBlockNumber'}),
    );
  }

  return QueryLatestBlockNumber.fromData(value).convert();
}
export function parseTransactionMiningInfo(value: unknown): TransactionMiningInfo {
  if (!validatorTransactionMiningInfo) {
    throw new Error(`No validator defined for Schema#/definitions/TransactionMiningInfo`)
  }

  const valid = validatorTransactionMiningInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TransactionMiningInfo' + ': ' + ajv.errorsText(validatorTransactionMiningInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TransactionMiningInfo'}),
    );
  }

  return TransactionMiningInfo.fromData(value).convert();
}
export function parseTransactionMiningTrade(value: unknown): TransactionMiningTrade {
  if (!validatorTransactionMiningTrade) {
    throw new Error(`No validator defined for Schema#/definitions/TransactionMiningTrade`)
  }

  const valid = validatorTransactionMiningTrade(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TransactionMiningTrade' + ': ' + ajv.errorsText(validatorTransactionMiningTrade.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TransactionMiningTrade'}),
    );
  }

  return TransactionMiningTrade.fromData(value).convert();
}
export function parseTransactionMiningUserInfo(value: unknown): TransactionMiningUserInfo {
  if (!validatorTransactionMiningUserInfo) {
    throw new Error(`No validator defined for Schema#/definitions/TransactionMiningUserInfo`)
  }

  const valid = validatorTransactionMiningUserInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TransactionMiningUserInfo' + ': ' + ajv.errorsText(validatorTransactionMiningUserInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TransactionMiningUserInfo'}),
    );
  }

  return TransactionMiningUserInfo.fromData(value).convert();
}
export function parseQueryTransactionMiningInfoResult(value: unknown): QueryTransactionMiningInfoResult {
  if (!validatorQueryTransactionMiningInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTransactionMiningInfoResult`)
  }

  const valid = validatorQueryTransactionMiningInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTransactionMiningInfoResult' + ': ' + ajv.errorsText(validatorQueryTransactionMiningInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTransactionMiningInfoResult'}),
    );
  }

  return QueryTransactionMiningInfoResult.fromData(value).convert();
}
export function parseQueryTransactionMiningTradeResult(value: unknown): QueryTransactionMiningTradeResult {
  if (!validatorQueryTransactionMiningTradeResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTransactionMiningTradeResult`)
  }

  const valid = validatorQueryTransactionMiningTradeResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTransactionMiningTradeResult' + ': ' + ajv.errorsText(validatorQueryTransactionMiningTradeResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTransactionMiningTradeResult'}),
    );
  }

  return QueryTransactionMiningTradeResult.fromData(value).convert();
}
export function parseQueryTransactionMiningUserResult(value: unknown): QueryTransactionMiningUserResult {
  if (!validatorQueryTransactionMiningUserResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTransactionMiningUserResult`)
  }

  const valid = validatorQueryTransactionMiningUserResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTransactionMiningUserResult' + ': ' + ajv.errorsText(validatorQueryTransactionMiningUserResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTransactionMiningUserResult'}),
    );
  }

  return QueryTransactionMiningUserResult.fromData(value).convert();
}
export function parseFactories(value: unknown): Factories {
  if (!validatorFactories) {
    throw new Error(`No validator defined for Schema#/definitions/Factories`)
  }

  const valid = validatorFactories(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'Factories' + ': ' + ajv.errorsText(validatorFactories.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Factories'}),
    );
  }

  return Factories.fromData(value).convert();
}
export function parseQueryVaultAssetResult(value: unknown): QueryVaultAssetResult {
  if (!validatorQueryVaultAssetResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryVaultAssetResult`)
  }

  const valid = validatorQueryVaultAssetResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryVaultAssetResult' + ': ' + ajv.errorsText(validatorQueryVaultAssetResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryVaultAssetResult'}),
    );
  }

  return QueryVaultAssetResult.fromData(value).convert();
}
export function parseFundingRate(value: unknown): FundingRate {
  if (!validatorFundingRate) {
    throw new Error(`No validator defined for Schema#/definitions/FundingRate`)
  }

  const valid = validatorFundingRate(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'FundingRate' + ': ' + ajv.errorsText(validatorFundingRate.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'FundingRate'}),
    );
  }

  return FundingRate.fromData(value).convert();
}
export function parseQueryPerpFundingRateResult(value: unknown): QueryPerpFundingRateResult {
  if (!validatorQueryPerpFundingRateResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryPerpFundingRateResult`)
  }

  const valid = validatorQueryPerpFundingRateResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryPerpFundingRateResult' + ': ' + ajv.errorsText(validatorQueryPerpFundingRateResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryPerpFundingRateResult'}),
    );
  }

  return QueryPerpFundingRateResult.fromData(value).convert();
}
export function parseBalancerPool(value: unknown): BalancerPool {
  if (!validatorBalancerPool) {
    throw new Error(`No validator defined for Schema#/definitions/BalancerPool`)
  }

  const valid = validatorBalancerPool(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'BalancerPool' + ': ' + ajv.errorsText(validatorBalancerPool.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'BalancerPool'}),
    );
  }

  return BalancerPool.fromData(value).convert();
}
export function parseBalancerPoolToken(value: unknown): BalancerPoolToken {
  if (!validatorBalancerPoolToken) {
    throw new Error(`No validator defined for Schema#/definitions/BalancerPoolToken`)
  }

  const valid = validatorBalancerPoolToken(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'BalancerPoolToken' + ': ' + ajv.errorsText(validatorBalancerPoolToken.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'BalancerPoolToken'}),
    );
  }

  return BalancerPoolToken.fromData(value).convert();
}
export function parseQueryBalancerMiningPoolInfoResult(value: unknown): QueryBalancerMiningPoolInfoResult {
  if (!validatorQueryBalancerMiningPoolInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryBalancerMiningPoolInfoResult`)
  }

  const valid = validatorQueryBalancerMiningPoolInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryBalancerMiningPoolInfoResult' + ': ' + ajv.errorsText(validatorQueryBalancerMiningPoolInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryBalancerMiningPoolInfoResult'}),
    );
  }

  return QueryBalancerMiningPoolInfoResult.fromData(value).convert();
}
export function parseSushiSwapPair(value: unknown): SushiSwapPair {
  if (!validatorSushiSwapPair) {
    throw new Error(`No validator defined for Schema#/definitions/SushiSwapPair`)
  }

  const valid = validatorSushiSwapPair(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'SushiSwapPair' + ': ' + ajv.errorsText(validatorSushiSwapPair.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'SushiSwapPair'}),
    );
  }

  return SushiSwapPair.fromData(value).convert();
}
export function parseSushiSwapMiniChef(value: unknown): SushiSwapMiniChef {
  if (!validatorSushiSwapMiniChef) {
    throw new Error(`No validator defined for Schema#/definitions/SushiSwapMiniChef`)
  }

  const valid = validatorSushiSwapMiniChef(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'SushiSwapMiniChef' + ': ' + ajv.errorsText(validatorSushiSwapMiniChef.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'SushiSwapMiniChef'}),
    );
  }

  return SushiSwapMiniChef.fromData(value).convert();
}
export function parseSushiSwapPool(value: unknown): SushiSwapPool {
  if (!validatorSushiSwapPool) {
    throw new Error(`No validator defined for Schema#/definitions/SushiSwapPool`)
  }

  const valid = validatorSushiSwapPool(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'SushiSwapPool' + ': ' + ajv.errorsText(validatorSushiSwapPool.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'SushiSwapPool'}),
    );
  }

  return SushiSwapPool.fromData(value).convert();
}
export function parseSushiSwapRewarder(value: unknown): SushiSwapRewarder {
  if (!validatorSushiSwapRewarder) {
    throw new Error(`No validator defined for Schema#/definitions/SushiSwapRewarder`)
  }

  const valid = validatorSushiSwapRewarder(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'SushiSwapRewarder' + ': ' + ajv.errorsText(validatorSushiSwapRewarder.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'SushiSwapRewarder'}),
    );
  }

  return SushiSwapRewarder.fromData(value).convert();
}
export function parseQuerySushiPairResult(value: unknown): QuerySushiPairResult {
  if (!validatorQuerySushiPairResult) {
    throw new Error(`No validator defined for Schema#/definitions/QuerySushiPairResult`)
  }

  const valid = validatorQuerySushiPairResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QuerySushiPairResult' + ': ' + ajv.errorsText(validatorQuerySushiPairResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QuerySushiPairResult'}),
    );
  }

  return QuerySushiPairResult.fromData(value).convert();
}
export function parseQuerySushiMiningPoolInfoResult(value: unknown): QuerySushiMiningPoolInfoResult {
  if (!validatorQuerySushiMiningPoolInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QuerySushiMiningPoolInfoResult`)
  }

  const valid = validatorQuerySushiMiningPoolInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QuerySushiMiningPoolInfoResult' + ': ' + ajv.errorsText(validatorQuerySushiMiningPoolInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QuerySushiMiningPoolInfoResult'}),
    );
  }

  return QuerySushiMiningPoolInfoResult.fromData(value).convert();
}
export function parseAccountTradingMiningInfo(value: unknown): AccountTradingMiningInfo {
  if (!validatorAccountTradingMiningInfo) {
    throw new Error(`No validator defined for Schema#/definitions/AccountTradingMiningInfo`)
  }

  const valid = validatorAccountTradingMiningInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'AccountTradingMiningInfo' + ': ' + ajv.errorsText(validatorAccountTradingMiningInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'AccountTradingMiningInfo'}),
    );
  }

  return AccountTradingMiningInfo.fromData(value).convert();
}
export function parseAccountTradingMiningMultiChainInfo(value: unknown): AccountTradingMiningMultiChainInfo {
  if (!validatorAccountTradingMiningMultiChainInfo) {
    throw new Error(`No validator defined for Schema#/definitions/AccountTradingMiningMultiChainInfo`)
  }

  const valid = validatorAccountTradingMiningMultiChainInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'AccountTradingMiningMultiChainInfo' + ': ' + ajv.errorsText(validatorAccountTradingMiningMultiChainInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'AccountTradingMiningMultiChainInfo'}),
    );
  }

  return AccountTradingMiningMultiChainInfo.fromData(value).convert();
}
export function parseTotalTradingMiningInfo(value: unknown): TotalTradingMiningInfo {
  if (!validatorTotalTradingMiningInfo) {
    throw new Error(`No validator defined for Schema#/definitions/TotalTradingMiningInfo`)
  }

  const valid = validatorTotalTradingMiningInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'TotalTradingMiningInfo' + ': ' + ajv.errorsText(validatorTotalTradingMiningInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'TotalTradingMiningInfo'}),
    );
  }

  return TotalTradingMiningInfo.fromData(value).convert();
}
export function parseQueryAccountTradingMiningInfoResult(value: unknown): QueryAccountTradingMiningInfoResult {
  if (!validatorQueryAccountTradingMiningInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryAccountTradingMiningInfoResult`)
  }

  const valid = validatorQueryAccountTradingMiningInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryAccountTradingMiningInfoResult' + ': ' + ajv.errorsText(validatorQueryAccountTradingMiningInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryAccountTradingMiningInfoResult'}),
    );
  }

  return QueryAccountTradingMiningInfoResult.fromData(value).convert();
}
export function parseQueryAccountTradingMiningMultiChainInfoResult(value: unknown): QueryAccountTradingMiningMultiChainInfoResult {
  if (!validatorQueryAccountTradingMiningMultiChainInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryAccountTradingMiningMultiChainInfoResult`)
  }

  const valid = validatorQueryAccountTradingMiningMultiChainInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryAccountTradingMiningMultiChainInfoResult' + ': ' + ajv.errorsText(validatorQueryAccountTradingMiningMultiChainInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryAccountTradingMiningMultiChainInfoResult'}),
    );
  }

  return QueryAccountTradingMiningMultiChainInfoResult.fromData(value).convert();
}
export function parseQueryTotalTradingMiningInfoResult(value: unknown): QueryTotalTradingMiningInfoResult {
  if (!validatorQueryTotalTradingMiningInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryTotalTradingMiningInfoResult`)
  }

  const valid = validatorQueryTotalTradingMiningInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryTotalTradingMiningInfoResult' + ': ' + ajv.errorsText(validatorQueryTotalTradingMiningInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryTotalTradingMiningInfoResult'}),
    );
  }

  return QueryTotalTradingMiningInfoResult.fromData(value).convert();
}
export function parseAccountGasFeeInfo(value: unknown): AccountGasFeeInfo {
  if (!validatorAccountGasFeeInfo) {
    throw new Error(`No validator defined for Schema#/definitions/AccountGasFeeInfo`)
  }

  const valid = validatorAccountGasFeeInfo(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'AccountGasFeeInfo' + ': ' + ajv.errorsText(validatorAccountGasFeeInfo.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'AccountGasFeeInfo'}),
    );
  }

  return AccountGasFeeInfo.fromData(value).convert();
}
export function parseQueryAccountGasFeeInfoResult(value: unknown): QueryAccountGasFeeInfoResult {
  if (!validatorQueryAccountGasFeeInfoResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryAccountGasFeeInfoResult`)
  }

  const valid = validatorQueryAccountGasFeeInfoResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryAccountGasFeeInfoResult' + ': ' + ajv.errorsText(validatorQueryAccountGasFeeInfoResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryAccountGasFeeInfoResult'}),
    );
  }

  return QueryAccountGasFeeInfoResult.fromData(value).convert();
}
export function parseLiquidityAccount(value: unknown): LiquidityAccount {
  if (!validatorLiquidityAccount) {
    throw new Error(`No validator defined for Schema#/definitions/LiquidityAccount`)
  }

  const valid = validatorLiquidityAccount(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'LiquidityAccount' + ': ' + ajv.errorsText(validatorLiquidityAccount.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'LiquidityAccount'}),
    );
  }

  return LiquidityAccount.fromData(value).convert();
}
export function parseQueryAccountLiquidityPoolResult(value: unknown): QueryAccountLiquidityPoolResult {
  if (!validatorQueryAccountLiquidityPoolResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryAccountLiquidityPoolResult`)
  }

  const valid = validatorQueryAccountLiquidityPoolResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryAccountLiquidityPoolResult' + ': ' + ajv.errorsText(validatorQueryAccountLiquidityPoolResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryAccountLiquidityPoolResult'}),
    );
  }

  return QueryAccountLiquidityPoolResult.fromData(value).convert();
}
export function parseQueryLiquidityAccountResult(value: unknown): QueryLiquidityAccountResult {
  if (!validatorQueryLiquidityAccountResult) {
    throw new Error(`No validator defined for Schema#/definitions/QueryLiquidityAccountResult`)
  }

  const valid = validatorQueryLiquidityAccountResult(value);

  if (!valid) {
    throw new Error(
        'Invalid ' + 'QueryLiquidityAccountResult' + ': ' + ajv.errorsText(validatorQueryLiquidityAccountResult.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'QueryLiquidityAccountResult'}),
    );
  }

  return QueryLiquidityAccountResult.fromData(value).convert();
}