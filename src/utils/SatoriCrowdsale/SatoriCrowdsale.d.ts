/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface McbCrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "SATORI_DEPOSIT_RATE()": FunctionFragment;
    "SATORI_TOKEN_ADDRESS()": FunctionFragment;
    "MCDEX_FOUNDATION_ADDRESS()": FunctionFragment;
    "USDC_DEPOSIT_RATE()": FunctionFragment;
    "USDC_TOKEN_ADDRESS()": FunctionFragment;
    "beginTime()": FunctionFragment;
    "emergencyForwardFunds()": FunctionFragment;
    "emergencySettle(address)": FunctionFragment;
    "endTime()": FunctionFragment;
    "forwardFunds()": FunctionFragment;
    "isAccountSettled(address)": FunctionFragment;
    "isEmergency()": FunctionFragment;
    "isSettleable()": FunctionFragment;
    "isSubscribable()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEmergency()": FunctionFragment;
    "settle(address)": FunctionFragment;
    "shareOf(address)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "subscriptionOf(address)": FunctionFragment;
    "subscriptionRate()": FunctionFragment;
    "totalSubscribedSupply()": FunctionFragment;
    "totalSubscription()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SATORI_DEPOSIT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SATORI_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MCDEX_FOUNDATION_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_DEPOSIT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "beginTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyForwardFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySettle",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forwardFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSettled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSettleable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(functionFragment: "shareOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscribedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SATORI_DEPOSIT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SATORI_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MCDEX_FOUNDATION_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_DEPOSIT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beginTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyForwardFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySettle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSettleable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscribedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;

  events: {
    "EmergencyForwardFunds(uint256,uint256)": EventFragment;
    "EmergencySettle(address,uint256,uint256)": EventFragment;
    "ForwardFunds(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Purchase(uint256,uint256,uint256)": EventFragment;
    "SetEmergency()": EventFragment;
    "Settle(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyForwardFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencySettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForwardFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
}

export class McbCrowdsale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: McbCrowdsaleInterface;

  functions: {
    MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    SATORI_DEPOSIT_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "SATORI_DEPOSIT_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    SATORI_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SATORI_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MCDEX_FOUNDATION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "MCDEX_FOUNDATION_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    USDC_DEPOSIT_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "USDC_DEPOSIT_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    USDC_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "USDC_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    beginTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "beginTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    emergencyForwardFunds(overrides?: Overrides): Promise<ContractTransaction>;

    "emergencyForwardFunds()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencySettle(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencySettle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "endTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    forwardFunds(overrides?: Overrides): Promise<ContractTransaction>;

    "forwardFunds()"(overrides?: Overrides): Promise<ContractTransaction>;

    isAccountSettled(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAccountSettled(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isEmergency(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEmergency()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSettleable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSettleable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSubscribable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSubscribable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEmergency(overrides?: Overrides): Promise<ContractTransaction>;

    "setEmergency()"(overrides?: Overrides): Promise<ContractTransaction>;

    settle(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shareOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    subscribe(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "subscribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "subscriptionOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    subscriptionRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "subscriptionRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSubscribedSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSubscribedSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSubscription(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSubscription()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unlockTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  SATORI_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "SATORI_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  MCDEX_FOUNDATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "MCDEX_FOUNDATION_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  USDC_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "USDC_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  USDC_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "USDC_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  beginTime(overrides?: CallOverrides): Promise<BigNumber>;

  "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyForwardFunds(overrides?: Overrides): Promise<ContractTransaction>;

  "emergencyForwardFunds()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencySettle(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencySettle(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  forwardFunds(overrides?: Overrides): Promise<ContractTransaction>;

  "forwardFunds()"(overrides?: Overrides): Promise<ContractTransaction>;

  isAccountSettled(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountSettled(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEmergency(overrides?: CallOverrides): Promise<boolean>;

  "isEmergency()"(overrides?: CallOverrides): Promise<boolean>;

  isSettleable(overrides?: CallOverrides): Promise<boolean>;

  "isSettleable()"(overrides?: CallOverrides): Promise<boolean>;

  isSubscribable(overrides?: CallOverrides): Promise<boolean>;

  "isSubscribable()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEmergency(overrides?: Overrides): Promise<ContractTransaction>;

  "setEmergency()"(overrides?: Overrides): Promise<ContractTransaction>;

  settle(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  "settle(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shareOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subscribe(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "subscribe(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subscriptionOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subscriptionOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subscriptionRate(overrides?: CallOverrides): Promise<BigNumber>;

  "subscriptionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSubscribedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSubscribedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSubscription(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSubscription()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SATORI_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "SATORI_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    MCDEX_FOUNDATION_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "MCDEX_FOUNDATION_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    USDC_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "USDC_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyForwardFunds(overrides?: CallOverrides): Promise<void>;

    "emergencyForwardFunds()"(overrides?: CallOverrides): Promise<void>;

    emergencySettle(account: string, overrides?: CallOverrides): Promise<void>;

    "emergencySettle(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    forwardFunds(overrides?: CallOverrides): Promise<void>;

    "forwardFunds()"(overrides?: CallOverrides): Promise<void>;

    isAccountSettled(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountSettled(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEmergency(overrides?: CallOverrides): Promise<boolean>;

    "isEmergency()"(overrides?: CallOverrides): Promise<boolean>;

    isSettleable(overrides?: CallOverrides): Promise<boolean>;

    "isSettleable()"(overrides?: CallOverrides): Promise<boolean>;

    isSubscribable(overrides?: CallOverrides): Promise<boolean>;

    "isSubscribable()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEmergency(overrides?: CallOverrides): Promise<void>;

    "setEmergency()"(overrides?: CallOverrides): Promise<void>;

    settle(account: string, overrides?: CallOverrides): Promise<void>;

    "settle(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shareOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "subscribe(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriptionOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "subscriptionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubscribedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSubscribedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSubscription()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    EmergencyForwardFunds(mcbAmount: null, usdcAmount: null): EventFilter;

    EmergencySettle(
      account: string | null,
      mcbAmount: null,
      usdcAmount: null
    ): EventFilter;

    ForwardFunds(claimableUSDCAmount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Purchase(amount: null, depositedSATORI: null, depositUSDC: null): EventFilter;

    SetEmergency(): EventFilter;

    Settle(
      account: string | null,
      settledAmount: null,
      refundUSDC: null
    ): EventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SATORI_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "SATORI_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MCDEX_FOUNDATION_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "MCDEX_FOUNDATION_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC_DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyForwardFunds(overrides?: Overrides): Promise<BigNumber>;

    "emergencyForwardFunds()"(overrides?: Overrides): Promise<BigNumber>;

    emergencySettle(account: string, overrides?: Overrides): Promise<BigNumber>;

    "emergencySettle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    forwardFunds(overrides?: Overrides): Promise<BigNumber>;

    "forwardFunds()"(overrides?: Overrides): Promise<BigNumber>;

    isAccountSettled(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountSettled(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEmergency(overrides?: CallOverrides): Promise<BigNumber>;

    "isEmergency()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSettleable(overrides?: CallOverrides): Promise<BigNumber>;

    "isSettleable()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSubscribable(overrides?: CallOverrides): Promise<BigNumber>;

    "isSubscribable()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEmergency(overrides?: Overrides): Promise<BigNumber>;

    "setEmergency()"(overrides?: Overrides): Promise<BigNumber>;

    settle(account: string, overrides?: Overrides): Promise<BigNumber>;

    "settle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shareOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "subscribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriptionOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "subscriptionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubscribedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSubscribedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSubscription()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_SUPPLY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SATORI_DEPOSIT_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SATORI_DEPOSIT_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SATORI_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCDEX_FOUNDATION_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MCDEX_FOUNDATION_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC_DEPOSIT_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC_DEPOSIT_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "USDC_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beginTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyForwardFunds(overrides?: Overrides): Promise<PopulatedTransaction>;

    "emergencyForwardFunds()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencySettle(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencySettle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardFunds(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forwardFunds()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isAccountSettled(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountSettled(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEmergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isEmergency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSettleable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isSettleable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSubscribable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isSubscribable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEmergency(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setEmergency()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    settle(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "subscribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subscriptionOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subscriptionOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subscriptionRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSubscribedSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSubscribedSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSubscription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSubscription()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unlockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
