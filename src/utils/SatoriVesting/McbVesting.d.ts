/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface McbVestingInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "SATORI_TOKEN_ADDRESS()": FunctionFragment;
    "UPDATE_BENEFICIARY_TYPEHASH()": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "beginTime()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimableToken(address)": FunctionFragment;
    "claimedBalances(address)": FunctionFragment;
    "commitments(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shareOf(address)": FunctionFragment;
    "tokenBalance()": FunctionFragment;
    "totalCommitment()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBeneficiary(address,address)": FunctionFragment;
    "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SATORI_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_BENEFICIARY_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(functionFragment: "beginTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "commitments", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shareOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiary",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiaryBySignature",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SATORI_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_BENEFICIARY_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beginTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiaryBySignature",
    data: BytesLike
  ): Result;

  events: {
    "AddBeneficiaries(address[],uint96[])": EventFragment;
    "Claim(address,uint96)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateBeneficiary(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBeneficiaries"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBeneficiary"): EventFragment;
}

export class McbVesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: McbVestingInterface;

  functions: {
    DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SATORI_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SATORI_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    UPDATE_BENEFICIARY_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "UPDATE_BENEFICIARY_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      claimed: BigNumber;
      cumulativeRef: BigNumber;
      commitment: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "accounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      claimed: BigNumber;
      cumulativeRef: BigNumber;
      commitment: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    beginTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "beginTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimableToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimableToken(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimedBalances(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimedBalances(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    commitments(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "commitments(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    shareOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shareOf(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenBalance(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      cumulative: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "tokenBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      cumulative: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    totalCommitment(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalCommitment()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBeneficiary(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBeneficiary(address,address)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBeneficiaryBySignature(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  UPDATE_BENEFICIARY_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "UPDATE_BENEFICIARY_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  accounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    claimed: BigNumber;
    cumulativeRef: BigNumber;
    commitment: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "accounts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    claimed: BigNumber;
    cumulativeRef: BigNumber;
    commitment: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  beginTime(overrides?: CallOverrides): Promise<BigNumber>;

  "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimableToken(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableToken(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimedBalances(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimedBalances(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commitments(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "commitments(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  shareOf(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shareOf(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenBalance(
    overrides?: CallOverrides
  ): Promise<{
    remaining: BigNumber;
    cumulative: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "tokenBalance()"(
    overrides?: CallOverrides
  ): Promise<{
    remaining: BigNumber;
    cumulative: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  totalCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCommitment()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBeneficiary(
    oldBeneficiary: string,
    newBeneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBeneficiary(address,address)"(
    oldBeneficiary: string,
    newBeneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBeneficiaryBySignature(
    oldBeneficiary: string,
    newBeneficiary: string,
    nonce: BigNumberish,
    expiration: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    oldBeneficiary: string,
    newBeneficiary: string,
    nonce: BigNumberish,
    expiration: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    UPDATE_BENEFICIARY_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "UPDATE_BENEFICIARY_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      claimed: BigNumber;
      cumulativeRef: BigNumber;
      commitment: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "accounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      claimed: BigNumber;
      cumulativeRef: BigNumber;
      commitment: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    claimableToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableToken(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedBalances(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedBalances(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitments(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "commitments(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    shareOf(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shareOf(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      cumulative: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "tokenBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      cumulative: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    totalCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCommitment()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBeneficiary(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBeneficiary(address,address)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBeneficiaryBySignature(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddBeneficiaries(beneficiaries: null, amounts: null): EventFilter;

    Claim(beneficiary: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    UpdateBeneficiary(
      oldBeneficiary: string | null,
      newBeneficiary: string | null
    ): EventFilter;
  };

  estimateGas: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "SATORI_TOKEN_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_BENEFICIARY_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "UPDATE_BENEFICIARY_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "accounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    claimableToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableToken(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimedBalances(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedBalances(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitments(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "commitments(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    shareOf(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shareOf(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCommitment()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateBeneficiary(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBeneficiary(address,address)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateBeneficiaryBySignature(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SATORI_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SATORI_TOKEN_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_BENEFICIARY_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UPDATE_BENEFICIARY_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beginTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimableToken(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableToken(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedBalances(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimedBalances(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitments(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "commitments(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    shareOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareOf(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCommitment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalCommitment()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateBeneficiary(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBeneficiary(address,address)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateBeneficiaryBySignature(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBeneficiaryBySignature(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      oldBeneficiary: string,
      newBeneficiary: string,
      nonce: BigNumberish,
      expiration: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
