/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MerkleRedeemInterface extends ethers.utils.Interface {
  functions: {
    "claimEpoch(uint256,uint256,bytes32[])": FunctionFragment;
    "claimEpochs(tuple[])": FunctionFragment;
    "claimStatus(address,uint256,uint256)": FunctionFragment;
    "claimed(uint256,address)": FunctionFragment;
    "epochMerkleRoots(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "merkleRoots(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seedAllocations(uint256,bytes32,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyClaim(address,uint256,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimEpoch",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEpochs",
    values: [
      { epoch: BigNumberish; amount: BigNumberish; merkleProof: BytesLike[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStatus",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "epochMerkleRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seedAllocations",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "claimEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimReward(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SeedAllocations(uint256,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeedAllocations"): EventFragment;
}

export class MerkleRedeem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MerkleRedeemInterface;

  functions: {
    claimEpoch(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimEpoch(uint256,uint256,bytes32[])"(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimEpochs(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimEpochs(tuple[])"(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimStatus(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean[];
    }>;

    "claimStatus(address,uint256,uint256)"(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean[];
    }>;

    claimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "claimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    epochMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "epochMerkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      token_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      token_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    merkleRoots(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "merkleRoots(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    seedAllocations(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "seedAllocations(uint256,bytes32,uint256)"(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyClaim(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      valid: boolean;
      0: boolean;
    }>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      valid: boolean;
      0: boolean;
    }>;
  };

  claimEpoch(
    epoch: BigNumberish,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimEpoch(uint256,uint256,bytes32[])"(
    epoch: BigNumberish,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimEpochs(
    claims: {
      epoch: BigNumberish;
      amount: BigNumberish;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimEpochs(tuple[])"(
    claims: {
      epoch: BigNumberish;
      amount: BigNumberish;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimStatus(
    account: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "claimStatus(address,uint256,uint256)"(
    account: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  claimed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimed(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  epochMerkleRoots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "epochMerkleRoots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    token_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    token_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  merkleRoots(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "merkleRoots(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  seedAllocations(
    epoch: BigNumberish,
    merkleRoot: BytesLike,
    totalAllocation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "seedAllocations(uint256,bytes32,uint256)"(
    epoch: BigNumberish,
    merkleRoot: BytesLike,
    totalAllocation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyClaim(
    recipient: string,
    epoch: BigNumberish,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyClaim(address,uint256,uint256,bytes32[])"(
    recipient: string,
    epoch: BigNumberish,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    claimEpoch(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimEpoch(uint256,uint256,bytes32[])"(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimEpochs(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimEpochs(tuple[])"(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimStatus(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "claimStatus(address,uint256,uint256)"(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    claimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "epochMerkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(token_: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      token_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    merkleRoots(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "merkleRoots(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    seedAllocations(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "seedAllocations(uint256,bytes32,uint256)"(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ClaimReward(recipient: null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SeedAllocations(
      epoch: BigNumberish | null,
      merkleRoot: null,
      totalAllocation: null
    ): EventFilter;
  };

  estimateGas: {
    claimEpoch(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimEpoch(uint256,uint256,bytes32[])"(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimEpochs(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimEpochs(tuple[])"(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimStatus(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimStatus(address,uint256,uint256)"(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochMerkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(token_: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      token_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    merkleRoots(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleRoots(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    seedAllocations(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "seedAllocations(uint256,bytes32,uint256)"(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyClaim(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimEpoch(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimEpoch(uint256,uint256,bytes32[])"(
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimEpochs(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimEpochs(tuple[])"(
      claims: {
        epoch: BigNumberish;
        amount: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimStatus(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimStatus(address,uint256,uint256)"(
      account: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochMerkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      token_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      token_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    merkleRoots(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleRoots(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    seedAllocations(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "seedAllocations(uint256,bytes32,uint256)"(
      epoch: BigNumberish,
      merkleRoot: BytesLike,
      totalAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      recipient: string,
      epoch: BigNumberish,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
