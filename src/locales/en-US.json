{
    "_type": "English",
    "v2Mainnet": "V2 Mainnet",
    "base": {
        "home": "Home",
        "all": "ALL",
        "option": "Option",
        "indexPrice": "Index Price",
        "info": "Info",
        "consignmentOrders": "Consignment Orders",
        "noData": "No Data",
        "marginBalance": "Margin Balance",
        "gas": "Gas",
        "expire": "Expire",
        "add": "Add",
        "leverage": "Leverage",
        "lev": "Lev.",
        "newTotalLeverage": "New Total Leverage",
        "edit": "Edit",
        "type": "Type",
        "side": "Side",
        "retry": "Retry",
        "positionSide": "Position Side",
        "positions": "Positions",
        "marginRatio": "Margin Ratio",
        "liqPrice": "Liq. Price",
        "clearAll": "Clear all",
        "confirm": "Confirm",
        "remove": "Remove",
        "deposit": "Deposit",
        "selected": "Selected",
        "closedOrders": "Closed Orders",
        "liquidationPrice": "Liquidation Price",
        "withdrawAmount": "Withdraw Amount",
        "operation": "Operation",
        "next": "Next",
        "triggerPrice": "Trigger Price",
        "long": "Long",
        "clear": "Clear",
        "readyToEmergency": "Emergency",
        "short": "Short",
        "status": "Status",
        "failed": "Failed",
        "sharedLiquidity": "Shared Liquidity",
        "save": "Save",
        "liquidity": "Liquidity",
        "submit": "Submit",
        "notionalSize": "Notional Size",
        "oracle": "Oracle",
        "contract": "Contract",
        "gasBalances": "Gas Balances",
        "min": "Min",
        "AMMPrice": "AMM Price",
        "volume": "Volume",
        "max": "Max",
        "continue": "Continue",
        "collateralSymbol": "Collateral Symbol",
        "cancel": "Cancel",
        "perpetual": "Perpetual",
        "noMore": "No More",
        "fee": "Fee",
        "feeRebate": "Fee Rebate",
        "recentTransactions": "Recent Transactions",
        "myReferralLink": "My Referral Link",
        "gwei": "Gwei",
        "closeOnly": "Close Only",
        "pool": "Pool",
        "filled": "Filled",
        "address": "Address",
        "poolAddress": "Pool Address",
        "reduceOnly": "Reduce Only",
        "endDate": "End Date",
        "slippageTolerance": "Slippage Tolerance",
        "balance": "Balance",
        "noResults": "No Results",
        "time": "Time",
        "value": "Value",
        "loading": "Loading",
        "amount": "Amount",
        "projected": "Projected",
        "inverse": "Inverse",
        "total": "Total",
        "limitPrice": "Limit Price",
        "collateral": "Collateral",
        "depositAmount": "Deposit Amount",
        "position": "Position",
        "collateralAmount": "Collateral Amount",
        "price": "Price",
        "estPrice": "Est. Liquidation Price",
        "actPrice": "Act. Liquidation Price",
        "startDate": "Start Date",
        "action": "Action",
        "custom": "Custom",
        "openOrders": "Open Orders",
        "approve": "Approve",
        "now": "Now",
        "pnl": "PNL",
        "marketClose": "Market Close",
        "marginRemove": "Remove margin",
        "freeCollateral": "Free Collateral",
        "perpetuals": "Perpetuals",
        "availableMargin": "Available Margin",
        "totalCollateral": "Total Collateral",
        "size": "Size",
        "calculating": "Calculating",
        "clearing": "Clearing",
        "created": "Created",
        "withdraw": "Withdraw",
        "positionSize": "Position Size",
        "vanilla": "Vanilla",
        "cancelAll": "Cancel All",
        "tradeHistory": "Trade History",
        "margin": "Margin",
        "createPerpetual": "Create Perpetual",
        "setContractDisplay": "Set Contract Display",
        "createProposal": "Create Proposal",
        "createTunableOracle": "Create Tunable Oracle",
        "walletBalance": "Wallet Balance",
        "l2walletBalance": "L2 Wallet Balance",
        "l1walletBalance": "L1 Wallet Balance",
        "maxRemovable": "Max Removable",
        "operator": "Operator",
        "insuranceFund": "Insurance Fund",
        "underlyingAssets": "Underlying Assets",
        "empty": "Empty",
        "donate": "Donate",
        "trade": "Trade",
        "penalty": "Penalty",
        "account": "Account",
        "liquidate": "Liquidate",
        "takeOver": "Take Over",
        "uses": "",
        "executed": "Executed",
        "canceled": "Canceled",
        "canceledAmount": "Canceled Amount",
        "true": "True",
        "false": "False",
        "wallet": "Wallet",
        "noRewardsYet": "No rewards yet",
        "claim": "Claim",
        "claimAll": "Claim All",
        "claimSATORI": "Claim SATORI",
        "dao": "DAO",
        "votes": "Votes",
        "step": "Step",
        "before": "Before",
        "after": "After",
        "authorize": "Authorize",
        "modify": "Modify",
        "pending": "Pending",
        "quote": "Quote",
        "createPool": "Create Pool",
        "createOracle": "Create Oracle",
        "submitToBlockchain": "Submit to Blockchain",
        "editConfiguration": "Edit Configuration",
        "seeMore": "see more",
        "back": "back",
        "delete": "Delete",
        "share": "Share",
        "mining": "Mining",
        "farm": "Farm",
        "APY": "APY",
        "stake": "Stake",
        "unstake": "Unstake",
        "lpToken": "LP Token",
        "countdown": "Countdown",
        "disconnect": "Disconnect",
        "change": "Change",
        "copy": "Copy",
        "copied": "Copied!",
        "view": "View",
        "copyAddress": "Copy Address",
        "viewOnExplorer": "View on Explorer",
        "copySuccess": "Copy Success",
        "setting": "Setting",
        "brokerGas": "Broker Gas",
        "changeMargin": "Change Margin",
        "changeMarginAndLeverage": "Change Margin / Lev.",
        "day": "Day",
        "hour": "Hour",
        "market": "Market",
        "history": "History",
        "expired": "expired",
        "staked": "Staked",
        "subscribe": "Subscribe",
        "locked": "Locked",
        "claimable": "Claimable",
        "certified": "Certified",
        "uncertified": "Uncertified",
        "close": "Close",
        "stats": "Stats",
        "token": "Token",
        "delegate": "Delegate",
        "paid": "Paid",
        "unpaid": "Unpaid",
        "perpetualContract": "Perpetual Contract",
        "perpetualContracts": "Perpetual Contracts",
        "preview": "Preview",
        "available": "Available",
        "cost": "Cost",
        "isolated": "Isolated",
        "maximumLeverage": "Maximum Leverage",
        "changeLeverage": "Change Leverage",
        "addRemoveMargin": "Add / Remove Margin",
        "bid": "Bid",
        "bidAmount": "Bid Amount ({tokenName})",
        "ask": "Ask",
        "amountAsk": "Amount ({tokenName}) Ask",
        "AMMDepth": "AMM Depth",
        "marketHistory": "Market History",
        "asset": "Asset",
        "connectToNetwork": "Connect to {networkName}",
        "priceImpact": "Price Impact",
        "anyway": "Anyway",
        "introduction": "Introduction",
        "index": "Index",
        "SP500Link": "https://support.mcdex.io/hc/en-us/articles/4404919121945-Introduction-of-SP500",
        "DPILink": "https://support.mcdex.io/hc/en-us/articles/4404919162521-Introduction-of-DPI",
        "transactionMiningTutorial": "https://support.mcdex.io/hc/en-us/articles/4402964655385-SATORI-3-0-Transaction-Mining-Tutorial",
        "liquidityMiningTutorial": "https://support.mcdex.io/hc/en-us/articles/1500006907002-SATORI-V3-Testnet-Liquidity-Mining-Tutorial",
        "accept": "Accept",
        "mode": "Mode",
        "more": "More",
        "learnMore": "Learn More",
        "tutorial": "Tutorial",
        "participate": "Participate",
        "platform": "Platform",
        "selectNetwork": "Select Network",
        "or": "or",
        "withFineTuner": "With FineTuner",
        "chainlinkWithFineTuner": "Chainlink with FineTuner",
        "volume24H": "Volume 24H",
        "volume/24H": "Volume / 24H",
        "comingSoon": "Coming Soon",
        "coming": "Coming",
        "trades": "Trades",
        "30DApy": "30-Day APY",
        "30dApy": "30d APY",
        "quantity": "Quantity",
        "detail": "Detail",
        "none": "None",
        "currentlyUnknown": "currently unknown",
        "loadMoreEntries": "Load {pageSize} More Entries +",
        "done": "Done"
    },
    "home": {
        "change24h": "Change / 24H",
        "volume24H": "Volume / 24H",
        "searchPlaceholder": "Search By Perpetual Name / Perpetual Symbol",
        "totalPerpetual": "Total Perpetual",
        "1d": "1D",
        "1w": "1W",
        "1m": "1M",
        "all": "All",
        "tvl": "TVL",
        "totalVolume": "Total Volume",
        "emergencyPrompt": "This perpetual contract is in emergency.",
        "clearedPrompt": "The perpetual contract has been cleared.",
        "wrongNetworkPrompt": "Please switch network to {network}",
        "toPerpetualContracts": "Top Perpetual Contracts",
        "allNetworksStats": "All Networks Stats"
    },
    "tradeCharts": {
        "8hRate": "8H Rate",
        "annualized": "Annualized",
        "current8HRate": "Current 8H Rate",
        "currentAnnualized": "Current Annualized"
    },
    "contractInfo": {
        "openInterest": "Open Interest",
        "openInterestPrompt": "Total size of positions per side.",
        "modifyRiskParams": {
            "title": "Operator modifiable parameters",
            "riskParams": "Risk Parameters",
            "contractParams": "Contract parameters"
        },
        "previewAMMDepth": {
            "title": "AMM Depth Preview",
            "ammPosition": "AMM Position"
        },
        "riskParams": {
            "previewTip": "Please finish step 1, 2 and 3 to preview the AMM depth.",
            "config": "Risk Parameter Configuration",
            "closeSlippage": "β<sub>2</sub>(Close Slippage)",
            "maxAMMMaxLeverage": "Max λ(AMM Max Leverage)",
            "minHalfSpread": "Min α(Half Spread)",
            "rangeHalfSpread": "Range α(Half Spread)",
            "minCloseSlippage": "Min β<sub>2</sub>(Close Slippage)",
            "rangeCloseSlippage": "Range β<sub>2</sub>(Close Slippage)",
            "minAMMMaxLeverage": "Min λ(AMM Max Leverage)",
            "rangeAMMMaxLeverage": "Range λ(AMM Max Leverage)",
            "halfSpreadPrompt": "Half spread refers to half of the difference between best ask price and best bid price.  We recommend the half spread as the same as the oracle derivation. ex: 0.1%.",
            "minOpenSlippage": "Min β<sub>1/sub>(Open Slippage)",
            "rangeOpenSlippage": "Range β<sub>1</sub>(Open Slippage)",
            "halfSpread": "α(Half Spread)",
            "closeSlippagePrompt": "A larger beta2 increases slippage when close position. We recommend 70% * beta1 according to the volatility of the underlying asset.",
            "openSlippagePrompt": "A larger beta1 increases slippage when open position. We recommend 0.01 ~ 0.7 according to the volatility of the underlying asset. 0.01 means that the slippage is 1% when the AMM position is 1x leverage.",
            "ammMaxLeverage": "λ(AMM Max Leverage)",
            "minPrompt": "The operator can set a min value of the risk parameters and adjust the risk parameters within this range. The operator can initiate the governance process to change the range of the risk parameters.",
            "fundingRateLimit": "Γ(Funding Rate Limit)",
            "ammMaxLeveragePrompt": "Max leverage of AMM's margin account. We recommend 1x.",
            "minFundingRateLimit": "Min Γ(Funding Rate Limit)",
            "maxFundingRateLimit": "Max Γ(Funding Rate Limit)",
            "rangeFundingRateLimit": "Range Γ(Funding Rate Limit)",
            "maxOpenSlippage": "Max β<sub>1</sub>(Open Slippage)",
            "maxPrompt": "The operator can set a max value of the risk parameters and adjust the risk parameters within this range. The operator can initiate the governance process to change the range of the risk parameters.",
            "maxCloseSlippage": "Max β<sub>1</sub>(Close Slippage)",
            "fundingRateLimitPrompt": "Funding rate limit refers to the maximum funding rate of Perpetual. A bigger gamma increases the funding rate. Funding rate is the ratio of position value that every position needs to collect per 8 hours which is a significant component when perpetual swap anchors the spot price. We recommend 0.5% ~ 10% according to the volatility of the underlying asset.",
            "maxHalfSpread": "Max α(Half Spread)",
            "openSlippage": "β<sub>1</sub>(Open Slippage)",
            "closePriceDiscount": "δ(Close Price Discount)",
            "maxClosePriceDiscount": "Max δ(Close Price Discount)",
            "minClosePriceDiscount": "Min δ(Close Price Discount)",
            "rangeClosePriceDiscount": "Range δ(Close Price Discount)",
            "closePriceDiscountPrompt": "Max discount of price when close position. For example, if index price is $100 and δ is 5%, the bid price will not higher than $105 and the ask price will not lower than $95.",
            "baseFundingRate": "γ<sub>b</sub>(Base Funding Rate)",
            "maxBaseFundingRate": "Max γ<sub>b</sub>(Base Funding Rate)",
            "minBaseFundingRate": "Min γ<sub>b</sub>(Base Funding Rate)",
            "rangeBaseFundingRate": "Range γ<sub>b</sub>(Base Funding Rate)",
            "baseFundingRatePrompt": "Base Funding Rate is a risk parameter, which aims to account for the difference in interest rates of the base and quote currencies.",
            "fundingRateFactor": "γ(Funding Rate Factor)",
            "maxFundingRateFactor": "Max γ(Funding Rate Factor)",
            "minFundingRateFactor": "Min γ(Funding Rate Factor)",
            "rangeFundingRateFactor": "Range γ(Funding Rate Factor)",
            "fundingRateFactorPrompt": "Funding rate factor refers to the coefficient of funding rate. A bigger gamma increases the funding rate. Funding rate is the ratio of position value that every position needs to collect per 8 hours which is a significant component when perpetual swap anchors the spot price. We recommend 0.5% ~ 10% according to the volatility of the underlying asset."
        },
        "contractParams": {
            "tradeFeeRate": "Total Trade Fee",
            "leverageAtLiquidation": "Leverage At Liquidation",
            "operatorFeeRate": "Operator Fee Rate",
            "lpFeeRate": "LP Fee Rate",
            "maintenanceMarginRatePrompt": "Determines the leverage when position is liquidated; Smaller than the initial margin rate; <br/> \n Alterable by LP Governance (only decrements are allowed)",
            "vaultFeeRate": "Treasury Fee Rate",
            "insuranceFundCapPrompt": "The upper limit of the insurance fund",
            "insuranceFundRatePrompt": "The ratio of penalty that goes to the insurance fund; <br/> \n Alterable by LP Governance",
            "vaultFeeRatePrompt": "The rate of trading fee that enters the DAO Treasury; <br/> \n Alterable by SATORI DAO Governance",
            "insuranceFundCap": "Insurance Fund Cap",
            "operatorFeeRatePrompt": "The rate of trading fee that goes to operator; <br/> \n Less than 1%; Alterable by LP Governance",
            "insuranceFundRate": "Insurance Fund Rate",
            "referrerRebateRate": "Referral Rebate Rate",
            "maintenanceMarginRate": "Maintenance Margin Rate",
            "liquidationPenaltyRatePrompt": "Liquidation Penalty Rate (1.015%) = Penalty Rate (1%) + Treasury Fee (0.015%)<br/>Liquidation Penalty = Position Value ⨉ Liquidation Penalty Rate (1.015%)<br/>Liquidation penalty rate will be lower than the maintenance margin rate; the rate is alterable by LP Governance.",
            "initialMarginRate": "Initial Margin Rate",
            "liquidationPenaltyRate": "Liquidation Penalty Rate",
            "referrerRebatePrompt": "The rate of referral fee from the Operator Fee and LP Fee; <br/> \n Alterable by LP Governance",
            "maxLeverage": "Max leverage",
            "initialMarginRatePrompt": "= 1 / max leverage; <br/> \n The parameter can be altered by LP Governance (only decrements)",
            "lpFeeRatePrompt": "The rate of trading fee that goes to LP; <br/> \n Less than 1%; Alterable by LP Governance",
            "keeperGasReward": "Keeper Gas Reward",
            "maxLeveragePrompt": "Determines the max leverage when open position; <br/> \n The parameter can be altered by LP Governance (only increments)",
            "keeperGasRewardPrompt": "When keeper executes liquidation or reviews accounts during settlement, <br/> \n they receive a fixed amount of reward to pay for Gas; Alterable by LP Governance, <br/> \n it is recommended to set the number of the collateral token worth $15",
            "keeperGasRewardTip": "Please fill up this field. It is recommended to provide $20 worth of tokens.",
            "fundingInterval": "Funding Interval",
            "maxOpenInterestRate": "Max Open Interest Rate",
            "maxOpenInterestRatePrompt": "The ratio between maximum open interest to liquidity pool margin.",
            "defaultTargetLeverage": "Default Leverage",
            "defaultTargetLeveragePrompt": "The default leverage (integer) is between 1x and the max leverage",
            "display": "Display",
            "displayPrompt": "Vanilla, price is displayed as {collateral},PNL = (mark price - entry price) * amount({underlying}) <br/> \n Inverse, price is displayed as {underlying},PNL = (entry price - mark price) * amount({collateral})"
        }
    },
    "pool": {
        "poolInfo": {
            "runPoolPrompt": "You need to create at least one perpetual contract for the pool before you can run the pool.",
            "perpetuals": {
                "perpetual": "Perpetual",
                "status": "Status",
                "ammSide": "AMM Side",
                "ammPosition": "AMM Position Size",
                "volume24H": "Volume / 24H",
                "volume7D": "Volume / 7D",
                "ammUtility": "AMM Utility",
                "entryPrice": "AMM Entry Price"
            },
            "addRemove": "Add & Remove",
            "poolInfoTable": {
                "miningApy": "Mining APY",
                "shareLiquidity": "Liquidity",
                "collateral": "Collateral",
                "operator": "Operator",
                "release": "Mining / 24H",
                "address": "Address",
                "operatorFee": "Operator Fee",
                "netAssetValue": "Net Asset Value",
                "lpApy": "LP APY / 7D",
                "totalVolume": "Volume / 24H",
                "checkInTimeout": "Check-in Timeout",
                "modifyPrompt": "The perpetual contract is not in normal operation, so this operation cannot be performed."
            },
            "transfer": "Transfer",
            "takerOverOperator": "Taker Over Operator",
            "poolInfo": "Pool Info",
            "perpetualInfo": "Perpetual Info",
            "modifyPerpDisplay": "Current display: {beforeState}, change to {afterState} display.",
            "modifyDisplay": "Modify Display",
            "governance": "Governance",
            "poolChart": "Pool Chart",
            "poolPerpetuals": "Pool Perpetuals",
            "runPool": "Run Pool",
            "lastCheckIn": "Last Check-in",
            "checkIn": "Check In",
            "miningReward": "Mining Reward",
            "liquidityHistory": {
                "time": "Time",
                "type": "Type",
                "collateral": "Collateral",
                "account": "Account",
                "addLiquidity": "Add Liquidity",
                "removeLiquidity": "Remove Liquidity"
            },
            "governanceList": {
                "delegation": "Delegation",
                "createProposal": "Create Proposal"
            },
            "donateInsuranceFund": "Donate Insurance Fund",
            "insuranceFundPrompt": "Insurance fund is used to cover liquidation loss. There are two insurance funds. The first fund comes from donation and the second fund comes from the liquidation penalty. If the second fund reaches a max size, liquidation penalty will be transferred to LP.<br><br>1. First fund: {donate} {collateralUnit}<br>2. Second fund: {fund} {collateralUnit}<br>Second Fund Cap: {cap} {collateralUnit}",
            "perpetualChart": "Perpetual Chart",
            "perpetualContracts": "Perpetual Contracts",
            "perpetualParams": "Perpetual Parameters",
            "AMMRiskParams": "AMM Risk Parameters",
            "recentTransactions": "Recent Transactions",
            "perpetualNameChangePrompt": "The perpetual contract is not in normal operation, so this operation cannot be performed."
        },
        "donatedAmount": "Amount",
        "mining": "Mining(Stake)",
        "addLiquidityRiskDialog": {
            "title": "Risk Disclaimer",
            "warningText": "Trade at your own risk",
            "riskWarningText": "Adding liquidity to the AMM is not risk-free; users can suffer losses when drawbacks happen. For a detailed explanation, please review <a href='https://support.mcdex.io/hc/en-us/articles/4406128082201-LP-s-revenue-and-risk' target='_blank'>LP Revenue and Risks</a>. Please be careful, and make sure you are fully aware tha you might suffer losses from adding liquidity.",
            "understand": "I understand the risks."
        },
        "poolList": {
            "lpApy": "LP APY",
            "all": "All",
            "mine": "Mine",
            "showMine": "Show Mine",
            "tradingMiningPools": "Trading Mining Pools",
            "collateral": "Collateral",
            "miningApy": "Mining APY",
            "releaseDay": "Mining / 24H",
            "claimable": "Claimable",
            "sharedLiquidity": "Liquidity",
            "poolAddress": "Pool Address",
            "createPerpetual": "Create Perpetual",
            "searchTip": "Search Pool Address / Perpetual Symbol / Perpetual Name",
            "mobileSearchTip": "Search Collateral / Pool Address",
            "onlyMiningPool": "Only Mining Pool",
            "myShare": "My Share",
            "perpetuals": "Perpetuals",
            "perpetualContracts": "Perpetual Contracts",
            "volume": "Volume / 24H",
            "liquidity": "Liquidity",
            "liquidation": "Liquidation",
            "miningIconToolTip": "Add liquidity to this pool to earn fake SATORI.",
            "myPooled": "My Pooled",
            "collateralPool": "Collateral / Pool",
            "poolName": "Pool Name",
            "apyPrompt": "Total APY = LP APY + Mining APY. <br/> LP APY is calculated from the latest 30-day average."
        },
        "liquidityPage": {
            "addLiquidity": "Add Liquidity",
            "receive": "Receive",
            "removePenalty": "Remove Cost",
            "removePenaltyPrompt": "AMM charges withdrawal fees to the remaining liquidity providers. Normally, the fee is a small percentage of your withdrawal. The fee increases when the pool suffers from insufficient liquidity.",
            "liquidityPool": "Liquidity Pool",
            "lpToken": "LP Token",
            "stakeMining": "Stake LP Token for Mining",
            "myCollateralInPool": "Collateral in the Pool",
            "myLpToken": "LP Token",
            "removeLiquidity": "Remove Liquidity",
            "unlockTime": "Unlock Time",
            "lockedByVoting": "Locked by Voting",
            "withdrawSettlePrompt": "One or more perpetual contract in this pool is in emergency, part of your liquidity cannot be removed at this point.",
            "myShareReward": "My Share & Reward",
            "myShare": "My Share",
            "pooled": "Pooled",
            "claimable": "Claimable",
            "poolDetail": "Pool Detail",
            "addLiqPerpetualErrorPrompt": "An error has occurred, the pool is not available for adding liquidity.",
            "addLiqNotRunningPrompt": "The operator hasn't ran the contract yet, not available for adding liquidity.",
            "removeLiqPerpetualErrorPrompt": "An error has occurred, not available for removing liquidity.",
            "removeLiqNotRunningPrompt": "The operator hasn't ran the contract yet, not available for removing liquidity.",
            "removeLiqLPLockedPrompt": "The LP token is locked due to the recent voting activity, not available for removing liquidity.",
            "maxRemoveShare": "Insufficient liquidity for this pool. Max available: ",
            "youShare": "Your Share",
            "youPooled": "Your Pooled",
            "lpTokensToMint": "LP Tokens to Mint",
            "removalSlippage": "Removal Slippage",
            "removalSlippagePrompt": "AMM charges withdrawal fees to the remaining liquidity providers. Normally, the fee is a small percentage of your withdrawal. The fee increases when the pool suffers from insufficient liquidity.",
            "youWillReceive": "You Will Receive",
            "claimableRewards": "Claimable Rewards",
            "liquidityLockTime": "Liquidity Lock Time",
            "liquidityUnlockTime": "Liquidity Unlock Time",
            "liquidityLpLocked": "Liquidity Locked LP Token",
            "removeLiquidityLockPrompt": "Your liquidity is currently locked, and you can’t remove liquidity until {time}.",
            "lockTime": "lock time",
            "lockTimePrompt": "The lock time is calculated based on the block generation time of {number} L1 blocks. <br/><br/>1 L1 block generation time = {time}<br/><br/>If you add liquidity multiple times, the lock time will adjust based on your latest deposit.",
            "lockTimeDetail": "After adding liquidity, there will be a {lockTime} on your LP tokens. No transfer nor liquidity removal can be processed for the LP tokens before the unlock time.",
            "dialog": {
                "title": "{symbol} Pool Liquidity",
                "poolInfo": "Pool Info",
                "totalLiquidity": "Total Liquidity",
                "selfInfo": "Your Liquidity & Rewards",
                "netAssetValue": "Net Asset Value"
            }
        },
        "lpTokenAmount": "LP Token Amount",
        "stakeLpTokenAmount": "Stake LP Token Amount",
        "walletBalance": "Wallet Balance",
        "info": "Information",
        "liquidity": "Add / Remove Liquidity",
        "balance": "Balance",
        "shareOfPool": "Share of Pool",
        "poolPerps": "Pool's Perpetual",
        "withdrawOperatorFee": {
            "title": "Withdraw Operator Fee",
            "operatorFeeBalance": "Operator Fee Balance"
        },
        "chart": {
            "sharedLiquidity": "Liquidity",
            "totalVolume": "Total Volume",
            "netAssetValue": "Net Asset Value",
            "nav": "NAV",
            "price": "Price",
            "volume": "Volume",
            "all": "All",
            "1d": "1D",
            "1w": "1W",
            "1m": "1M"
        },
        "transferOperator": {
            "title": "Transfer Operator",
            "prompt": "This operation is irreversible. Please be careful.",
            "transferAddress": "Transfer Address",
            "transfer": "Transfer"
        },
        "myLiquidity": "My Liquidity",
        "myMining": "My Mining(Stake)",
        "liquidationPage": {
            "unsafePosition": "Unsafe Position",
            "trader": "Trader",
            "perpetual": "Perpetual",
            "side": "Side",
            "size": "Size",
            "MarkPrice": "Mark Price",
            "notionalSize": "NotionalSize",
            "liquidationPenalty": "Liquidation Penalty",
            "keeperGasReward": "Keeper Gas Reward",
            "operation": "Operation",
            "operationTip": "To “liquidate” is to transfer the liquidated position to AMM, and the user will receive a fixed amount of “keeper gas reward”. To “take over” means that the user can own part of or all of the liquidated position and receive the corresponding amount of “liquidation penalty”.",
            "takeOver": "TakeOver",
            "liquidate": "Liquidate"
        },
        "liquidationTakeOver": {
            "title": "Take over of {name} position",
            "liquidationPosition": "Liquidation Position",
            "myPosition": "My Position",
            "availableCollateral": "Available Collateral",
            "estimatedLiquidationPrice": "Estimated Liquidation Price"
        },
        "poolProposal": {
            "isConnectedTip": "Please connect wallet.",
            "selectProposalType": "Select Proposal Type",
            "modifyPerpetualParams": "Modify Perpetual Parameters",
            "settlePerpetual": "Settle Perpetual",
            "changePerpetualCreationPrivilege": "Change perpetual creation privilege",
            "changeInsuranceFundCap": "Change Insurance Fund Cap",
            "modifyOracle": "Modify Oracle",
            "appointNewOperator": "Appoint New Operator",
            "myVotes": "myVotes",
            "proxyVotes": "Proxy Votes",
            "delegatingVotesTo": "Delegating Votes To",
            "proposalThreshold": "Proposal Threshold {value} Votes",
            "onlyOperator": "Only Operator",
            "perpetual": "Perpetual",
            "select": "Select",
            "onlyOperatorCreateProposalTip": "Only operator can initiate a proposal.",
            "hasActiveProposalTip": "There is still an unresolved proposal regarding this perpetual Contract. Please try again when there is not ongoing voting.",
            "operatorHasExpiredTip": "The operator for this pool has expired, please make sure there are enough votes to create a proposal.",
            "liquidityTip": "Liquidity cannot be removed until voting is complete.",
            "perpParamsProposal": {
                "step01": "Select Perpetual",
                "step02": "Modify Perpetual Parameters & AMM Risk Parameters",
                "parameters": "Parameters",
                "before": "Before",
                "after": "After",
                "contractParameters": "Contract Parameters",
                "ammRiskParameters": "AMM Risk Parameters",
                "proposalTitle": "Modify {symbol} Perpetual Parameters",
                "modifyErrorTip": "Please modify the parameters.",
                "selectContractPrompt": "The operation is available only if the user is an operator and the perpetual contract is normal.",
                "hasEnoughVotesTip": "Insufficient votes",
                "alreadyHaveOperator": "The perpetual contract administrator already exists",
                "contractStatus": "The perpetual contract is not in normal status",
                "outstandingProposal": "The perpetual contract has outstanding proposals",
                "insufficientVotes": "Insufficient number of votes"
            },
            "settlePerpProposal": {
                "step01": "Select Perpetual",
                "proposalTitle": "Settle {symbol} Perpetual"
            },
            "modifyPerpOracleProposal": {
                "step01": "Select Perpetual",
                "proposalTitle": "Modify {symbol} Perpetual Oracle",
                "step02": "Modify Oracle"
            },
            "changePerpPrivilegeProposal": {
                "step01": "Allow / not allow operator to add perpetual when pool is running",
                "allow": "Allow",
                "notAllow": "Not Allow",
                "proposalTitle": "{status} operator to add perpetual when pool is running"
            },
            "changeInsuranceFundCapProposal": {
                "step01": "Change Insurance Fund Cap",
                "insuranceFundCapError": "Must be larger than {value}{symbol}",
                "proposalTitle": "Change Insurance Fund Cap"
            },
            "appointOperatorProposal": {
                "step01": "Appoint New Operator",
                "operatorAddress": "Operator Address",
                "proposalTitle": "Appoint New Operator"
            },
            "createNewPerpetualProposal": {
                "proposalTitle": "Create {symbol} Perpetual"
            },
            "changeOracle": {
                "proposalTitle": "Change {symbol} Oracle"
            },
            "unknownProposal": {
                "proposalTitle": "Unknown Proposal Type"
            },
            "upgradeContractProposal": {
                "proposalTitle": "Upgrade Contract"
            }
        }
    },
    "cookie": {
        "privacyPolicy": "Privacy Policy",
        "privacyPolicyUrl": "https://support.mcdex.io/hc/en-us/articles/4402087029913-Privacy-Policy",
        "cookiePolicy": "Cookie Policy",
        "cookiePolicyUrl": "https://support.mcdex.io/hc/en-us/articles/4402098993689-Cookie-Policy",
        "policyDetail": "We use cookies in order to optimize the site and improve it continuously and to give you the best experience if you use to continue this site or click the accept button."
    },
    "graphBanner": {
        "graphErrorText": "The Graph service is currently out of sync; funding, PNL, order history, APY, AMM positions, stats, and other related info are affected. The service will recover after all blocks are synced.</br>Current progress: {graphBlockNumber} / {currentBlockNumber} blocks are synced",
        "graphErrorBehindText": ", {behindBlock} blocks behind.",
        "notice": "Notice"
    },
    "mcbSale": {
        "roundTitle": "SATORI Series A Community Sale",
        "roundInfo": "Serial A Info",
        "availableSupply": "Available Supply",
        "subscriptionRate": "Subscription Rate",
        "subscriptionEndsIn": "Subscription Ends In",
        "mySubscription": "My Subscription",
        "subscriptionAmount": "Subscription Amount",
        "subscribeAmount": "Subscribe Amount",
        "subscribe": "Subscribe",
        "needToStake": "You need to stake",
        "stakeDoc": "I acknowledge that I fully understand the risks in the <a href='mcdex.io'>follow investment documentations</a>.",
        "releaseRule": "Release Rule",
        "allocation": "Allocation",
        "cost": "Cost",
        "unstakable": "Unstakable",
        "unstakeIn": "Unstake In",
        "unstakeAll": "Unstake All",
        "approveSATORI": "Approve SATORI",
        "approveUSDC": "Approve USDC",
        "stakeSATORIAndUSDC": "Stake SATORI & USDC",
        "auditReport": "The sale smart contract is audited by Certik. <a target='_blank' href='https://mcdex.io'>Audit Report</a>",
        "serial": "SATORI Series A",
        "serial2": "Series A",
        "vested": "Vested",
        "onEthereum": "On Ethereum"
    },
    "governance": {
        "vote": "vote",
        "failed": "Failed",
        "active": "Active",
        "voting": "Voting",
        "succeeded": "Succeeded",
        "proposal": "Proposal",
        "startDate": "Start Date",
        "endDate": "End Date",
        "for": "For",
        "against": "Against",
        "proposer": "Proposer",
        "votes": "Votes",
        "address": "address",
        "proposalHistory": "Proposal History",
        "created": "Created",
        "execute": "Execute",
        "executionDelay": "Execution Delay",
        "queue": "Queue",
        "proposalDetail": "Proposal Detail",
        "timeLock": "Time Lock",
        "executed": "Executed",
        "expired": "Execution Expired",
        "expire": "Expire",
        "undelegated": "Undelegated",
        "totalVotes": "Total Votes",
        "votesThreshold": "Votes Threshold",
        "votingEnds": "Voting ends",
        "proposalNumber": "Proposal Number",
        "title": "Title",
        "endTime": "End Time",
        "votingDialog": {
            "title": "Vote",
            "approveLpToken": "Approve LP Token",
            "stakeLpToken": "Stake LP Token",
            "voteProposal": "Vote Proposal"
        }
    },
    "hintInfos": {
        "positionsAndOrders": {
            "orderAmount": "Number of contracts in an order.",
            "size": "Your position on this instrument.<br/> If positive, you are long, if negative, short.",
            "orderCreatedAt": "Creation time of an order.",
            "orderCanceled": "Number of contracts in an order that have been cancelled. View the order details page for more information.",
            "symbol": "The ticker symbol of the contract this position represents.",
            "liqPrice": "Your position will be liquidated when mark price reaches this price.",
            "orderFillPrice": "Calculated average price of all fills in an order.",
            "orderDetails": "Show all the details of an order including basic information, trades and cancel reasons.",
            "infinityPrompt": "This position has sufficient margin and will not be liquidated.",
            "levPrompt": "This is the current actual leverage of your position<br/>Actual Leverage = Position Value/(Margin - Keeper Gas Reward)<br/><br/>The actual leverage will change as the position value, margin value and PNL change.<br/><br/>You can alter the actual leverage by changing the margin or opening new positions with different leverages under the same perpetual contract.",
            "orderLevPrompt": "The leverage you selected when placing the order",
            "orderStatus": "The status of the order.",
            "entryPrice": "Average executed buy/sell price for your current long/short position.",
            "orderType": "The type of an order.",
            "roe": "The return on equity percentage.",
            "orderFilled": "Number of contracts in an order that have been bought/sold.",
            "orderPrice": "Limit Price. Market orders does not have this value.",
            "positionPnl": "Realized profit and loss (including funding) on this position.",
            "value": "The current notional value of this position.",
            "orderClosedAt": "The time when the order is closed.",
            "funding": "The total amount of funds you have paid / received since the position was opened.",
            "markPrice": "The mark price is the price at which the perpetual contract will be valued during trading hours. This can (temporarily) vary from the actual perpetual market prices to protect against manipulative trading.",
            "margin": "The margin balance of this position. You can decrease/increase the leverage by depositing/withdrawing funds.",
            "unknownValue": "This value is unknown. The graph service is syncing.",
            "marginRatioPrompt": "The lower the Margin Ratio, the lower your liquidation level will be relative to your position size. Your positions will be liquidated once Margin Ratio reaches 100%."
        },
        "recentTrades": {
            "price": "The color indicates the taker's side: green means buy and orange means sell."
        },
        "viewTransaction": "View the transaction on etherscan",
        "statisticsBar": {
            "Volume24h": "The total contracts traded in the past 24 hours in SATORI."
        },
        "claim": {
            "onEthereum": "Please switch to Ethereum MainNet to claim SATORI"
        }
    },
    "statisticsBar": {
        "amountIn24Hours": "24h Volume",
        "accumulatedFundingRate": "Accumulated Funding / 8H",
        "accFundingRate": "Acc. Funding / 8H",
        "accumulatedFundingRatePrompt": "The accumulated funding rate over the past 8 hours. If a trader opens 1 long positions, the accumulated funding fee he/she paid/received during the past 8 hours = accumulated funding rate × current index price × 1."
    },
    "tableTitle": {
        "funding": "Funding",
        "pnl": "PNL",
        "orderCloseTime": "Close Time",
        "fillPrice": "Fill Price",
        "roe": "RoE",
        "type": "Type",
        "quantity": "Quantity",
        "creationTime": "Creation Time",
        "total": "Total",
        "entryPrice": "Entry Price",
        "currentPrice": "Current Price",
        "canceled": "Canceled",
        "sizeNumber": "Size",
        "liqPrice": "Liq. Price",
        "amount": "Amount",
        "symbol": "Symbol",
        "filled": "Filled",
        "markPrice": "Mark Price",
        "side": "Side",
        "time": "Time",
        "status": "Status",
        "details": "Details",
        "price": "Price",
        "operation": "Operation"
    },
    "connectWallet": {
        "requestSignaturePrompt": "Requesting wallet signature, please confirm.",
        "walletHint": {
            "wc": "Trust, imToken wallet etc.",
            "wl": "Coinbase Wallet",
            "metamask": "Chrome extension"
        },
        "confirmConnection2": "Scan QR code with a WalletConnect-compatible wallet",
        "caption": "Connect Wallet",
        "ethereumMainNetwork": "Ethereum Main Network",
        "walletSignature": "Wallet Signature",
        "selectWallet": "Select Wallet",
        "authSuccess": "Signature successfully",
        "authFailed": "Signature failed"
    },
    "status": {
        "fundingRate": "Funding / 8H",
        "indexPrice": "Index Price",
        "indexChange24H": "Index Change / 24H ",
        "indexChange24HPrompt": "Index price change in the past 24 hours",
        "fundingRatePrompt": "The calculated funding rate for this moment. This is the rate that longs will pay shorts. If negative, shorts pay longs.",
        "markPricePrompt": "\n          The mark price is the price at which the perpetual contract will be valued during trading hours. This can (temporarily) vary from the actual perpetual market prices to protect against manipulative trading.",
        "markPrice": "Mark Price",
        "indexPricePrompt": "The spot price index of underlying asset.",
        "intervalFundingPrompt": "The funding rate for the next funding payment. This is the rate that longs will pay shorts. If negative, shorts pay longs.",
        "countdownPrompt": "Countdown to the next funding payment.",
        "maximumLeverage": "The maximum leverage is set by the operator"
    },
    "commonErrors": {
        "insufficientETHBalance": "Insufficient {symbol} balance, unable to pay gas.",
        "enteredWrong": "The parameter entered is wrong, please re-enter",
        "invalidTokenAddress": "Invalid token address",
        "walletError": "Wallet Error",
        "insufficientLiquidityError": "Insufficient liquidity",
        "openInterestExceededError": "Open interest limit exceeded",
        "transactionFailedError": "Transaction Failed",
        "inputError": "Input Error",
        "inputNumberError": "Please enter numbers only",
        "insufficientBalanceError": "Insufficient balance",
        "insufficientAmountError": "Insufficient amount",
        "insufficientGasBalance": "Insufficient gas balance",
        "insufficientTradeGasBalance": "Insufficient broker gas, minimum deposit {amount}{symbol}",
        "insufficientTradeGasBalanceColor": "Insufficient broker gas, minimum ",
        "insufficientTradeGasBalanceDeposit": "deposit",
        "insufficientWalletBalance": "Insufficient wallet balance",
        "insufficientMargin": "Insufficient margin",
        "userCanceledTransaction": "User canceled transaction",
        "inputMinMaxError": "Must between {min} and {max}.",
        "insufficientCollateralAssetsError": "Insufficient collateral assets",
        "insufficientShareAmount": "Insufficient share amount",
        "placeOrderError": "Place Order Error",
        "networkError": "Network Error",
        "authError": "Auth Error",
        "addLiquidityError": "Add Liquidity Error",
        "removeLiquidityError": "Remove Liquidity Error",
        "errorAddress": "Wrong address, please use the correct address",
        "orderExpirationOutOfRangeError": "Expiration out of range. No more than {day} days",
        "beyondMaxLeverageError": "Beyond max leverage {leverage}x",
        "InsufficientWallet": "Insufficient funds in wallet",
        "perpetualWaringPrompt": "This market is created by unknown operators. Anyone can create any market which could come with unexpected risks. Trade at your own risk.",
        "addressError": "The address is incorrect",
        "wrapAmountError": "Insufficient ETH",
        "unwrapAmountError": "Insufficient WETH",
        "leverageRangeError": "Leverage Range: {min}x - {max}x",
        "cannotBeBlank": "Cannot be blank",
        "inputNullError": "Please fill up this field.",
        "exceedMaxUnstakeAmountError": "Max unstake amount {max}",
        "exceedMaxStakeAmountError": "Max stake amount {max}",
        "exceedMaxAmountError": "Max amount {max}",
        "getRelayerDataError": "Failed to get data from The Relayer Server"
    },
    "tableData": {
        "partialFilled": "Partial Filled",
        "cancel": "Cancel",
        "canceled": "Canceled",
        "pending": "Pending",
        "fullyFilled": "Fully Filled"
    },
    "perpetualSettle": {
        "clearedPrice": "Cleared Price:",
        "myPosition": "My Position",
        "settlePrice": "Settle Price",
        "headTitle": "Contract is settled and it is being cleared",
        "clearProgress": "Clear Progress",
        "myMargin": "My Margin",
        "perpetualEmergencyTip": "The perpetual contract is under clearing.",
        "clearIncentives": "Clear incentives",
        "clearTitle": "Clearing",
        "perpetualClosedTip": "The Perpetual has been cleared.",
        "withdrawToWallet": "Withdraw to Wallet",
        "myMarginBalance": "My Margin Balance",
        "emergency": "Emergency",
        "isEmergencyPrompt": "The perpetual contract is under clearing.",
        "isGlobalSettledPrompt": "The perpetual contract is cleared."
    },
    "trade": "Trade",
    "displaySetting": {
        "orderConfirm": "Need order confirmation",
        "title": "Display Setting"
    },
    "orderGasDialog": {
        "title": "Order Gas",
        "orderGasBalance": "Remain Broker Gas"
    },
    "perpetualSearch": {
        "placeholder": "Search by Perpetual Symbol / Perpetual Name",
        "mobilePlaceholder": "Search Perpetual Symbol / Name",
        "uncertifiedMarketPrompt": "This market is created by unknown operators. Anyone can create any market which could come with unexpected risks. Trade at your own risk."
    },
    "orderConfirmDialog": {
        "buy": "Buy / Long",
        "marketOrder": "Market",
        "liqPrice": "Liquidation Price",
        "triggerPrice": "Trigger Price",
        "donShow": "Don't show again.",
        "orderConfirmation": "Order Confirmation",
        "sell": "Sell / Short",
        "limitPrice": "Limit Price",
        "limitOrder": "Limit",
        "stopLimitOrder": "Stop",
        "ammOrderConfirmation": "Trade Against AMM Confirmation",
        "realizePnl": "Est. Realize PNL",
        "realizePnlPrompt": "The estimated realize PNL doesn’t have potential slippage applied; the actual PNL might differ from the estimated realize PNL after the order completes.",
        "tradeConfirmation": "Trade Confirmation",
        "insufficientLiquidityWarning": "Insufficient liquidity for this trade. Max available: {amount} {symbol}"
    },
    "wrongChainDialog": {
        "title": "Wrong Network",
        "connectTip": "Please connect to <span>{networkName}</span>."
    },
    "messageTip": {
        "orderFilled": "Order Filled",
        "orderCreated": "Order Created",
        "error": "Error",
        "orderCanceled": "Order Canceled",
        "orderMatched": "Order Matched",
        "exportFail": "Export Fail",
        "fullyFilled": "Fully Filled"
    },
    "accountPage": {
        "openOrders": "Open Orders",
        "marginBalances": "Margin Balances",
        "marginAccounts": "Margin Accounts"
    },
    "footer": {
        "contactUs": "Contact Us",
        "docs": "Docs",
        "forum": "Forum",
        "about": "About",
        "code": "Code",
        "medium": "Medium",
        "discord": "Discord",
        "telegram": "Telegram",
        "fees": "Fees",
        "mcbAddress": "SATORI Address",
        "language": "Language",
        "mcbTokenLink": "https://etherscan.io/token/0x4e352cf164e64adcbad318c3a1e222e9eba4ce42",
        "claim": "Claim SATORI from Series A"
    },
    "newContract": {
        "selectIndex": "Select Index",
        "poolFee": "Pool Fee",
        "inputAdapterAddress": "Input Adapter Address",
        "inputUnderlyingSymbol": "Input Underlying Symbol",
        "step2": "2. Select Oracle",
        "operatorGuidebook": "Please read the <a href='https://support.mcdex.io/hc/en-us/articles/900007036303-Operator-Guidebook' target='_blank'>Operator Guidebook</a> thoroughly regarding how to create and manage your perpetual contract.",
        "selectOracle": "Select a oracle",
        "poolInitialization": "Initialization",
        "underlyingAsset": "Underlying Asset",
        "customRoute": "Custom Route",
        "inputSymbol": "Input Symbol",
        "step1": "1. Select Shared Liquidity Pool",
        "allowSuperOperator": "When adding a new perpetual in this pool while it's running, I would like to skip the LP voting procedure",
        "newPool": "Create New Pool",
        "step3": "3. Contract Parameters",
        "precision": "Precision",
        "adapter": "Adapter",
        "continueAddPerpetual": "Continue To Add Perpetual",
        "newPoolMessage": "Once the liquidity pool starts running, the perpetual whose liquidity is provided by this liquidity pool starts running as well. From now on, any new perpetual that uses liquidity in the liquidity pool has to go through the voting process by LP before starting to work.",
        "operatorCheckInTip": "Please check in on the info page of the liquidity pool every 7 days.\n",
        "poolRunning": "Running",
        "selectPool": "Select Shared Liquidity Pool",
        "viewProposalDetail": "View Proposal Detail",
        "oracleSearch": "Search a oracle name or address",
        "successProposalMessage": "Congratulations, you have successfully created a proposal for creating perpetual, if the proposal is approved, the perpetual will be automatically created. Select “Continue To Add Perpetual“ to continue to add perpetual, Select \"View Proposal Detail\"to view the proposal to create perpetual.",
        "successTitle": "Successfully Created Perpetual",
        "successMessage": "Congratulations, you have successfully created {symbol} perpetual, select \"Continue To Add Perpetual\" to continue to add perpetual, select \"Run Pool\" to run liquidity pool and perpetual.",
        "exitingPool": "Use Existing Pool",
        "runPool": "Run Pool",
        "index": "Index",
        "successProposalTitle": "Successfully Created Perpetual Proposal",
        "custom": "Custom Oracle",
        "step4": "4. Shared Liquidity Risk Parameters",
        "createNewContract": "Create New Contract",
        "expandUniswap": "Set Oracle TWAP",
        "expandUniswapPromp": "Uniswap v3 stores a list of prices for the TWAP calculator. Longer TWAP time requires more checkpoints.",
        "volatility": "Volatility",
        "invalidAdapterBadAddress": "Invalid oracle adapter: bad contract address",
        "invalidOracleAdapter": "Invalid Oracle Adapter",
        "invalidAdapterMissFunction": "Invalid oracle adapter: missing function \"{function}\"",
        "invalidAdapterZeroPrice": "Invalid oracle adapter: price is 0",
        "invalidAdapterTerminated": "Invalid oracle adapter: service terminated",
        "oracleLinkPrompt": "No oracle available for the underlying asset, please refer to \"<a target=\"_blank\" href=\"https://forum.mcdex.io/t/mcdex-v3-oracle-seek-provide-thread/275\">SATORI V3 Oracle Seek/Provide Thread</a>\" on the SATORI forum. ",
        "registeredOracle": "Registered Oracle",
        "uniswapV3Oracle": "Uniswap V3 Oracle",
        "oracleType": "Oracle Type",
        "oracleRoutes": "Oracle Routes",
        "poolType": "Pool Type",
        "oracleQuoteAsset": "Oracle Quote Asset",
        "inputOracleQuoteAsset": "Input Oracle Quote Asset",
        "indexPriceTWAP": "IndexPrice TWAP",
        "markPriceTWAP": "MarkPrice TWAP",
        "TWAPPlaceholder": "Please enter the number",
        "selectTokenError": "Please select token",
        "selectFeeError": "Please select fee",
        "pathError": "Invalid path",
        "indexPriceTWAPError": "IndexPrice TWAP must be integer",
        "markPriceTWAPError": "Mark price TWAP must be integer and not less than IndexPrice TWAP",
        "exceedMaxLeverageWarning": "High leverage could result in a liquidation risks. Please make your decision carefully.",
        "useUncertifiedOracleTip": "If you want to use an unregistered oracle, please enter the adapter address in the \"custom oracle\".",
        "useUncertifiedOracleTip1": "No oracle available for this underlying asset. If you want to use a custom oracle, please use the “Custom Oracle” tab and enter the adapter address."
    },
    "perpetualStatus": {
        "emergency": "Emergency",
        "initializing": "Initializing",
        "normal": "Normal",
        "cleared": "Cleared",
        "invalid": "Invalid"
    },
    "tradeType": {
        "close": "Close",
        "open": "Open",
        "liquidate": "Liquidate"
    },
    "placeOrder": {
        "trade": "Trade",
        "l2Wallet": "L2 Wallet",
        "l2WalletAndMargin": "L2 Wallet(+Margin)",
        "walletAndMargin": "Wallet(+Margin)",
        "wallet": "Wallet",
        "plusMargin": "(+Margin)",
        "positionWillClose": "Position Will Close",
        "newTotalLeveragePrompt": "Total Leverage = Total Position Value/Total Margin Value<br/><br/>When you have an existing position and open a new one with different leverages under the same perpetual contract, your actual total position leverage will change based on the total position value and margin value.<br/><br/>The total leverage is alterable by changing the margin or opening new positions with different leverages under the same perpetual contract.",
        "marginRatioPrompt": "Margin Ratio = Maintenance Margin / (Margin Balance - KeeperGasReward)<br/> Maintenance Margin = {mmBalance} {symbol} <br/>  Margin Balance = {marginBalance} {symbol} <br/> Your positions will be liquidated once Margin Ratio reaches 100%.",
        "ammPricePrompt": "Market price provided by AMM",
        "availablePrompt": "Available Balance = L2 Wallet Balance - Order Margin",
        "costPrompt": "The margin required to execute this order. Reducing a position does not cost margin.",
        "pricePrompt": "The difference between the market price and your price due to trade size.",
        "feeRebatePrompt": "<span class='rebate-rate'>{rebateRate}%</span> of your transaction fees will be rebated as trading rewards. Rewards will be airdropped daily to your wallet. The SATORI price from the rebate is calculated based on the time-weighted average price (TWAP) on Uniswap from the past 1 hour.",
        "tradePanel": {
            "closeOnly": "Close only",
            "remainingOrderGas": "Remain Broker Gas",
            "closePosition": "Close",
            "depositCollateral": "Deposit Collateral",
            "advancedSetting": "Advanced Setting",
            "close": "Close",
            "minTradeAmount": "Min Trade Amount",
            "tradeAmountErr": "Amount must be less than or equal to {amount} {underlyingAssetSymbol}",
            "minTradeAmountErr": "The amount is less than the min trade amount",
            "targetLeverage": "Target Leverage",
            "InsufficientMarginDepositMsg": "You need to deposit <span class=\"value\">{amount}</span> {collateralSymbol}",
            "InsufficientCollateralDepositMsg": "Insufficient collateral, you need to deposit <span class=\"value\">{amount}</span> {collateralSymbol}.",
            "depositMessage": "Deposit {amount} {collateralSymbol}",
            "triggerPriceBuyTip": "When the index price greater than or equal to the trigger price, the buy order will be executed.",
            "triggerPriceSellTip": "When the index price less than or equal to the trigger price, the sell order will be executed.",
            "inputAmount": "Input Amount.",
            "stopLimitPriceBuyError": "Limit price must be above than trigger price .",
            "stopLimitPriceSellError": "Limit price must be below than trigger price.",
            "marketClosedTip": "The contract is not in its trading hours.",
            "marketAdvancedSettings": "Market Advanced Settings",
            "limitAdvancedSettings": "Limit Advanced Settings",
            "safeMax": "Max Order",
            "safeMaxError": "Maximum {val}%",
            "insufficientLiquidityWarning": "Insufficient liquidity for this trade. Max available: ",
            "maxAvailableAmountWarning": "Insufficient {collateralSymbol} for this trade. Max available: ",
            "closeOnlyMaxAvailableAmountWarning": "The Max amount for this \"Close Only\" trade will be ",
            "subCloseOnlyMaxAvailableAmountWarning": "due to the size of your position.",
            "limitOrderMinAmountWarning": "The amount is less than the min trade account. Min trade amount: ",
            "subLimitOrderMinAmountWarning": "You can update the min trade amount from the Advanced Settings below."
        },
        "orderTypeSelect": {
            "stopLimit": "Stop",
            "market": "Market",
            "limit": "Limit",
            "stopLimitOrder": "Stop Order",
            "marketTrade": "Market Trade",
            "limitOrder": "Limit Order"
        },
        "sideSelector": {
            "buy": "Buy / Long",
            "sell": "Sell / Short"
        },
        "price": {
            "marketPrice": "market price"
        }
    },
    "loading": "Loading...",
    "chart": "Chart",
    "indexChart": "Index Chart",
    "fundingRate": "Funding Rate",
    "header": {
        "defaultLayout": "Default Layout",
        "dark": "Dark",
        "theme": "Theme",
        "layout": "Layout"
    },
    "collateralSearch": {
        "selectPlaceholder": "Select Collateral",
        "placeholder": "Search name or address"
    },
    "connectWalletButton": {
        "connectWalletTitle": "Please connect your wallet.",
        "auth": "Authenticate",
        "authTitle": "Please authorize your wallet.",
        "header": "Connect Wallet",
        "connectWallet": "Connect Wallet"
    },
    "authorizePopper": {
        "hint": "Please authorize on your wallet."
    },
    "positionLiquidated": {
        "collateral": "Collateral",
        "liquidationReward": "Liquidation Reward",
        "takeOverReward": "Take Over Reward",
        "side": "Side",
        "operation": "Operation",
        "markPrice": "Mark Price",
        "position": "Position",
        "contract": "Contract",
        "title": "Position to be Liquidated"
    },
    "perpetualRiskNotice": {
        "riskNotice": "Risk Notice",
        "perpetualContract": "{name} Perpetual Contract",
        "unknownOracle": "Uncertified Oracle",
        "riskNoticeText": "This market is created by unknown operators. Anyone can create any market which could come with unexpected risks. Trade at your own risk!"
    },
    "prohibitionUseNotice": {
        "prohibitNotice": "Notice",
        "riskNoticeFirstText": "1. Please note that both the Arbitrum Network and SATORI are currently in their beta test versions. Any action you take on the platform is strictly at your own risk, please act only under thorough consideration.",
        "riskNoticeSecondText": "2. If you would like to trade on SATORI, please make sure you are not a citizen of the following countries",
        "countries": "Antigua and Barbuda, Algeria, Bangladesh, Bolivia, Belarus, Burundi, Burma (Myanmar), China, Cote D'Ivoire (Ivory Coast), Crimea and Sevastopol, Cuba, Democratic Republic of Congo, Ecuador, Iran, Iraq, Liberia, Libya, Magnitsky, Mali, Morocco, Nepal, North Korea, Somalia, Sudan, Syria, United States, Venezuela, Yemen, Zimbabwe",
        "understand": "I understand"
    },
    "info": "Info",
    "tradeAMM": {
        "settleStatePrompt": "This function is not available during global settlement."
    },
    "retry": "Try Again",
    "connectedWallet": {
        "change": "Change",
        "dialogTitle": "Account",
        "connectedWithWallet": "Connected with {walletName}"
    },
    "changeMarginDialog": {
        "caption": "Change Margin {symbol}"
    },
    "changeLeverageDialog": {
        "caption": "Change Leverage {symbol}"
    },
    "vote": "Vote",
    "orderNotifications": {
        "sell": "Sell",
        "closed": "The order is closed.",
        "buy": "Buy",
        "failed": "The order is failed",
        "filled": "Filled {confirmDelta} of the order \n {side} {amount} {symbol} @{price}.",
        "created": "{side} {amount} {symbol} @{price}.",
        "canceled": "Canceled {canceledDelta} of the order \n {side} {amount} {symbol} @{price}.",
        "matching": "Matched {pendingDelta} of the order \n {side} {amount} {symbol} @{price}."
    },
    "copiedToClipboard": "Copied to clipboard.",
    "recentTrades": "Recent Trades",
    "positionsOrders": "Positions & Orders",
    "transaction": {
        "error": {
            "approve": "Approve failed."
        },
        "approve": "Approve {amount} {token} to {symbol}",
        "deposit": "Deposit {amount} {token} to {symbol}",
        "withdraw": "Withdraw {amount} {token} from {symbol}",
        "buy": "Buy {amount} {symbol} @{price}",
        "sell": "Sell {amount} {symbol} @{price}",
        "addLiquidity": "Add {amount}{token} to {poolId} Liquidity Pool",
        "removeLiquidity": "Remove {amount} LP Token to {poolId} Liquidity Pool",
        "stake": "Stake {amount}{token} to {poolId} Mine Pool",
        "unstake": "Unstake {amount}{token} to {poolId} Mine Pool",
        "reStake": "ReStake",
        "depositGas": "Deposit {amount} {token}",
        "withdrawGas": "Withdraw {amount} {token}",
        "clear": "Clear 1 Account Position to {symbol}",
        "createPool": "Create Pool ({collateral})",
        "createPerpetual": "Create Perpetual {name}",
        "createProposal": "Create Proposal",
        "voteProposal": "Vote Proposal to {index}",
        "executePoolProposalResult": "Execute {index} Proposal Vote Result.",
        "queuePoolProposalResult": "Queue {index} Proposal Vote Result.",
        "delegateVotes": "Delegate to {address}",
        "removeDelegateVotes": "Remove delegate from {address}",
        "donateInsuranceFund": "Donate {amount}{token} to {symbol}",
        "claimOperatorFee": "Withdraw Operator Fee",
        "takerOverOperator": "Taker Over Operator",
        "transferOperator": "Transfer Operator",
        "runPool": "Run Pool ({collateral})",
        "transferApprove": "Approve {amount}{token}",
        "transferL1ToL2": "Transfer L1 Wallet {amount}{token} to L2 Wallet",
        "transferL2Tol1": "Transfer L2 Wallet {amount}{token} to L1 Lockbox",
        "claimToL1": "Claim Lockbox {amount}{token} to L1 Wallet",
        "claimMiningReward": "Claim All Mining Reward",
        "updatePerpetualRiskParams": "Update risk parameter of {symbol}",
        "checkIn": "Check In",
        "faucet": "Get test tokens from the faucet",
        "createOracle": "Create oracle adapter smart contract",
        "createTunableOracle": "Create tunable oracle for external oracle {externalAddress}",
        "subscribeSATORI": "Stake {stakeSATORI} SATORI and {stakeUSDC} USDC to subscribe {amount} SATORI",
        "crowdsaleUnstakeAll": "Unstake {mcbAmount}SATORI and {usdcAmount} USDC",
        "claimSATORI": "Claim {amount} SATORI",
        "claimToken": "Claim {amount} {symbol}",
        "setPerpEmergencyState": "Set Perpetual Emergency State to {symbol}",
        "setTargetLeverage": "Change Leverage to {leverage}X",
        "expandUniswap": "Set Oracle TWAP",
        "setContractDisplay": "Set Contract Display"
    },
    "AMMDepth": "AMM Depth",
    "saveAsCsv": "Save as CSV",
    "preferences": {
        "caption": "Preferences"
    },
    "account": "Account",
    "noRecords": "No Records",
    "priceChart": "Price Chart",
    "tokenImportantDialog": {
        "title": "Token Important",
        "iUnderstand": "I Understand",
        "message": "Anyone can create an ERC20 token on Ethereum with any name, including creating fake versions of existing tokens and tokens that claim to represent projects that do not have a token.\nThis interface can load arbitrary tokens by token addresses. Please take extra caution and do your research when interacting with arbitrary ERC20 tokens.\nIf you purchase an arbitrary token, you may be unable to sell it back."
    },
    "filters": {
        "allMarkets": "All Markets",
        "status": {
            "all": "All",
            "filled": "Filled",
            "partiallyFilled": "Partially Filled",
            "canceled": "Canceled",
            "expired": "Expired"
        }
    },
    "globalNotification": {
        "wrongNetwork": "Error: Unknown network. Please switch to {network}.",
        "nodeServerError": "{chainName} Network is temporarily unavailable. SATORI will resume once {chainName} Network is operational.",
        "wsError": "Network Disconnected! Reconnecting...",
        "readBlockChainError": "Failed to read Ethereum block chain! Retry...",
        "isEmergencyPrompt": "Hello everyone, {contractSymbol} has started global settlement . Transactions and withdrawals are not available at this time. After the settlement is completed, users can withdraw all the remaining margin balance.",
        "isGlobalSettledPrompt": "Hello everyone, {contractSymbol} has completed the global settlement. Now, the user can click the \"Settle\" button to settle and withdraw all remaining margin.",
        "graphServerError": "Failed to get data from the Graph server! Retry...",
        "relayerServerError": "Failed to get data from The Relayer Server! Retry...",
        "marketClosedPrompt": "The market is closed. The underlying asset is not in its trading hours.",
        "poolNotRunPrompt": "The pool of market is not running.",
        "oracleChartServerError": "SATORI chart service error, unable to update index",
        "oracleError": "Oracle Error",
        "ammUnsafePrompt": "The perpetual contract is no longer running. Please click button to enter clearing."
    },
    "errors": {
        "transactionFailedCaption": "Transaction Failed",
        "captionError": "Error",
        "unavailableWallet": "There is no available wallet.",
        "captionCanceled": "Canceled",
        "userCanceled": "You have canceled the operation.",
        "captionSystemError": "System Error",
        "messageFormat": "{message}",
        "unknownError": "Some unknown error occurred.",
        "captionWalletError": "Wallet Error",
        "wrongNetwork": "You are on the wrong Ethereum network. Please switch to {networkName}.",
        "retryButton": "Try Again",
        "captionInsufficientETH": "Insufficient ETH",
        "insufficientETHMessage": "You need at least {minETH} ETH to pay the Ethereum gas fee.",
        "executeTransaction": "Transaction failed on blockchain.",
        "contractErrorCaption": "Contract Execution Error",
        "graphqlErrorCaption": "Graphql Server error",
        "relayerErrorCaption": "Relayer server error",
        "oracleChartErrorCaption": "Oracle chart server error",
        "tradingMiningErrorCaption": "Oracle chart server error",
        "exceedsPriceLimit": "The transaction has failed due to the AMM price change exceeding your slippage tolerance. Please increase your slippage tolerance and try again.",
        "gasPriceTooLow": "Gas price too low",
        "faucet": "Fail to get test tokens from the faucet, please refresh the page to retry later."
    },
    "apiErrors": {
        "apiNetworkError": "Fail to access the server due to network error.",
        "apiResponseStatusError": "Fail to fetch data from the server.",
        "apiResponseFormatError": "Fail to parse the server's response. Please contact us for further help.",
        "apiAuthenticationError": "Fail to fetch data from the server, authentication required.",
        "apiInvalidParameterError": "Fail to fetch data from the server, invalid parameter(s).",
        "apiUnknownError": "Internal server error. Please contact us for help.",
        "apiError_1": "Internal server error.",
        "apiError_2": "Invalid API parameters.",
        "apiError_3": "Bind Error.",
        "apiError_4": "Contract do not exist.",
        "apiError_5": "Invalid price or amount.",
        "apiError_6": "Order id do not exist.",
        "apiError_7": "Bad signature.",
        "apiError_8": "Insufficient available margin.",
        "apiError_9": "Insufficient token allowance",
        "apiError_10": "Validation parameters error.",
        "apiError_11": "Authentication failed.",
        "apiError_12": "API HTTP error. Incorrect URL or parameters.",
        "apiError_13": "Order id do not exist.",
        "apiError_14": "Hit API rate limit.",
        "apiError_15": "Expires must in range: [{begin}, {end}]",
        "apiError_16": "The contract is cleared, forbidden to place orders.",
        "apiError_17": "Cannot create more order.",
        "apiError_18": "Order id exist.",
        "apiError_19": "Invalid Broker Address",
        "apiError_20": "Invalid ChainID.",
        "apiError_21": "Order expired.",
        "apiError_22": "Insufficient broker gas.",
        "apiError_23": "Amount is not right for close only order.",
        "apiError_24": "Address is not in whitelist.",
        "apiError_25": "Invalid order type.",
        "apiError_26": "BrokerFeeLimit set too low.",
        "apiError_99": "You do not have permission to participate in the Alpha test."
    },
    "wallet": {
        "authMessage": "Signing this message proves your ownership of your Ethereum wallet address without sending any privacy information. Sign time: @{currentTime}"
    },
    "login": {
        "login": "LOGIN",
        "title": "SATORI V3 ALPHA TEST",
        "subtitle": "Twitter <a href=\"https://twitter.com/MonteCarloDEX\">@MonteCarloDEX</a> to apply for the test",
        "error": "You do not have permission to participate in the Alpha test."
    },
    "timeRange": {
        "1d": "1 Day",
        "1w": "1 Week",
        "1m": "1 Month",
        "3m": "3 Months"
    },
    "order": {
        "limitOrder": "Limit",
        "stopLimitOrder": "Stop Limit"
    },
    "accountWallet": {
        "title": "Margin Info",
        "panel": {
            "myNetWorth": "My Net Worth",
            "netWorthOnWallet": "Net Worth on Wallet",
            "netWorthOnMcdex": "Net Worth on SATORI"
        },
        "walletDetails": {
            "addToken": "Add Token",
            "assets": "Assets",
            "l1Wallet": "L1 Wallet",
            "l2Wallet": "L2 Wallet",
            "l1Lockbox": "L1 Lockbox",
            "totalAmount": "Total Amount",
            "operation": "Operation",
            "claimWarning": "Switch your wallet to Ethereum mainnet before you can transfer from L1 to L2.",
            "transferWarning": "Switch your wallet to Ethereum mainnet before you can transfer from L2 to L1."
        },
        "walletInfo": {
            "totalValue": "Net Worth on SATORI",
            "totalMarginBalance": "Total Margin Balance",
            "totalMarginBalancePrompt": "The profit and loss from your positions will be applied to the total margin balance.",
            "totalPoolValue": "Total Pooled Value"
        },
        "walletReferralLink": {
            "title": "Referral Link",
            "referralDescription": "Invite friends to trade on SATORI and earn varies. Rebate rate varys in different pools.",
            "totalMarginBalance": "Total Margin Balance",
            "totalPoolValue": "Total Pooled Value"
        },
        "marginAccount": {
            "title": "Margin Account",
            "perpetualContract": "Perpetual Contract",
            "marginBalance": "Margin Balance",
            "side": "Side",
            "positionSize": "Size",
            "notionalSize": "Notional Size",
            "changeMargin": "Change {PerpetualName} Margin",
            "pnl": "PNL"
        },
        "liquidityProvider": {
            "title": "Liquidity Provider",
            "pool": "Pool",
            "lpToken": "LP Token",
            "value": "Value",
            "pooled": "Pooled",
            "share": "Share",
            "apy": "APY"
        },
        "addTokenDialog": {
            "title": "Add Token",
            "tokenContractAddress": "Token contract address",
            "symbol": "Symbol",
            "tokenName": "Token Name",
            "maxTotalSupply": "Max Total Supply",
            "decimals": "Decimals"
        },
        "walletTransfer": {
            "title": "Transfer {tokenName} between {fromSide} & {toSide} wallet",
            "depositAmount": "Deposit Amount",
            "l1Wallet": "L1 Wallet",
            "l2Wallet": "L2 Wallet",
            "transferButton": "Transfer {tokenName} to {toSide} wallet",
            "transferToL1Tip": "Tokens will be transferred to L1 and you will be able to claim tokens in the <span class='light'>Lockbox</span> after {hour} hours",
            "approveArbitrumBridge": "Approve Arbitrum bridge",
            "transferL1ToL2": "Transfer from L1 wallet to L2 wallet"
        }
    },
    "dao": {
        "satoriDao": "SATORI DAO",
        "satoriInfo": "SATORI Info",
        "currentSatoriPrice": "Current SATORI Price",
        "mining": "Mining",
        "governance": "Governance",
        "vaultInfo": "Vault Info",
        "vaultAsset": "Treasury Asset",
        "vaultAssetPrompt": "The asset is used to assist DAO missions; It comes from: share from the fee captured by the ecosystem, newly issued SATORI in the <a href='https://docs.mcdex.io/mcb-tokenomics' target='_blank'>tokenomics</a> and other DAO payments.",
        "vaultAssetPromptMobile": "The asset is used to assist DAO missions; It comes from: share from the fee captured by the ecosystem, newly issued SATORI in the <a href='https://docs.mcdex.io/mcb-tokenomics'>tokenomics</a> and other DAO payments.",
        "assetDetails": "Asset Details",
        "24HCapturedValue": "24H Captured Value",
        "aboutVault": "About Treasury",
        "about": "About",
        "delegate": "Delegate",
        "MCDEXVault": "SATORI Treasury",
        "vaultAssetDetails": "Treasury Asset Details",
        "liquidityMining": "Liquidity Mining",
        "ammLiquidityMining": "AMM Liquidity Mining",
        "ammLiquidityMiningPromp": "Earn LP profits and mining rewards for contributing to SATORI AMM liquidity.",
        "tradingMining": "Trading Mining",
        "tradingMiningPromp": "Earn SATORI for trading; Rewards will be airdropped daily to your wallet.",
        "swapLiquidityMining": "SATORI Liquidity Mining",
        "swapLiquidityMiningPromp": "Earn rewards for contributing to SATORI liquidity",
        "swapLiquidityMiningStakeTip": "Stake LP Earn {miningCoin}",
        "swapLiquidityMiningTip": {
            "default": "Contribute SATORI liquidity on {swapName} and earn rewards.",
            "dodoMcbUsdc": "Contribute SATORI liquidity (50%SATORI/50%USDC) on DODO to earn DODO + SATORI.",
            "dodoMcbUsdcToolTip": "Duration: From Sep 15th to Oct 27th <br/> Rewards: 180 SATORI + 4500 DODO / day",
            "pancakeMcbBnb": "Contribute SATORI liquidity (50%SATORI/50%BNB) on PancakeSwap to earn CAKE.",
            "pancakeMcbBnbToolTip": "1x CAKE rewards for the first 48 hours, and then 0.5x CAKE rewards after that.<br/><br/>Start block: #11793300 (approx. 12pm UTC on October 15th)<br/>Finish block: #13521300 (approx. 12pm UTC on December 14th)",
            "balancerMcbEthToolTip": "Duration: From Nov 1th to Nov 28th <br/> Rewards: 875 SATORI + 1,600 BAL / week",
            "balancerMcbEth": "Contribute SATORI liquidity (60%SATORI/40%ETH) on Balancer to earn BAL + SATORI."
        },
        "startTime": "Start Time",
        "startIn": "Start in",
        "totalAPY": "Total APY",
        "lpAPY": "LP APY",
        "miningAPY": "Mining APY",
        "miningApyPromp": "Rewards Pool: {value} SATORI",
        "totalAPYPromp": "30-Day Total APY = 30-Day LP APY + Mining APY <br/> 30-Day LP APY = (CurrentNAV - NAV from 30 days ago) / 30 * 365 <br/> NAV(Net Asset Value) = PoolMargin / TotalShareToken <br/> LP revenue or loss will be reflected on the NAV, which you can find on the pool info page. ",
        "stayTuned": "Stay Tuned",
        "transactionMiningPool": "Transaction Mining Pool",
        "uniswapMining": "SATORI Uniswap Mining",
        "uniswapMiningPrompt": "Get Uniswap LP Token <br/> <a target='_blank' href='https://app.uniswap.org/#/add/0x4e352cf164e64adcbad318c3a1e222e9eba4ce42/ETH' class='tip-link'>SATORI-ETH</a> <br /><a target='_blank' href='https://app.uniswap.org/#/add/0x4e352cf164e64adcbad318c3a1e222e9eba4ce42/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' class='tip-link'>SATORI-USDC</a>",
        "daoStake": "DAO Stake",
        "mcbStake": "SATORI Stake",
        "stakeEarnSATORI": "Stake {name} Earn SATORI & LP Profits",
        "totalLiquidity": "Total Liquidity",
        "30dAmmMiningApy": "30-Day APY (LP + Mining)",
        "30dAmmMiningTotalApy": "30-Day Total APY",
        "30dAmmMiningLPApy": "30-Day LP APY",
        "30dAmmMiningLPApyPromp": "30-Day LP APY = (CurrentNAV - NAV from 30 days ago) / 30 * 365 <br/><br/> NAV(Net Asset Value) = PoolMargin / TotalShareToken <br/><br/> LP revenue or loss will be reflected on the NAV, which you can find on the pool info page. ",
        "youPooled": "You Pooled",
        "yourTransactionFee24h": "Your Transaction Fee (24H)",
        "claimableRewards": "Claimable Rewards",
        "poolsComingSoon": "More pools coming soon",
        "suggestPool": "Suggest a Pool",
        "miningRewards": "Mining Rewards",
        "youMiningReward24h": "Your Mining Rewards (24H)",
        "totalRewards": "Total Rewards",
        "totalRewardsPrompt": "Your Mining Rewards = <br/> Your Transaction Fee × Mining Rebate Rate <br/> <br/> {amount}SATORI = ${value} <br/>The SATORI price here is calculated based on the time-weighted average price (TWAP) on Uniswap from the past 1 hour.",
        "APYPromp": "Total APY = LP APY + Mining APY LP APY is calculated from the latest 30-day average",
        "daoGovernance": "DAO Governance",
        "circulatingSupply": "Circulating Supply",
        "maxSupplyCap": "Supply Cap",
        "price": "Price",
        "marketCap": "Market Cap",
        "fullyDilutedValuation": "Fully Diluted Valuation",
        "asset": "Asset",
        "details": "Details",
        "totalCapturedValue": "Total Captured Value",
        "capturedValue": "Captured Value / 24H",
        "mintable": "Mintable",
        "mintablePrompt": "It is plausible to mint 1 SATORI for 1 USD captured by the SATORI DAO vault. Also, at least 0.2 SATORI can be issued by one Ethereum block (approximately 1300SATORI/day)",
        "mintableTip": "mintable = base mintable+series A",
        "governanceGuide": "Governance Guide",
        "myVotes": "Your Votes",
        "proxyVotes": "Proxy Votes",
        "delegatingVotesTo": "Delegating Votes To",
        "stakeUnstake": "Stake/Unstake",
        "mcbStaking": "SATORI Staking",
        "delegation": "Delegation",
        "aboutVotes": "About Votes",
        "treasuryAssetDetails": "Treasury Asset Details",
        "aboutVotesPrompt": "Your Votes = Votes based on the number of SATORI in your wallet on Arbitrum + Delegate Votes (you can vote on behalf of other SATORI holders if they choose you as their delegatee)<br/><br/>1 SATORI on Arbitrum = 1 Vote <br/><br/>You can vote on proposals with votes that you hold before the proposal is created.",
        "createProposal": "Create Proposal",
        "poolAddress": "Pool Address",
        "claimable": "Claimable",
        "miningApy": "Mining APY",
        "staking": "Staking",
        "myShare": "My Share",
        "yourShare": "Your Share",
        "stake": "Stake",
        "unstake": "Unstake",
        "receive": "Receive",
        "myShareReward": "My Share & Reward",
        "myStaked": "My Staked",
        "miningRebateRate": "Mining Rebate Rate",
        "miningRebateRatePrompt": "The ratio of the transaction fee that will be refunded.",
        "youPooledPromp": "The asset you pooled = Your LP tokens * Current net asset value",
        "remainingBudget": "Remaining Budget",
        "remainingBudgetPrompt": "The remaining SATORI in the budget for transaction mining.",
        "myMiningFee24h": "My Transaction Fee / 24H",
        "myMiningReward24h": "My Mining Reward / 24H",
        "claimableSATORI": "Claimable SATORI",
        "notYetVoted": "Not yet voted",
        "poolDetail": "Pool Detail",
        "miningTutorial": "Mining Tutorial",
        "assetDetailsDialog": {
            "title": "Treasury Asset Details",
            "asset": "Asset",
            "amount": "Amount"
        },
        "governancePage": {
            "createProposal": "Create Proposal",
            "proposalThreshold": "Proposal Threshold",
            "title": "Title",
            "overview": "Overview",
            "forumLink": "SATORI Forum link(Optional)",
            "action": "Action",
            "addAction": "Add Action",
            "ipfsLink": "IPFS Link",
            "mcdexForumLink": "SATORI Forum link",
            "stakeMcb": "Stake SATORI",
            "myVotePrompt": "Your Votes = Votes based on the number of<br/>SATORI in your wallet on Arbitrum + Delegate<br/>Votes (you can vote on behalf of other SATORI<br/>holders if they choose you as their delegatee)<br/><br/>1 SATORI on Arbitrum = 1 Vote<br/><br/>You can vote on proposals with votes that you<br/>hold before the proposal is created.",
            "start": "Start",
            "end": "End",
            "myxSATORI": "My xSATORI",
            "hasActiveProposalTip": "The last created proposal is not yet finished and a new one cannot be created.",
            "isConnectedTip": "Please connect wallet.",
            "hasEnoughVotesTip": "Currently your number of votes is less than the threshold for creating a proposal, you cannot create a proposal."
        },
        "stakeDialog": {
            "yourStake": "Your Stake",
            "stakePool": "Stake Pool",
            "stakeAmount": "Stake Amount",
            "unstakeAmount": "Unstake Amount",
            "stakedBalance": "Staked Balance",
            "myLpToken": "My LP Token",
            "shareOfPool": "Share of pool",
            "lpToken": "LP Token",
            "stakedLpToken": "Staked LP Token",
            "stakeUniswapDialogTitle": "Stake/Unstake Uniswap {poolName} LP Token",
            "unstakePenalty": "Unstake Penalty",
            "unstakePenaltyPrompt": "To unstake will result in a penalty at a certain percentage determined by DAO governance.",
            "xmcbBalance": "xSATORI Balance",
            "xSATORIToMint": "xSATORI to Mint",
            "mcbToReceive": "SATORI to Receive"
        },
        "actionCard": {
            "actionType": "Action Type",
            "selectActionType": "Select Action Type",
            "transferVaultAssets": "Transfer Vault Assets",
            "transferVaultAssetsDescription": "Send a specific amount of assets (ERC20, Native Token) from Vault to a designated address.",
            "mintSATORI": "Mint SATORI",
            "mintSATORIDescription": "Mint a specific amount of SATORI to an address, while this amount cannot exceed the total number of mintable SATORI.",
            "setLiquidityMiningRate": "Set Liquidity Mining Rate",
            "setLiquidityMiningRateDescription": "Set the SATORI mining rate for Liquidity Mining.",
            "setSATORIUniswapMiningRate": "Set SATORI Uniswap Mining Rate",
            "setSATORIUniswapMiningRateDescription": "Set the SATORI mining rate for SATORI Uniswap Mining.",
            "setSATORIStakingMiningRate": "Set SATORI Staking Mining Rate",
            "setSATORIStakingMiningRateDescription": "Set the Vault Asset mining rate for SATORI Stake Mining.",
            "setMiningSupply": "Set Mining Supply",
            "setMiningSupplyDescription": "Set the mining supply for the mining pool.",
            "customDescription": "Please obey the rules stated in the documentation for developers.",
            "assetsAmount": "Assets Amount",
            "supplyAmount": "Supply Amount",
            "vaultBalance": "Vault Balance",
            "receiveAddress": "Receive Address",
            "mcbAmount": "SATORI Amount",
            "mintableAmount": "Base Mintable",
            "miningPool": "Mining Pool",
            "selectMiningPool": "Select Mining Pool",
            "miningRate": "Mining Rate",
            "miningBlock": "{tokenName}/Block",
            "miningDay": "{tokenName}/Day",
            "to": "To",
            "value": "Value",
            "callData": "CallData",
            "signature": "Signature",
            "transferVaultAssetsDetails": "Transfer Vault Asset {amount} {tokenName} to {receiveAddress}",
            "mintSATORIDetails": "Mint {amount} SATORI to {receiveAddress}",
            "setLiquidityMiningRateDetails": "Set the liquidity mining release rate of pool {poolCollateral} {poolAddress}  to {rate}{miningTokenName} / block",
            "setSATORIUniswapMiningRateDetails": "Set SATORI Mining Rate of {poolName} Uniswap Mining to {rate}{miningTokenName}/Block",
            "setSATORIStakingMiningRateDetails": "Set {miningTokenName} Mining Rate of SATORI Staking Mining to {rate}{miningTokenName}/Block",
            "setMiningSupplyDetails": "Set the liquidity mining supply of {miningPoolName} to {amount}{miningTokenName}",
            "customDetails": "Custom action {signature}",
            "poolType": "Pool Type",
            "pool": "Pool",
            "liquidityMining": "Liquidity Mining",
            "mcbUniswapMining": "SATORI Uniswap Mining",
            "mcbStakingMining": "SATORI Staking Mining",
            "selectPoolType": "Select Pool Type",
            "unrecognizedActionDetails": "Unrecognized Action",
            "repeatedActionMsg": "The action already exists."
        },
        "createProposalSteps": {
            "verifyProposalAction": "Verify proposal action",
            "uploadToIPFS": "Back up the proposal to IPFS",
            "createTheProposal": "Create the proposal"
        }
    },
    "marginChangeRiskDialog": {
        "title": "Margin Requirements Change",
        "message": "In order to improve the overall system security, we have increased the margin requirements: maintenance margin 5%, initial margin 6.66%. The liquidation price of your position has also changed. Please pay attention to this adjustment and control the risk.",
        "tagTip": "Use at your own risk",
        "buttonTip": "I understand the changes and risks"
    },
    "delegationDialog": {
        "title": "Delegation",
        "delegateAddress": "Delegatee Address",
        "remove": "Remove",
        "change": "Change",
        "selfAddressError": "Delegatee must be other address",
        "tip": "You can delegate your voting power to another xSATORI holder."
    },
    "permissionDeniedDialog": {
        "title": "Use at your own risk",
        "description": "SATORI is currently in closed Beta mode; trading and liquidity-related features are only open to verified Beta testers. Additionally, due to potential Arbitrum network instability, you might experience assets loss when network failure happens during trading. Use at your own risk.",
        "subtitle": "I understand the risks.",
        "testerRequest": "Tester Request"
    },
    "countDown": {
        "day": "d",
        "hour": "h",
        "minutes": "m",
        "second": "s"
    },
    "createPerpetual": {
        "minMaxViolation": "The parameter must larger or equal than min value and smaller or equal to max value.",
        "largerZero": "The parameter must be larger than 0.",
        "ammMaxLeverageMustSmallerThanInitialMargin": "AMM max leverage must be smaller than 1 / initial margin rate."
    },
    "cancelDetail": {
        "time": "Time",
        "amount": "Amount",
        "reason": "Reason",
        "title": "Cancel Detail",
        "EXPIRED": "Expired",
        "CANCELED_BY_USER": "Canceled by user",
        "TRANSACTION_FAIL": "Transaction failed",
        "REMAIN_TOO_SMALL": "Remain amount too small",
        "INSUFFICIENT_FUNDS": "Insufficient margin",
        "CONTRACT_SETTLED": "Contract settled",
        "CANCELED_BY_CLOSE_ONLY": "Canceled by close only",
        "GAS_NOT_ENOUGH": "Insufficient gas"
    },
    "wrap": {
        "title": "Wrap / Unwrap",
        "fromWallet": "From",
        "toWallet": "To",
        "wrap": "Wrap",
        "unwrap": "Unwrap"
    },
    "bridge": {
        "title": "Bridge",
        "onEthereum": "On Ethereum",
        "onArbitrum": "On Arbitrum",
        "from": "From",
        "to": "To",
        "ethNetwork": "ETH Network",
        "arbNetwork": "Arbitrum Network",
        "note": "Note: Deposits assets could take up to 1 hour.",
        "transfer": "Transfer",
        "l2TokenAddress": "L2 Token Address",
        "lockbox": "Lockbox",
        "estTimeRemaining": "Est.time remaining",
        "l12Bridge": "L1 → Bridge",
        "bridge2L2": "Bridge → L2",
        "l22Bridge": "L2 → Bridge",
        "arbBridgeTip": "Arbitrum Bridge(Slow,7 days)",
        "arbBridgePromp": "Note: Standard withdrawal will be in a \"pending\" state during a \"challenge period\" roughly (24 hours on Kovan). After that, the funds will be available on layer 1 in your lockbox.",
        "pleaseSwitchTo": "Please switch to {network}"
    },
    "selectToken": {
        "title": "Select a Token",
        "searchPlaceholder": "Search name or paste address"
    },
    "404": {
        "title": "Lost in metaverse",
        "subtitle": "We can’t seem to find the page you are looking for, <br/>but here are some links instead"
    },
    "chainViewer": {
        "arbitrumTokenBridge": "Arbitrum Token Bridge",
        "arbitrumExplorer": "Arbitrum Explorer",
        "bscTokenBridge": "Binance Token Bridge",
        "bscExplorer": "Binance Explorer",
        "optimismTokenBridge": "Optimism Token Bridge",
        "optimismExplorer": "Optimism Explorer",
        "arbitrumTestnet": "Arbitrum Testnet",
        "arbitrumMainnet": "Arbitrum Mainnet",
        "arbitrumOfficialBridge": "Arbitrum Official Bridge",
        "cBridge": "cBridge",
        "anyswap": "Anyswap"
    },
    "shareDialog": {
        "title": "I'm lovin' my maczombie !",
        "saveImage": "Save Image",
        "profitText": "I’m lovin’ my mac zombie! I just made {rate}% profit on MCDEX’s {perpetual} perpetual contracts!",
        "deficitText": "Oops, I just had {rate}% loss on MCDEX’s {perpetual} perpetual contracts..."
    },
    "nodeStatus": {
        "stable": "Stable connection",
        "warning": "Connecting...",
        "failed": "Connection Failed",
        "nodeErrorMessage": "{networkName} blockchain error",
        "graphErrorMessage": "The Graph server error",
        "relayerErrorMessage": "Relayer server error",
        "chartServiceErrorMessage": "Chart service error",
        "wsErrorMessage": "Websocket error",
        "betaMessage": "Arbitrum and SATORI are still in beta mode, trade at your own risk!",
        "bscBetaMessage": "SATORI is still in beta mode, trade at your own risk!",
        "noErrorTip": "All sections functioning",
        "nodeErrorPrompt": "Index price and AMM depth might be out of sync. Sorry for the inconvenience, and please wait for the service to recover.",
        "graphErrorPrompt": "Entry price and pool information might be out of sync. Sorry for the inconvenience, and please wait for the service to recover.",
        "relayerErrorPrompt": "Orders information might be out of sync. Sorry for the inconvenience, and please wait for the service to recover.",
        "priceChartErrorPrompt": "The index chart might be out of sync. Sorry for the inconvenience, and please wait for the service to recover.",
        "wsErrorPrompt": "Open orders status might be out of sync. Sorry for the inconvenience, and please wait for the service to recover."
    },
    "tradingMining": {
        "title": "Multi-Chain Trading Mining (Epoch {id})",
        "title2": "Multi-Chain Trading Mining",
        "titleSubDesc": "Earn SATORI for trading; Rewards will be claimable five days after each epoch ends.",
        "yourEstimatedRewards": "Your Estimated Rewards",
        "estimatedForEpoch": "Estimated for Epoch {id}",
        "epoch": "Epoch {id}",
        "duration": "Duration",
        "low": "low",
        "avgYield": "Avg. Yield",
        "staking": "Staking",
        "boostBy": "Boost by {amount}",
        "estimatedForEpochPromp": "Your estimated rewards are calculated based on your and all traders' trader scores. <br/><br/> Please note this estimated number is for reference only; your final trader scores at the end of the epoch will determine your final rewards",
        "totalRewardsPool": "Total Rewards Pool",
        "totalRewardsPoolPromp": "{value} SATORI will be distributed in this epoch as rewards.",
        "epochCountdown": "Epoch {id} Countdown",
        "claimableRewards": "Claimable Rewards",
        "claimableAllocatedRewards": "Claimable / Allocated Rewards",
        "claimRewardPromp1": "Currently Claimable: <span style=\"color: #00D8E2;\">{v1} SATORI</span> <br/> Allocated Rewards: <span style=\"color: #00D8E2;\">{v2} SATORI</span> <br/>Claimed Rewards: <span style=\"color: #00D8E2;\">{v3} SATORI</span>",
        "claimRewardPromp2": "Allocated Rewards: <span style=\"color: #00D8E2;\">{v1} SATORI</span> <br/>Currently Claimable: <span style=\"color: #00D8E2;\">{v2} SATORI</span> <br/><br/> {v1} SATORI will be claimable after Oct. 23rd 0:00 UTC since rewards are claimable five days after each epoch ends.",
        "yourTradingData": "Your Trading Data",
        "tradingMiningPools": "Trading Mining Pools",
        "epochHistory": "Epoch History",
        "totalFeesPaid": "Total Fees Paid",
        "totalFeesPaidPromp": "The total fees you paid from trading in this epoch. <br/><br/> It can take up to 10 minutes for the data to update.",
        "daoFeePaid": "Fees Paid to DAO",
        "totalAndDaoFeesPaid": "Effective Fee / Total Fee",
        "totalAndDaoFeesPaidPromp": "Total fees paid to DAO in this epoch: ${value} <br/> Total trading fees: ${value2} <br/><br/>The total fees paid to DAO will be calculated toward the trader score <br/> It can take up to 10 minutes for the data to update.",
        "averageOpenInterest": "Average Open Interest",
        "averageOpenInterestPromp": "The average open interest is the average of all your open long or short positions in USD value. This value is measured every minute across selected markets in this epoch. <br/><br/> EstimatedOpenInterest = (CumulativeOpenInterest + CurrentOpenInterest * ReaminEpochMinutes) / TotalEpochMinutes <br/><br/> It can take up to 10 minutes for the data to update.",
        "stakingScore": "Staking Score",
        "stakingScorePromp": "This value is the average of your staking scores in current epoch; it is measured every minute. <br/><br/> EstimatedScore = (1 - RemainEpochDays / UnlockTimeDays / 2) * CurrentStakingScore * RemainEpochMinutes <br/> StakingScore  = (CumulativeStakingScore + EstimatedScore) / TotalEpochMinutes <br/><br/> It can take up to 10 minutes for the data to update.",
        "stakingScorePromp2": "Recommended staking score: {newStakingScore} <br/><br/>According to your current total fees paid and average open interests, your staking score need to reach the recommended score for optimized rewards earning strategy.<br/><br/>You need to stake additional {stake} SATORI to reach the recommended score; you share of pool will increase to around {percentage}%, and your estimated rewards will be around {reward} SATORI.",
        "stakingScoreWarnTooltip": "Please note your staking score is currently 0. You will need to raise staking scores to earn rewards.",
        "raise": "Raise",
        "boost": "Boost",
        "raiseScore": "Raise Score",
        "tradingFormula": "Trading Formula",
        "desc": "Trading Formula: the combination of fees paid, average open interest and staking score determines the SATORI rewards that are available to you each epoch. ",
        "allTraderAPY": "All Traders’ Avg. Yield",
        "allTraderAPYPrompt": "Total Rewards Pool * SATORI Price / Total Fees Paid by all Traders",
        "allTraderScore": "All Traders’ Score",
        "allTraderScorePromp": "The current total of all trader's trader scores in this epoch.",
        "yourTraderScore": "Your Trader Score",
        "yourTraderScorePromp": "Your Trader Score = Total Fees Paid ^ 0.7 × Average Open Interest^ 0.3 × Staking Score ^ 0.3",
        "yourShareOfPool": "Your Share of Pool",
        "yourShareOfPoolPromp": "Your Share of Pool = Your Trader Score / All Traders' Score",
        "pools": "Pools",
        "formula": "Formula",
        "switchChainPromp": "Please switch network to {name}",
        "tooltip": {
            "fee1": "Total effective fees for trader score: ",
            "fee2": "Total fees paid to DAO: ",
            "fee3": "Total trading fees: ",
            "fee4": "The effective fee is the total fees paid to DAO with the anti-wash-trading time-weight factor applied. To discourage the large volume at the end of the epoch, we introduced a time-weight factor to the trading fee; the weight of the trading fee will decrease linearly, and at the end of the epoch, it will become 0.5.",
            "fee5": "It can take up to 10 minutes for the data to update.",
            "openInterest1": "The average open interest is the average of all your open long or short positions in USD value. This value is measured every minute across selected markets in this epoch. <br/><br/> EstimatedOpenInterest = (CumulativeOpenInterest + CurrentOpenInterest * ReaminEpochMinutes) / TotalEpochMinutes <br/><br/> It can take up to 10 minutes for the data to update.",
            "stakingScore1": "This value is the average of your staking scores in current epoch; it is measured every minute. <br/><br/> EstimatedScore = (1 - RemainEpochDays / UnlockTimeDays / 2) * CurrentStakingScore * RemainEpochMinutes <br/> StakingScore = (CumulativeStakingScore + EstimatedScore) / TotalEpochMinutes <br/><br/> It can take up to 10 minutes for the data to update."
        },
        "stakeDialog": {
            "title": "Trader SATORI Staking",
            "desc": {
                "title": "Trader Staking SATORI Lock Time",
                "msg": "Your SATORI will be locked for 100 days after staking. If you stake new SATORI while having staked SATORI, the unlock time will be updated."
            },
            "restake": "Restake",
            "getMcb": "Get SATORI",
            "youStakingScore": "Your Staking Score",
            "current": "Current",
            "currentPromp": "Staking Score = Staked SATORI X Unlock Time",
            "averageInEpoch": "Average in Epoch {id}",
            "averageInEpochPromp": "This value is the average of your staking scores in current epoch; it is measured every minute. <br/><br/> EstimatedScore = (1 - RemainEpochDays / UnlockTimeDays / 2) * CurrentStakingScore * RemainEpochMinutes <br/> StakingScore  = (CumulativeStakingScore + EstimatedScore) / TotalEpochMinutes <br/><br/> It can take up to 10 minutes for the data to update.",
            "promp1": "Staking Score = Staked SATORI X Unlock Time in days",
            "promp2": "The staking score will determine your trading rewards in this epoch. ",
            "promp3": "The staking score is directly assoicated with your trader score, which will determine the your trading rewards in this epoch.",
            "yourStakedSATORI": "Your Staked SATORI",
            "stakedSATORI": "Staked SATORI",
            "stakedSATORIBtn": "Staked SATORI On {name}",
            "unlockTime": "Unlock Time",
            "unlockTimePromp": "Unlock Date & Time: <br/> {time} <br/><br/> You can un-stake SATORI after the unlock time. If you stake additional SATORI while having staked ones, the unlock time will update.",
            "newScore": "New Total Score",
            "newUnlockTime": "New {name} Unlock Time",
            "updatedUnlockTime": "Updated Unlock Time",
            "newEstimatedRewards": "New Estimated Rewards",
            "unstakeSATORI": "Unstake SATORI",
            "unstakePromp": "Your staked SATORI will be locked until {time}.",
            "unstakePromp2": "After unstaking, you can re-stake your SATORI for the staking score, and your lock time will reset."
        },
        "confirmDialog": {
            "title": "Confirm Staking",
            "desc": "After staking {value} SATORI, your total {totalValue} SATORI will be locked for {lockedDay} days and cannot be unstaked until the lock time ends.",
            "checkboxLabel": "I understand the staking rules",
            "stakeSATORI": "Stake SATORI"
        },
        "restakeRiskDialog": {
            "title": "Confirm Restaking",
            "riskWarningText": "After restaking your {value} SATORI, your unlock time will be reset as 100 days, and your staking score will increase. After restaking, your SATORI will be locked for <strong>100</strong> days and cannot be unstaked until the lock time ends.",
            "understand": "I understand the staking rules",
            "bntText": "Restake SATORI"
        },
        "historyDialog": {
            "title": "Epoch History",
            "yourData": "Your Data",
            "totalData": "Total Data",
            "yourRewards": "Your Rewards",
            "yourFees": "Your Fees",
            "yourOpenInterest": "Your Open Interest",
            "yourStakingScore": "Your Staking Score",
            "yourTraderScore": "Your Trader Score",
            "yourShareOfPool": "Your Share of Pool",
            "totalRewardsPool": "Total Rewards Pool",
            "totalFees": "Total Fees",
            "totalOpenInterest": "Total Open Interest",
            "totalStakingScore": "Total Staking Score",
            "TotalTraderScore": "Total Trader Score",
            "claimTimeTip1": "Epoch {id} rewards will be claimable on ",
            "claimTimeTip2": "Epoch {id} rewards were claimable on "
        },
        "getMcbDialog": {
            "title": "Get SATORI",
            "bsc": "On BSC, you can get SATORI from <a class=\"link-text\" href=\"https://pancakeswap.finance/swap#/swap?outputCurrency=0x5fe80d2cd054645b9419657d3d10d26391780a7b\" target=\"_blank\">PancakeSwap</a>, <br/> or <a class=\"link-text\"  href=\"https://support.mcdex.io/hc/en-us/articles/4405768548761-How-to-bridge-assets-to-Arbitrum-One-or-BSC\" target=\"_blank\">bridge your token</a> from Arbitrum or Ethereum.",
            "arb": "On Arbitrum, you can get SATORI from <a class=\"link-text\" href=\"https://app.uniswap.org/#/swap\" target=\"_blank\">Uniswap V3</a>, <a class=\"link-text\" href=\"https://app.dodoex.io/exchange/ETH-SATORI?network=arbitrum\" target=\"_blank\">DODO</a>, <a class=\"link-text\" href=\"https://arbitrum.balancer.fi/#/trade\" target=\"_blank\">Balancer</a>, or <a class=\"link-text\" href=\"https://support.mcdex.io/hc/en-us/articles/4405768548761-How-to-bridge-assets-to-Arbitrum-One-or-BSC\" target=\"_blank\">bridge your token</a> from Ethereum."
        }
    },
    "tunableOracleDialog": {
        "title": "Oracle Detail",
        "route": "Route",
        "oracle": "Oracle",
        "external": "External",
        "deviation": "Deviation",
        "timeout": "Timeout"
    },
    "miningPoolType": {
        "tradingMining": "Trading Mining",
        "ammMining": "AMM Mining",
        "mcbPool2": "SATORI Pool2"
    },
    "gasFeeRebate": {
        "header": "Gas Fee Rebate on {name}",
        "endHeader": "Claim Gas Fee Rebate",
        "infoTitle": "Gas Fee Rebate",
        "endTitleTip": "The program has ended",
        "week": "Week",
        "rebateRate": "Rebate Rate",
        "gasSpent": "Gas Spent",
        "weekCountdown": "Week {epoch} Countdown",
        "claimableNow": "Claimable Now",
        "historyTitle": "Rebate History",
        "rebatedClaimed": "Rebated / Claimed",
        "prompts": {
            "rebateRate": "Rebate Rate",
            "claimableNow1": "Week {weekId} gas fee rebate was distributed on {time}; SATORI/BNB price was {price}.",
            "claimableNow2": "Week {weekId} gas fee rebate will be distributed on {time}.",
            "infoDesc1": "Eligible orders (market, limit and stop-limit) gas spendings will be rebated and distributed as SATORI weekly, 3 days after each week ends.",
            "infoDesc2": "All orders with over $100 volume are eligible for the rebate; only two orders under $100 volume are eligible daily.",
            "infoDesc3": "For limit and stop-limit orders, only the spent broker gas is eligible for the rebate.",
            "infoDesc4": "Weekly claimable SATORI is calculated based on the real-time SATORI/BNB price by the distribution time.",
            "infoDesc5": "Contract addresses are not eligible for the rebate.",
            "infoDesc6Before": "Transactions with  ",
            "infoDesc6Center": "unreasonable gas prices",
            "infoDesc6After": "(set through gas settings) are not eligible for the rebate.",
            "infoDesc6Prompt": "We found that some traders set unreasonable transaction gas prices to take advantage of the rebate resources. Therefore, we decided to modify the gas rebate rules: transactions with unreasonable gas prices will not be counted in the scope of the reward. The modification starts at BSC block 13204269.",
            "endInfoDesc": "The {name} gas fee rebate program has ended. Thanks for your participation, and please claim unclaimed SATORI.",
            "rebatedClaimed": "Weekly rebated SATORI is calculated based on the real-time SATORI/BNB price by the distritution time.",
            "price": "SATORI/BNB price by the distribution time: {price}",
            "claimTimeTip": "Week {id} rebate will be claimable on "
        }
    },
    "mobileSwitchChainDialog": {
        "title": "Please switch the network on your mobile wallet first.",
        "content": "Please switch the network on your mobile wallet to {chainName} first, then change the network here."
    }
}
